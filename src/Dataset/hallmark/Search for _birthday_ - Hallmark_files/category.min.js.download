require([ "assets/scripts/libs/DomObserver" ], function(DomObserver) {
    var CATEGORYNAV = {
        init: function() {
            DomObserver.ready("[data-left-nav-trigger]", function(element) {
                CATEGORYNAV.categoryNavSetup(element);
            });
        },
        categoryNavSetup: function(element) {
            var headerTriggers = document.querySelectorAll("[data-flyout-trigger]");
            var leftNavMenu = document.querySelector("[data-left-nav-menu]");
            var leftNavCategory = document.querySelector("[data-left-nav-category]");
            var leftNavFilter = document.querySelector("[data-left-nav-filter]");
            var leftNavOverlay = document.querySelector("[data-left-nav-overlay]");
            var leftNavClose = document.querySelectorAll("[data-left-nav-close]");
            var clickedTrigger = null;
            if (window.outerWidth <= 1024) {
                leftNavMenu.setAttribute("data-left-nav-menu", "");
                leftNavOverlay.setAttribute("data-left-nav-overlay", "");
                if (leftNavCategory) {
                    leftNavCategory.setAttribute("aria-hidden", "true");
                }
                if (leftNavFilter) {
                    leftNavFilter.setAttribute("aria-hidden", "true");
                }
            }
            element.addEventListener("click", function() {
                if (leftNavFilter && this.getAttribute("data-left-nav-trigger") == "filter") {
                    leftNavMenu.setAttribute("data-left-nav-menu", "filter");
                    leftNavFilter.querySelector("[data-left-nav-close]").focus();
                    leftNavFilter.setAttribute("aria-hidden", "false");
                    if (leftNavCategory) {
                        leftNavCategory.setAttribute("aria-hidden", "true");
                    }
                } else {
                    if (leftNavCategory) {
                        leftNavMenu.setAttribute("data-left-nav-menu", "category");
                        leftNavCategory.querySelector("[data-left-nav-close]").focus();
                        leftNavCategory.setAttribute("aria-hidden", "false");
                        if (leftNavFilter) {
                            leftNavFilter.setAttribute("aria-hidden", "true");
                        }
                    } else {
                        return;
                    }
                }
                clickedTrigger = this;
                leftNavOverlay.setAttribute("data-left-nav-overlay", "open");
                CATEGORYNAV.categoryNavClear(leftNavOverlay, leftNavMenu, leftNavCategory, leftNavFilter, leftNavOverlay, clickedTrigger);
                for (var i = 0, j = leftNavClose.length; i < j; i++) {
                    CATEGORYNAV.categoryNavClear(leftNavClose[i], leftNavMenu, leftNavCategory, leftNavFilter, leftNavOverlay, clickedTrigger);
                }
                if (headerTriggers) {
                    for (var i = 0, j = headerTriggers.length; i < j; i++) {
                        CATEGORYNAV.categoryNavClear(headerTriggers[i], leftNavMenu, leftNavCategory, leftNavFilter, leftNavOverlay, clickedTrigger);
                    }
                }
            });
        },
        categoryNavClear: function(element, menu, category, filter, overlay, clicked) {
            element.addEventListener("click", function() {
                clicked.focus();
                menu.setAttribute("data-left-nav-menu", "");
                overlay.setAttribute("data-left-nav-overlay", "");
                if (category) {
                    category.setAttribute("aria-hidden", "true");
                }
                if (filter) {
                    filter.setAttribute("aria-hidden", "true");
                }
            });
        }
    };
    CATEGORYNAV.init();
    return CATEGORYNAV;
});

require([ "assets/scripts/libs/DomObserver" ], function(DomObserver) {
    var COUNTDOWN = {
        init: function() {
            DomObserver.ready("[data-countdown-time]", function(element) {
                COUNTDOWN.setup(element);
            });
        },
        setup: function(element) {
            var date = new Date(element.getAttribute("data-countdown-time"));
            var d = element.querySelector("[data-countdown-day]");
            var h = element.querySelector("[data-countdown-hour]");
            var m = element.querySelector("[data-countdown-minute]");
            var s = element.querySelector("[data-countdown-second]");
            var srt = element.querySelector("[data-countdown-srt]");
            date.setHours(date.getHours() - 5);
            srt.innerHTML = date;
            if (element.getAttribute("data-theme").includes("abbreviate")) {
                COUNTDOWN.abbreviate(element);
            }
            var countdown = setInterval(function() {
                var now = new Date();
                var des = date.getTime() - now.getTime();
                var days = Math.floor(des / (1e3 * 60 * 60 * 24));
                var hours = Math.floor(des % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60));
                var mins = Math.floor(des % (1e3 * 60 * 60) / (1e3 * 60));
                var secs = Math.floor(des % (1e3 * 60) / 1e3);
                d.innerHTML = getTrueNumber(days);
                h.innerHTML = getTrueNumber(hours);
                m.innerHTML = getTrueNumber(mins);
                s.innerHTML = getTrueNumber(secs);
                if (countdown <= 0) clearInterval(countdown);
            }, 1e3);
            var getTrueNumber = function getTrueNumber(x) {
                return x < 10 ? "0" + x : x;
            };
            setTimeout(function() {
                element.classList.add("loaded");
            }, 1e3);
        },
        abbreviate: function(parent) {
            var day = parent.querySelector(".countdown-day .countdown-editorial");
            var hrs = parent.querySelector(".countdown-hour .countdown-editorial");
            var min = parent.querySelector(".countdown-minute .countdown-editorial");
            var sec = parent.querySelector(".countdown-second .countdown-editorial");
            day.innerHTML = "Day";
            hrs.innerHTML = "Hrs";
            min.innerHTML = "Min";
            sec.innerHTML = "Sec";
        }
    };
    COUNTDOWN.init();
    return COUNTDOWN;
});

require([ "assets/scripts/libs/DomObserver" ], function(DomObserver) {
    var CSESCROLLER = {
        init: function() {
            DomObserver.ready("[data-browse-scroller-container]", function(element) {
                CSESCROLLER.cseScrollerSetup(element);
            });
        },
        cseScrollerSetup: function(element) {
            var scrollerLeft = element.querySelector('[data-browse-scroller="left"]');
            var scrollerRight = element.querySelector('[data-browse-scroller="right"]');
            if (scrollerLeft) {
                scrollerLeft.addEventListener("click", function(l) {
                    l.preventDefault();
                    if (element.classList.contains("right")) {
                        element.classList.remove("right");
                    }
                    if (!element.classList.contains("left")) {
                        element.classList.add("left");
                    }
                });
            }
            if (scrollerRight) {
                scrollerRight.addEventListener("click", function(r) {
                    r.preventDefault();
                    if (element.classList.contains("left")) {
                        element.classList.remove("left");
                        element.classList.add("right");
                    }
                });
            }
        }
    };
    CSESCROLLER.init();
    return CSESCROLLER;
});

require([ "assets/scripts/libs/DomObserver" ], function(DomObserver) {
    var VARIATIONS = {
        init: function() {
            DomObserver.ready(".js-browse-tile-variations-trigger", function(element) {
                VARIATIONS.variationSetup(element);
            });
        },
        variationSetup: function(element) {
            var variationTrigger = element.querySelector("[data-product-variations-trigger]");
            var variationModal = element.querySelector("[data-product-variations]");
            variationTrigger.addEventListener("click", function() {
                VARIATIONS.variationUpdate(variationTrigger, variationModal, "true", "false", 1);
            });
            variationTrigger.addEventListener("keyup", function(e) {
                if (e.keyCode == 13) {
                    VARIATIONS.variationUpdate(variationTrigger, variationModal, "true", "false", 1);
                }
            });
            variationModal.addEventListener("keyup", function(e) {
                if (e.keyCode == 13) {
                    VARIATIONS.variationClose();
                }
            });
            variationModal.addEventListener("click", function() {
                VARIATIONS.variationClose();
            });
            document.addEventListener("keyup", function(e) {
                if (e.keyCode == 27) {
                    VARIATIONS.variationClose();
                }
            });
        },
        variationUpdate: function(eleTrigger, eleModal, ariaExpanded, ariaHidden, tabIndex) {
            eleTrigger.setAttribute("aria-expanded", ariaExpanded);
            eleModal.setAttribute("aria-hidden", ariaHidden);
            item = eleModal.querySelectorAll(".browse-tile-variation");
            for (var i = 0, j = item.length; i < j; i++) {
                item[i].addEventListener("click", function(t) {
                    VARIATIONS.variationClose();
                });
            }
        },
        variationClose: function() {
            var variationTrigger = document.querySelectorAll("[data-product-variations-trigger]");
            var variationModal = document.querySelectorAll("[data-product-variations]");
            var variationItem = document.querySelectorAll(".browse-tile-variation");
            for (var i = 0, j = variationTrigger.length; i < j; i++) {
                variationTrigger[i].setAttribute("aria-expanded", "false");
            }
            for (var i = 0, j = variationModal.length; i < j; i++) {
                variationModal[i].setAttribute("aria-hidden", "true");
            }
            for (var i = 0, j = variationModal.length; i < j; i++) {
                variationItem[i].tabIndex = -1;
            }
        }
    };
    VARIATIONS.init();
    return VARIATIONS;
});

require([ "assets/scripts/libs/DomObserver" ], function(DomObserver) {
    var QUICKLOOK = {
        init: function() {
            DomObserver.ready(".browse-tile.CARDS", function(element) {
                QUICKLOOK.quickLookCSE(element);
            });
            var footer = document.querySelector(".site-footer-container");
            var footerModal = '<div id="quicklook" aria-hidden="true"><div class="dialog-overlay" tabindex="-1" data-micromodal-close><div class="dialog" data-dialog="modal" data-theme="quick-look" aria-modal="true" aria-labelledby="quicklook-title" role="dialog"><button class="dialog-close" data-micromodal-close><span class="screen-reader-text">Close dialog</span><span class="fa fa-icon" data-micromodal-close aria-hidden="true"></span></button><header class="dialog-heading screen-reader-text" role="banner"><span class="fa fa-icon" aria-hidden="true"></span><h2 class="dialog-title" id="quicklook-title">Product Quicklook</h2></header><div class="dialog-content"><div class="columns is-gapless quick-look-messaging"><div class="column col-60 quick-look-img" data-quick-look-modal-img></div><div class="column col-40 quick-look-info" data-quick-look-modal-info><h3 class="copy-size-e is-bold">Front Message:</h3><p class="quick-look-message" data-quick-look-modal-front>&nbsp;</p><h3 class="copy-size-e is-bold">Inside Message:</h3><p class="quick-look-message" data-quick-look-modal-inside>&nbsp;</p><div class="gutter-top-medium"><a href="#" class="btn-primary" data-quick-look-modal-button> <span quick-look-modal-button-cta>View details</span> </a></div></div></div></div></div></div></div>';
            footer.insertAdjacentHTML("afterend", footerModal);
        },
        quickLookCSE: function(element) {
            var quickLookButton = element.querySelector("[data-bt-quick-look]");
            if (!element.querySelector(".card-stationary")) {
                return;
            }
            var browseCSEIMG1 = element.querySelector(".card-stationary .card-img img").getAttribute("data-src");
            var browseCSEIMG2 = element.querySelector(".card-peak .card-img img").getAttribute("data-src");
            var browseCSELink = element.querySelector(".card-peak .card-img").getAttribute("href");
            var browseCSEType = element.querySelector("[data-type]").getAttribute("data-type");
            var browseCSETip = element.querySelector("[data-tipping]").getAttribute("data-tipping");
            var browseCSEProcess = element.querySelector("[data-process]").getAttribute("data-process");
            var browseCSEFrontMessage = element.querySelector("[data-front-message]").getAttribute("data-front-message");
            var browseCSEInsideMessage = element.querySelector("[data-inside-message]").getAttribute("data-inside-message");
            var browseCSEPID = element.querySelector("[data-pid]").getAttribute("data-pid");
            quickLookButton.addEventListener("click", function() {
                QUICKLOOK.quickLookCSEModal(browseCSEIMG1, browseCSEIMG2, browseCSEType, browseCSETip, browseCSEProcess, browseCSEFrontMessage, browseCSEInsideMessage, browseCSELink);
            });
        },
        quickLookCSEModal: function(img1, img2, type, tip, process, front, inside, link) {
            var MicroModal = require("micromodal");
            var modal = document.querySelector('[data-theme="quick-look"]');
            var modalIMG = modal.querySelector("[data-quick-look-modal-img]");
            setTimeout(function() {
                QUICKLOOK.quickLookCSESetup(modal, img1, img2, type, tip, process, front, inside, link);
            }, 100);
            setTimeout(function() {
                MicroModal.show("quicklook");
            }, 300);
        },
        quickLookCSESetup: function(modal, img1, img2, type, tip, process, front, inside, link) {
            var modalIMG = modal.querySelector("[data-quick-look-modal-img]");
            var modalCSE = '<div class="product-selected" data-quick-look-cse><div class="card-contained" data-type data-tipping data-process data-features><div class="card-centered"><div class="card card-outside"><img src="#"></div><div class="card card-inside"><img src="#"></div><div class="card card-content"><img src="#"></div></div></div></div>';
            if (window.outerWidth >= 721) {
                modalIMG.innerHTML = modalCSE;
                var cseContainer = modal.querySelector("[data-quick-look-cse]");
                var cseOutside = cseContainer.querySelector(".card-outside img");
                var cseInside = cseContainer.querySelector(".card-inside img");
                var cseContent = cseContainer.querySelector(".card-content img");
                var cseType = cseContainer.querySelector("[data-type]");
                var cseTip = cseContainer.querySelector("[data-tipping]");
                var cseButton = modal.querySelector("[data-quick-look-modal-button]");
                cseOutside.setAttribute("data-src", img1);
                cseInside.setAttribute("data-src", img2);
                cseContent.setAttribute("data-src", img2);
                cseType.setAttribute("data-type", type);
                cseTip.setAttribute("data-tipping", tip);
                cseButton.setAttribute("href", link);
            }
            var cseMessageFront = modal.querySelector("[data-quick-look-modal-front]");
            var cseMessageInside = modal.querySelector("[data-quick-look-modal-inside]");
            cseMessageFront.innerHTML = front;
            cseMessageInside.innerHTML = inside;
        }
    };
    QUICKLOOK.init();
    return QUICKLOOK;
});

require([ "assets/scripts/libs/DomObserver", "lodash" ], function(DomObserver, _) {
    DomObserver.ready("[data-dropdown-button-trigger]", function() {
        this.addEventListener("click", function() {
            var menuName = this.getAttribute("data-dropdown-button-trigger");
            var activeMenu = document.querySelector('[data-dropdown-button-menu="' + menuName + '"]');
            var isActiveTrigger = this.hasAttribute("data-dropdown-button-trigger-active");
            var hasNestedContainers = this.hasAttribute("data-dropdown-button-has-nested-containers");
            var nestedContainer = closest(this, "[data-dropdown-button-container-nested]");
            var nestedContainerTrigger = this.hasAttribute("data-dropdown-button-nested-trigger");
            if (hasNestedContainers && isActiveTrigger) {
                removeActiveTrigger(this);
                closeAllMenus();
            } else if (nestedContainer && isActiveTrigger) {
                removeActiveTrigger(this);
                closeAllNestedMenus();
            } else if (nestedContainer) {
                closeAllNestedMenus();
            } else {
                closeAllMenus();
            }
            if (isActiveTrigger) {
                removeActiveTrigger(this);
                this.setAttribute("aria-expanded", "false");
                activeMenu.setAttribute("aria-hidden", "true");
                activeMenu.classList.remove("active");
            } else {
                this.setAttribute("data-dropdown-button-trigger-active", "");
                this.setAttribute("aria-expanded", "true");
                activeMenu.setAttribute("aria-hidden", "false");
                activeMenu.classList.add("active");
            }
            return false;
        });
    });
    document.addEventListener("keyup", function(event) {
        if (event.which === 27) {
            closeAllMenus();
        }
    });
    document.addEventListener("click", function(event) {
        if (!event.target.hasAttribute("data-dropdown-button-trigger") && !event.target.parentElement.hasAttribute("data-dropdown-button-trigger")) {
            closeAllMenus();
        }
    });
    function removeActiveTrigger(trigger) {
        trigger.removeAttribute("data-dropdown-button-trigger-active");
    }
    function closeAllMenus() {
        var menus = document.querySelectorAll("[data-dropdown-button-menu]");
        var triggers = document.querySelectorAll("[data-dropdown-button-trigger-active]");
        _.forEach(menus, function(menu) {
            menu.setAttribute("aria-hidden", "true");
            menu.classList.remove("active");
        });
        _.forEach(triggers, function(trigger) {
            trigger.removeAttribute("data-dropdown-button-trigger-active");
            trigger.setAttribute("aria-expanded", "false");
        });
    }
    function closeAllNestedMenus() {
        var nestedContainers = document.querySelectorAll([ "[data-dropdown-button-container-nested]" ]);
        _.forEach(nestedContainers, function(container) {
            var menus = container.querySelectorAll("[data-dropdown-button-menu]");
            _.forEach(menus, function(menu) {
                menu.setAttribute("aria-hidden", "true");
                menu.classList.remove("active");
            });
        });
    }
    function closest(el, selector) {
        var matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;
        while (el) {
            if (matchesSelector.call(el, selector)) {
                return el;
            } else {
                el = el.parentElement;
            }
        }
        return null;
    }
});

var TOPNAV = {
    init: function() {
        var moreFilterTrigger = document.querySelector('[data-slideout-trigger="more-filters"]');
        var moreFilterMenu = document.querySelector('[data-slideout-menu="more-filters"]');
        var stickFilterTrigger = document.querySelector('[data-slideout-trigger="mobile-sticky"]');
        var stickFilterMenu = document.querySelector('[data-slideout-menu="mobile-sticky"]');
        var overlaySlide = document.querySelector("[data-slideout-overlay]");
        var closeSlide = document.querySelector("[data-slideout-close]");
        var optionalClose1 = document.querySelector("[data-left-nav-close]");
        var optionalClose2 = document.querySelector("[data-left-apply]");
        var optionalClose3 = document.querySelector("[data-left-clear]");
        if (moreFilterTrigger) {
            moreFilterTrigger.addEventListener("click", function() {
                TOPNAV.updateMenu(this, moreFilterMenu, "active");
                optionalClose1.focus();
            });
        }
        if (stickFilterTrigger) {
            stickFilterTrigger.addEventListener("click", function() {
                TOPNAV.updateMenu(this, moreFilterMenu, "active");
                optionalClose1.focus();
            });
        }
        if (closeSlide) {
            closeSlide.addEventListener("click", function(o) {
                o.preventDefault();
                moreFilterMenu.classList.remove("active");
                stickFilterMenu.classList.remove("active");
            });
        }
        if (overlaySlide) {
            overlaySlide.addEventListener("click", function(o) {
                o.preventDefault();
                moreFilterMenu.classList.remove("active");
                stickFilterMenu.classList.remove("active");
            });
        }
        document.addEventListener("keyup", function(event) {
            if (event.which === 27) {
                moreFilterMenu.classList.remove("active");
                stickFilterMenu.classList.remove("active");
            }
        });
        if (optionalClose1 && moreFilterMenu && stickFilterMenu) {
            optionalClose1.addEventListener("click", function(o) {
                o.preventDefault();
                moreFilterMenu.classList.remove("active");
                stickFilterMenu.classList.remove("active");
            });
        }
        if (optionalClose2 && moreFilterMenu && stickFilterMenu) {
            optionalClose2.addEventListener("click", function(o) {
                o.preventDefault();
                moreFilterMenu.classList.remove("active");
                stickFilterMenu.classList.remove("active");
            });
        }
    },
    updateMenu: function(ele1, ele2, state) {
        if (!ele2.classList.contains(state)) {
            ele1.setAttribute("aria-expanded", "true");
            ele2.classList.add(state);
        } else {
            ele1.setAttribute("aria-expanded", "false");
            ele2.classList.remove(state);
        }
    }
};

TOPNAV.init();

window.addEventListener("load", function() {
    var STICKY_ELEMENT = {
        init: function() {
            var sticky = document.querySelector("[data-sticky-element]");
            if (!sticky) return;
            var top = sticky.offsetTop;
            var timeout;
            var last_known_scroll_position = window.scrollY;
            window.addEventListener("scroll", function() {
                last_known_scroll_position = window.scrollY;
                if (timeout) {
                    window.cancelAnimationFrame(timeout);
                }
                timeout = window.requestAnimationFrame(function() {
                    STICKY_ELEMENT.stickyScroll(sticky, top, last_known_scroll_position);
                });
            }, false);
        },
        stickyScroll: function(ele, position, scroll) {
            if (scroll >= position) {
                ele.setAttribute("data-sticky-element", "true");
            } else {
                ele.setAttribute("data-sticky-element", "false");
            }
        }
    };
    STICKY_ELEMENT.init();
    return STICKY_ELEMENT;
});

document.addEventListener("DOMContentLoaded", function() {
    var JUICER = {
        init: function() {
            var container = document.querySelector("[data-stream-id]");
            if (!container) {
                return;
            }
            var feed = container.getAttribute("data-stream-id");
            JUICER.juicerCall(feed, container);
        },
        juicerCall: function(feed, container) {
            var req = new XMLHttpRequest();
            var url = "https://www.juicer.io/api/feeds/" + feed + "?per=24&starting_at=2019-12-12";
            req.overrideMimeType("application/json");
            req.open("GET", url, true);
            req.onload = function() {
                if (req.status != 200) {
                    return;
                }
                var data = JSON.parse(this.response);
                var posts = data.posts.items;
                console.log(data);
                JUICER.juicerSetup(container, posts);
            };
            req.send(null);
        },
        juicerSetup: function(container, data) {
            data.forEach(function(item) {
                var list = container.querySelector("[data-carousel-movement]");
                var card = document.createElement("li");
                var card_container = document.createElement("div");
                var meta = document.createElement("meta");
                var source = document.createElement("div");
                var link = document.createElement("a");
                var image = document.createElement("img");
                var image_url = new Request(item.image);
                var content = document.createElement("div");
                var message = document.createElement("p");
                var see_more = document.createElement("button");
                var placeholder_svg = 'data:image/svg+xml;utf8,<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 ' + item.width + " " + item.height + '" style="enable-background:new 0 0 1000 1000;" xml:space="preserve"></svg>';
                card.setAttribute("class", "column media-card");
                card_container.setAttribute("class", "media-card-container");
                source.setAttribute("class", "media-card-social fa " + item.source.source.toLowerCase());
                link.setAttribute("class", "media-card-asset");
                image.setAttribute("class", "lazyload");
                content.setAttribute("class", "media-card-content-container");
                message.setAttribute("class", "media-card-content");
                see_more.setAttribute("class", "media-card-see-more");
                card.setAttribute("data-carousel-object", "");
                source.setAttribute("aria-hidden", "true");
                link.setAttribute("href", item.full_url);
                link.setAttribute("target", "_blank");
                link.setAttribute("rel", "noopener noreferrer");
                image.setAttribute("src", placeholder_svg);
                image.setAttribute("alt", item.id + " image courtesy of " + item.poster_name);
                image.setAttribute("height", item.height);
                image.setAttribute("width", item.width);
                image.setAttribute("data-lzy-src", item.image);
                see_more.innerHTML = '<span class="screen-reader-text">Read more</span><span class="fa fa-icon" aria-hidden="true"></span>';
                message.innerHTML = item.unformatted_message;
                meta.setAttribute("class", "meta");
                meta.setAttribute("post-type", item.source.source.toLowerCase());
                meta.setAttribute("post-url", item.full_url);
                meta.setAttribute("post-image", item.image);
                meta.setAttribute("post-message", item.unformatted_message);
                fetch(image_url).then(function(response) {
                    if (response.status != 403) {
                        link.appendChild(image);
                    }
                });
                list.appendChild(card);
                card.appendChild(meta);
                card.appendChild(card_container);
                card_container.appendChild(source);
                card_container.appendChild(link);
                card_container.appendChild(see_more);
                card_container.appendChild(content);
                content.appendChild(message);
                JUICER.juicerReadMore(see_more, content);
            });
        },
        juicerReadMore: function(trigger, container) {
            trigger.addEventListener("click", function() {
                trigger.classList.toggle("is-open");
                container.classList.toggle("is-open");
            });
        }
    };
    JUICER.init();
    return JUICER;
});