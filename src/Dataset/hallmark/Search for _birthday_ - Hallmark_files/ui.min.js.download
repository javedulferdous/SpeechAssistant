"use strict";

(function() {
    function CustomEvent(event, params) {
        params = params || {
            bubbles: false,
            cancelable: false,
            detail: undefined
        };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
    }
    CustomEvent.prototype = window.CustomEvent.prototype;
    window.CustomEvent = CustomEvent;
})();

var ui_modal = function() {
    this.closeButton = null;
    this.modal = null;
    this.overlay = null;
    this.transitionEnd = transitionSelect();
    var defaults = {
        className: "fade-and-drop",
        closeButton: true,
        content: "",
        maxWidth: 1e3,
        minWidth: 280,
        overlay: true
    };
    if (window.innerWidth < 600) {
        defaults.maxWidth = window.innerWidth - 20;
    }
    defaults.maxHeight = window.innerHeight - 20;
    if (arguments[0] && typeof arguments[0] === "object") {
        this.options = extendDefaults(defaults, arguments[0]);
    } else {
        this.options = defaults;
    }
};

ui_modal.prototype.open = function() {
    buildModal.call(this);
    initializeEvents.call(this);
    window.getComputedStyle(this.modal).height;
    this.overlay.dataset.modalOverlay = "open";
    this.modal.dataset.modal = "open";
    this.modal.className = this.modal.className + (this.modal.offsetHeight > window.innerHeight ? "anchored" : " ui-modal-open");
    this.overlay.className = this.overlay.className + " ui-modal-open";
    triggerLaunchEvent(this.modal);
};

ui_modal.prototype.close = function() {
    var _ = this;
    this.overlay.dataset.modalOverlay = "";
    this.modal.dataset.modal = "";
    this.modal.addEventListener(this.transitionEnd, function() {
        _.modal.parentNode.removeChild(_.modal);
    });
    this.overlay.addEventListener(this.transitionEnd, function() {
        if (_.overlay.parentNode) _.overlay.parentNode.removeChild(_.overlay);
    });
};

function extendDefaults(source, properties) {
    var property;
    for (property in properties) {
        if (properties.hasOwnProperty(property)) {
            source[property] = properties[property];
        }
    }
    return source;
}

function buildModal() {
    var content, contentHolder, docFrag;
    if (typeof this.options.content === "string") {
        content = this.options.content;
    } else {
        content = this.options.content.innerHTML;
    }
    docFrag = document.createDocumentFragment();
    this.modal = document.createElement("div");
    this.modal.dataset.modal = "";
    this.modal.className = "ui-modal " + this.options.className;
    this.modal.style.minWidth = this.options.minWidth + "px";
    this.modal.style.maxWidth = this.options.maxWidth + "px";
    this.modal.style.maxHeight = this.options.maxHeight + "px";
    if (this.options.closeButton === true) {
        this.closeButton = document.createElement("a");
        this.closeButton.dataset.modalClose = "";
        this.closeButton.className = "modal-close";
        this.closeButton.innerHTML = '<i class="fa fa-times"></i>';
        this.modal.appendChild(this.closeButton);
    }
    if (this.options.overlay === true) {
        this.overlay = document.createElement("div");
        this.overlay.dataset.modalOverlay = "";
        this.overlay.className = "modal-overlay " + this.options.className;
        docFrag.appendChild(this.overlay);
    }
    contentHolder = document.createElement("div");
    contentHolder.className = "ui-modal-content";
    contentHolder.innerHTML = content;
    this.modal.appendChild(contentHolder);
    docFrag.appendChild(this.modal);
    document.body.appendChild(docFrag);
}

function initializeEvents() {
    if (this.closeButton) {
        this.closeButton.addEventListener("click", this.close.bind(this));
    }
    if (this.overlay) {
        this.overlay.addEventListener("click", this.close.bind(this));
    }
}

function triggerLaunchEvent(modal) {
    var event = new CustomEvent("modal-launch", {
        detail: modal
    });
    document.dispatchEvent(event);
}

function transitionSelect() {
    var el = document.createElement("div");
    if (el.style.WebkitTransition) return "webkitTransitionEnd";
    if (el.style.OTransition) return "oTransitionEnd";
    return "transitionend";
}

var modalTriggers = document.querySelectorAll("[data-modal-trigger]"), i = 0;

if (modalTriggers) {
    for (i = 0; i < modalTriggers.length; i++) {
        modalTriggers[i].addEventListener("click", function(evt) {
            evt.preventDefault();
            var source = this.dataset.modalSrc, target = this.dataset.modalTarget, content, modal, resp;
            if (target) {
                content = document.querySelector(target);
                modal = new ui_modal({
                    content: content.innerHTML
                });
                modal.open();
            } else if (source) {
                var request = new XMLHttpRequest(), tempDiv = document.createElement("div");
                request.open("GET", source, true);
                request.onload = function() {
                    if (request.status >= 200 && request.status < 400) {
                        resp = request.responseText;
                    } else {
                        resp = "<div>ERROR</div>";
                    }
                    tempDiv.innerHtml = "";
                    tempDiv.innerHTML = resp;
                    modal = new ui_modal({
                        content: tempDiv.innerHTML
                    });
                    modal.open();
                };
                request.onerror = function() {};
                request.send();
            }
        });
    }
}

"use strict";

var ui_thumbnails = {
    init: function() {
        var self = this;
        this.xDown = null;
        this.yDown = null;
        this.attachEventListeners();
        document.addEventListener("modal-launch", self.handleModal.bind(self));
    },
    attachEventListeners: function(element) {
        var i = 0, j = 0, thumbnailContainer, thumbnailPresenter, thumbnails, self = this;
        this.thumbnailContainers = element ? element.querySelectorAll("[data-thumbnails]") : document.querySelectorAll("[data-thumbnails]");
        if (this.thumbnailContainers && this.thumbnailContainers.length) {
            for (i = 0; i < this.thumbnailContainers.length; i++) {
                thumbnailContainer = this.thumbnailContainers[i];
                thumbnails = thumbnailContainer.querySelectorAll("[data-thumbnail]");
                thumbnailPresenter = thumbnailContainer.querySelector("[data-thumbnail-presenter]");
                thumbnailPresenter.addEventListener("touchstart", self.handleTouchStart.bind(self));
                thumbnailPresenter.addEventListener("touchmove", self.handleTouchMove.bind(self));
                if (thumbnails && thumbnails.length) {
                    for (j = 0; j < thumbnails.length; j++) {
                        thumbnails[j].addEventListener("click", function(evt) {
                            self.activateThumb(evt.currentTarget, thumbnailPresenter, thumbnailContainer);
                        });
                    }
                }
            }
        }
    },
    handleModal: function(evt) {
        var modal = evt.detail;
        this.attachEventListeners(modal);
    },
    activateThumb: function(newThumbBox, thumbnailPresenter, thumbnailContainer) {
        var newThumb = newThumbBox.querySelector("img"), imgSrc = newThumb.getAttribute("src"), current;
        thumbnailPresenter.setAttribute("src", imgSrc);
        current = thumbnailContainer.querySelector('[data-thumbnail="selected"]');
        if (current) {
            current.setAttribute("data-thumbnail", "");
        }
        newThumbBox.setAttribute("data-thumbnail", "selected");
    },
    moveToNextThumbnail: function(presenter, direction) {
        var parent, thumbnailContainer, thumbnails, i = 0, found = false, targetThumb, previousThumb;
        parent = presenter.parentNode;
        while (parent && parent.getAttribute("data-thumbnails") === null) {
            parent = parent.parentNode;
        }
        thumbnailContainer = parent.querySelector(".thumbnail-container");
        thumbnails = thumbnailContainer.querySelectorAll("[data-thumbnail]");
        for (i = 0; i < thumbnails.length && !found; i++) {
            if (thumbnails[i].dataset.thumbnail === "selected") {
                found = true;
                previousThumb = thumbnails[i];
                if (direction === "right") {
                    targetThumb = i === 0 ? thumbnails[thumbnails.length - 1] : thumbnails[i - 1];
                } else {
                    targetThumb = i === thumbnails.length - 1 ? thumbnails[0] : thumbnails[i + 1];
                }
            }
        }
        this.activateThumb(targetThumb, presenter, thumbnailContainer);
    },
    handleTouchStart: function(evt) {
        this.xDown = evt.touches[0].clientX;
        this.yDown = evt.touches[0].clientY;
    },
    handleTouchMove: function(evt) {
        if (!this.xDown || !this.yDown) {
            return;
        }
        var xUp = evt.touches[0].clientX, yUp = evt.touches[0].clientY, xDiff = this.xDown - xUp, yDiff = this.yDown - yUp;
        if (Math.abs(xDiff) > Math.abs(yDiff)) {
            if (xDiff > 0) {
                this.moveToNextThumbnail(evt.currentTarget, "left");
            } else {
                this.moveToNextThumbnail(evt.currentTarget, "right");
            }
        } else {
            if (yDiff > 0) {} else {}
        }
        this.xDown = null;
        this.yDown = null;
    }
};

ui_thumbnails.init();

"use strict";

var ui_tooltip = {
    init: function() {
        var tooltips = document.querySelectorAll("[data-tooltip]"), i, text, title, direction, eventType, tooltip, titleEl, textEl, self = this;
        this.tooltipWidth = 200;
        for (i = 0; i < tooltips.length; i++) {
            text = tooltips[i].getAttribute("data-tooltip-text");
            title = tooltips[i].getAttribute("data-tooltip-title");
            direction = tooltips[i].getAttribute("data-tooltip-direction");
            eventType = tooltips[i].getAttribute("data-tooltip-event") || "click";
            tooltip = document.createElement("aside");
            tooltip.id = "tooltip-" + (i + 1);
            tooltip.classList.add("tooltip");
            tooltip.classList.add("is-hidden");
            tooltip.setAttribute("role", "tooltip");
            tooltip.setAttribute("aria-hidden", "true");
            titleEl = document.createElement("p");
            titleEl.classList.add("title");
            titleEl.classList.add("is-bold");
            titleEl.textContent = title;
            textEl = document.createElement("p");
            textEl.textContent = text;
            tooltip.appendChild(titleEl);
            tooltip.appendChild(textEl);
            tooltips[i].appendChild(tooltip);
            tooltips[i].setAttribute("aria-describedby", tooltip.id);
            var closeAllTooltips = function() {
                for (var i = 0; i < tooltips.length; i++) {
                    tooltips[i].setAttribute("data-tooltip", "");
                    tooltips[i].setAttribute("aria-hidden", "true");
                }
                document.body.removeEventListener("click", closeAllTooltips, false);
            };
            var showTooltip = function(event) {
                var element = event.currentTarget;
                var newState = element.getAttribute("data-tooltip");
                var direction = element.getAttribute("data-tooltip-direction");
                var newDirection = self.calculateDirection(element.querySelector(".tooltip"), direction);
                closeAllTooltips();
                this.querySelector(".tooltip").className = "tooltip";
                this.querySelector(".tooltip").classList.add("tip-" + newDirection);
                this.querySelector(".tooltip").setAttribute("aria-hidden", "false");
                if (newState === "open") {
                    this.setAttribute("data-tooltip", "");
                }
                if (newState === "") {
                    this.setAttribute("data-tooltip", "open");
                }
                window.setTimeout(function() {
                    document.body.addEventListener("click", closeAllTooltips, false);
                }, 300);
                return false;
            };
            var hideTooltip = function(event) {
                var element = event.currentTarget;
                element.setAttribute("data-tooltip", "");
                element.querySelector(".tooltip").setAttribute("aria-hidden", "true");
                return false;
            };
            if (eventType == "click") {
                tooltips[i].addEventListener("click", showTooltip);
            } else if (eventType == "hover") {
                tooltips[i].addEventListener("mouseenter", showTooltip);
                tooltips[i].addEventListener("focus", showTooltip);
                tooltips[i].addEventListener("mouseleave", hideTooltip);
                tooltips[i].addEventListener("blur", hideTooltip);
            }
        }
    },
    calculateDirection: function(tooltip, direction) {
        var newDirection = direction, bounds = this.calculateBounds(tooltip), directions = [];
        if (!this.hasSpace(direction, bounds)) {
            if (direction === "top") {
                newDirection = this.tryDirections([ "bottom", "left", "right" ], bounds);
            } else if (direction === "bottom") {
                newDirection = this.tryDirections([ "top", "right", "left" ], bounds);
            } else if (direction === "left") {
                newDirection = this.tryDirections([ "top", "left", "right" ], bounds);
            } else {
                newDirection = this.tryDirections([ "left", "top", "bottom" ], bounds);
            }
        }
        return newDirection || direction;
    },
    hasSpace: function(direction, bounds) {
        if (direction === "top") {
            return bounds.top >= bounds.height && bounds.left >= bounds.width / 2 && bounds.right >= bounds.width / 2;
        } else if (direction === "bottom") {
            return bounds.bottom >= bounds.height && bounds.left >= bounds.width / 2 && bounds.right >= bounds.width / 2;
        } else if (direction === "left") {
            return bounds.bottom >= bounds.height && bounds.left >= bounds.width && bounds.top >= bounds.height;
        } else {
            return bounds.bottom >= bounds.height && bounds.right >= bounds.width && bounds.top >= bounds.height;
        }
    },
    tryDirections: function(directions, bounds) {
        for (var i = 0, j = directions.length; i < j; i++) {
            if (this.hasSpace(directions[i], bounds)) {
                return directions[i];
            }
        }
        return null;
    },
    calculateBounds: function(tooltip) {
        var rect = tooltip.getBoundingClientRect(), parent = tooltip.parentNode.getBoundingClientRect(), bounds = {
            top: parent.top,
            left: parent.left,
            width: this.tooltipWidth,
            height: rect.height
        };
        bounds.right = window.innerWidth - bounds.left;
        bounds.bottom = window.innerHeight - bounds.top;
        return bounds;
    }
};

ui_tooltip.init();

document.addEventListener("DOMContentLoaded", function() {
    var searchFace = document.querySelector("[data-face]");
    var searchFun = document.querySelector("[data-fun]");
    var searchWin = document.querySelector("[data-win]");
    if (!searchFun) {
        return;
    }
    searchFun.addEventListener("keypress", function() {
        searchFace.classList.add("excited");
    });
    searchFun.addEventListener("blur", function() {
        searchFace.classList.remove("excited");
    });
});

window.onload = function() {
    var viewportWidth = window.innerWidth;
    var showcaseAccordion = document.querySelector("[data-accordion-content]");
    if (showcaseAccordion !== null && viewportWidth <= 700) {
        setTimeout(function() {
            showcaseAccordion.style.maxHeight = showcaseAccordion.scrollHeight.toFixed(0) + "px";
        }, 2e3);
    }
};

require([ "assets/scripts/libs/DomObserver" ], function(DomObserver) {
    DomObserver.ready("[data-hm-accordion]", function() {
        setEventHandlers(this);
    });
    function setEventHandlers(accordion) {
        var triggers = accordion.querySelectorAll("[data-hm-accordion-trigger]");
        var insideTriggers = accordion.querySelectorAll("[data-hm-accordion-inside-trigger]");
        var outsideTriggers = document.querySelectorAll("[data-hm-accordion-outside-trigger]");
        for (var i = 0, j = triggers.length; i < j; i++) {
            triggers[i].addEventListener("click", function(event) {
                activateTab(event, accordion);
            });
            triggers[i].addEventListener("keyup", function(event) {
                var keycode = event.which;
                if (keycode == 13 || keycode == 32) {
                    activateTab(event, accordion);
                }
            });
        }
        for (var i = 0, j = insideTriggers.length; i < j; i++) {
            insideTriggers[i].addEventListener("click", function(event) {
                var insideParent = this.parentNode;
                while (!insideParent.hasAttribute("data-hm-accordion-container")) {
                    insideParent = insideParent.parentNode;
                }
                var nextParent = insideParent.nextElementSibling;
                activateTab(event, accordion, nextParent.querySelector("[data-hm-accordion-trigger]"));
            });
        }
        for (var i = 0, j = outsideTriggers.length; i < j; i++) {
            outsideTriggers[i].addEventListener("click", function(event) {
                var accordionName = this.getAttribute("data-hm-accordion-outside-trigger");
                if (accordionName) {
                    var accordion = document.querySelector('[data-hm-accordion="' + accordionName + '"]');
                    if (accordion) {
                        activateTab(event, accordion);
                    }
                }
            });
        }
    }
    function activateTab(event, accordion, target) {
        var triggers = accordion.querySelectorAll("[data-hm-accordion-trigger]");
        target = target || event.currentTarget;
        if (target.getAttribute("data-hm-accordion-always-open") == "true" || accordion.getAttribute("data-hm-accordion-always-open") == "true") {
            if (target.getAttribute("data-hm-accordion-trigger") == "active") {
                target.setAttribute("data-hm-accordion-trigger", "");
                target.setAttribute("aria-expanded", "false");
                target.setAttribute("aria-selected", "false");
            } else {
                target.setAttribute("data-hm-accordion-trigger", "active");
                target.setAttribute("aria-expanded", "true");
                target.setAttribute("aria-selected", "true");
            }
            return;
        }
        for (var i = 0, j = triggers.length; i < j; i++) {
            triggers[i].setAttribute("data-hm-accordion-trigger", "");
            triggers[i].setAttribute("aria-expanded", "false");
            triggers[i].setAttribute("aria-selected", "false");
        }
        setTimeout(function() {
            if (target.hasAttribute("data-hm-accordion-outside-trigger")) {} else {
                target.setAttribute("data-hm-accordion-trigger", "active");
                target.setAttribute("aria-expanded", "true");
                target.setAttribute("aria-selected", "true");
                if (target.nextElementSibling) {}
            }
            var previousSibling = target.parentElement.previousElementSibling;
            if (previousSibling) {
                previousSibling.classList.add("is-edit-mode");
            }
        }, 100);
    }
});

require([ "assets/scripts/libs/DomObserver" ], function(DomObserver) {
    var CAROUSEL = {
        init: function() {
            if (window.innerWidth <= 1024) {
                return;
            }
            var carousel = document.querySelectorAll("[data-carousel]");
            DomObserver.ready("[data-carousel]", function(element) {
                CAROUSEL.carouselSetup(element);
                CAROUSEL.carouselArrows(element);
                CAROUSEL.carouselThumbnails(element);
            });
        },
        carouselSetup: function(carousel) {
            var carouselArrow = carousel.querySelectorAll("[data-carousel-arrow]");
            var carouselMove = carousel.querySelector("[data-carousel-movement]");
            var carouselMoving = false;
            var carouselOffset = isNaN(carousel.getAttribute("data-carousel")) ? 3 : carousel.getAttribute("data-carousel") - 1;
            var objectWidth = 0;
            var objectOffset = 16;
            var count = 0;
            var countTotal = 0;
            if (carousel.getAttribute("data-carousel") == "1") {
                objectOffset = 0;
            }
            for (var i = 0; i < carouselArrow.length; i++) {
                carouselArrow[i].addEventListener("click", function(a) {
                    var carouselDirection = this.getAttribute("data-carousel-arrow");
                    var carouselList = carousel.querySelectorAll("[data-carousel-object]").length;
                    var carouselObject = carousel.querySelectorAll("[data-carousel-object]");
                    objectWidth = carouselObject[0].getBoundingClientRect().width + objectOffset;
                    countTotal = carouselList - (1 + carouselOffset);
                    if (carousel.querySelector("[data-carousel-movement]")) {
                        var carouselMoveInt = parseInt(carouselMove.getAttribute("data-carousel-movement"));
                        if (carouselMoveInt > 0) {
                            carouselMoving = true;
                            objectWidth = objectWidth * parseInt(carouselMoveInt);
                            countTotal = Math.ceil(countTotal / parseInt(carouselMoveInt));
                        }
                    }
                    if (carouselArrow.length > 0) {
                        if (count === 0) {
                            carouselArrow[0].classList.add("end");
                        }
                        if (count === carouselList - (carouselOffset + 1)) {
                            carouselArrow[1].classList.add("end");
                        }
                    }
                    if (carouselDirection == "prev" && count > 0) {
                        count--;
                    } else if (carouselDirection == "next" && count < countTotal) {
                        count++;
                    } else if (carouselDirection == "next" && count == countTotal) {
                        count = 0;
                    } else {}
                    carouselMove.style.transform = "translate3d(-" + count * objectWidth + "px" + ", 0, 0)";
                    if (count != 0) {
                        carouselArrow[0].classList.remove("end");
                    } else {
                        carouselArrow[0].classList.add("end");
                    }
                    if (count == countTotal) {
                        carouselArrow[1].classList.add("end");
                    } else {
                        carouselArrow[1].classList.remove("end");
                    }
                });
            }
        },
        carouselArrows: function(carousel) {
            var carouselWidth = carousel.getAttribute("data-carousel");
            var carouselObjectCount = carousel.querySelectorAll("[data-carousel-object]").length;
            var carouselArrow = carousel.querySelectorAll("[data-carousel-arrow]");
            if (carouselArrow.length > 0) {
                carouselArrow[0].classList.add("end");
            }
        },
        carouselThumbnails: function(carousel) {
            var carouselMove = carousel.querySelector("[data-carousel-movement]");
            var carouselObject = carousel.querySelectorAll("[data-carousel-object]");
            var carouselTrigger = carousel.querySelectorAll("[data-carousel-trigger]");
            var objectWidth = 0;
            var count = 0;
            if (carouselObject.length > 0) {
                objectWidth = carouselObject[0].offsetWidth;
            }
            if (carouselTrigger.length) {
                for (var i = 0; i < carouselTrigger.length; i++) {
                    carouselTrigger[i].setAttribute("data-carousel-trigger", i);
                    carouselTrigger[i].addEventListener("click", function(e) {
                        e.preventDefault();
                        var carouselThumbnail = this.getAttribute("data-carousel-trigger");
                        carouselMove.style.transform = "translate3d(-" + carouselThumbnail * objectWidth + "px" + ", 0, 0)";
                    });
                }
            }
        }
    };
    CAROUSEL.init();
    return CAROUSEL;
});

require([ "assets/scripts/libs/DomObserver" ], function(DomObserver) {
    DomObserver.ready("[data-hm-character-count-container]", function() {
        var numberOfCharacters = this.querySelector("[data-hm-character-count-element]").getAttribute("maxlength") || 200;
        var countElement = this.querySelector("[data-hm-character-count-element]");
        var counter = this.querySelector("[data-hm-character-count]");
        counter.innerText = numberOfCharacters + " characters left";
        var keyUpTimer = null;
        countElement.addEventListener("keyup", function() {
            var self = this;
            if (keyUpTimer != null) clearTimeout(keyUpTimer);
            keyUpTimer = setTimeout(function() {
                var charactersLeft = numberOfCharacters - self.value.length;
                counter.innerText = charactersLeft + " characters left";
                if (charactersLeft <= 20) {
                    counter.setAttribute("aria-live", "assertive");
                    counter.setAttribute("aria-atomic", "true");
                } else if (charactersLeft <= 60) {
                    counter.setAttribute("aria-live", "polite");
                    counter.setAttribute("aria-atomic", "false");
                } else if (charactersLeft <= 70) {
                    counter.setAttribute("aria-live", "polite");
                    counter.setAttribute("aria-atomic", "true");
                } else {
                    counter.removeAttribute("aria-live");
                    counter.removeAttribute("aria-atomic");
                }
            }, 50);
        });
    });
});

require([ "assets/scripts/libs/DomObserver" ], function(DomObserver) {
    var COUNTDOWN = {
        init: function() {
            DomObserver.ready("[data-countdown-time]", function(element) {
                COUNTDOWN.setup(element);
            });
        },
        setup: function(element) {
            var date = new Date(element.getAttribute("data-countdown-time"));
            var d = element.querySelector("[data-countdown-day]");
            var h = element.querySelector("[data-countdown-hour]");
            var m = element.querySelector("[data-countdown-minute]");
            var s = element.querySelector("[data-countdown-second]");
            var srt = element.querySelector("[data-countdown-srt]");
            date.setHours(date.getHours() - 5);
            srt.innerHTML = date;
            if (element.getAttribute("data-theme").includes("abbreviate")) {
                COUNTDOWN.abbreviate(element);
            }
            var countdown = setInterval(function() {
                var now = new Date();
                var des = date.getTime() - now.getTime();
                var days = Math.floor(des / (1e3 * 60 * 60 * 24));
                var hours = Math.floor(des % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60));
                var mins = Math.floor(des % (1e3 * 60 * 60) / (1e3 * 60));
                var secs = Math.floor(des % (1e3 * 60) / 1e3);
                d.innerHTML = getTrueNumber(days);
                h.innerHTML = getTrueNumber(hours);
                m.innerHTML = getTrueNumber(mins);
                s.innerHTML = getTrueNumber(secs);
                if (countdown <= 0) clearInterval(countdown);
            }, 1e3);
            var getTrueNumber = function getTrueNumber(x) {
                return x < 10 ? "0" + x : x;
            };
            setTimeout(function() {
                element.classList.add("loaded");
            }, 1e3);
        },
        abbreviate: function(parent) {
            var day = parent.querySelector(".countdown-day .countdown-editorial");
            var hrs = parent.querySelector(".countdown-hour .countdown-editorial");
            var min = parent.querySelector(".countdown-minute .countdown-editorial");
            var sec = parent.querySelector(".countdown-second .countdown-editorial");
            day.innerHTML = "Day";
            hrs.innerHTML = "Hrs";
            min.innerHTML = "Min";
            sec.innerHTML = "Sec";
        }
    };
    COUNTDOWN.init();
    return COUNTDOWN;
});

var siteHeader = document.querySelector(".site-header");

if (siteHeader) {
    (function() {
        var _ = function(input, o) {
            var me = this;
            this.isOpened = false;
            this.input = $(input);
            this.input.setAttribute("autocomplete", "off");
            this.input.setAttribute("aria-autocomplete", "list");
            o = o || {};
            configure(this, {
                minChars: 2,
                maxItems: 10,
                autoFirst: false,
                data: _.DATA,
                filter: _.FILTER_CONTAINS,
                sort: false,
                item: _.ITEM,
                replace: _.REPLACE
            }, o);
            this.index = -1;
            this.container = $.create("div", {
                className: "awesomplete",
                around: input
            });
            this.ul = $.create("ul", {
                className: "search-auto-suggest-container",
                hidden: "hidden",
                inside: this.container
            });
            this.status = $.create("span", {
                className: "screen-reader-text",
                role: "status",
                "aria-live": "assertive",
                "aria-relevant": "additions",
                inside: this.container
            });
            this._events = {
                input: {
                    input: this.evaluate.bind(this),
                    blur: this.close.bind(this, {
                        reason: "blur"
                    }),
                    keydown: function(evt) {
                        var c = evt.keyCode;
                        if (me.opened) {
                            if (c === 13 && me.selected) {
                                evt.preventDefault();
                                me.select();
                            } else if (c === 27) {
                                me.close({
                                    reason: "esc"
                                });
                            } else if (c === 38 || c === 40) {
                                evt.preventDefault();
                                me[c === 38 ? "previous" : "next"]();
                            }
                        }
                    }
                },
                form: {
                    submit: this.close.bind(this, {
                        reason: "submit"
                    })
                },
                ul: {
                    mousedown: function(evt) {
                        var li = evt.target;
                        if (li !== this) {
                            while (li && !/li/i.test(li.nodeName)) {
                                li = li.parentNode;
                            }
                            if (li && evt.button === 0) {
                                evt.preventDefault();
                                me.select(li, evt.target);
                            }
                        }
                    }
                }
            };
            $.bind(this.input, this._events.input);
            $.bind(this.input.form, this._events.form);
            $.bind(this.ul, this._events.ul);
            if (this.input.hasAttribute("list")) {
                this.list = "#" + this.input.getAttribute("list");
                this.input.removeAttribute("list");
            } else {
                this.list = this.input.getAttribute("data-list") || o.list || [];
            }
            _.all.push(this);
        };
        _.prototype = {
            set list(list) {
                if (Array.isArray(list)) {
                    this._list = list;
                } else if (typeof list === "string" && list.indexOf(",") > -1) {
                    this._list = list.split(/\s*,\s*/);
                } else {
                    list = $(list);
                    if (list && list.children) {
                        var items = [];
                        slice.apply(list.children).forEach(function(el) {
                            if (!el.disabled) {
                                var text = el.textContent.trim();
                                var value = el.value || text;
                                var label = el.label || text;
                                if (value !== "") {
                                    items.push({
                                        label: label,
                                        value: value
                                    });
                                }
                            }
                        });
                        this._list = items;
                    }
                }
                if (document.activeElement === this.input) {
                    this.evaluate();
                }
            },
            get selected() {
                return this.index > -1;
            },
            get opened() {
                return this.isOpened;
            },
            close: function(o) {
                if (!this.opened) {
                    return;
                }
                this.ul.setAttribute("hidden", "");
                this.isOpened = false;
                this.index = -1;
                $.fire(this.input, "awesomplete-close", o || {});
            },
            open: function() {
                this.ul.removeAttribute("hidden");
                this.isOpened = true;
                if (this.autoFirst && this.index === -1) {
                    this.goto(0);
                }
                $.fire(this.input, "awesomplete-open");
            },
            destroy: function() {
                $.unbind(this.input, this._events.input);
                $.unbind(this.input.form, this._events.form);
                var parentNode = this.container.parentNode;
                parentNode.insertBefore(this.input, this.container);
                parentNode.removeChild(this.container);
                this.input.removeAttribute("autocomplete");
                this.input.removeAttribute("aria-autocomplete");
                var indexOfAwesomplete = _.all.indexOf(this);
                if (indexOfAwesomplete !== -1) {
                    _.all.splice(indexOfAwesomplete, 1);
                }
            },
            next: function() {
                var count = this.ul.children.length;
                this.goto(this.index < count - 1 ? this.index + 1 : count ? 0 : -1);
            },
            previous: function() {
                var count = this.ul.children.length;
                var pos = this.index - 1;
                this.goto(this.selected && pos !== -1 ? pos : count - 1);
            },
            goto: function(i) {
                var lis = this.ul.children;
                if (this.selected) {
                    lis[this.index].setAttribute("aria-selected", "false");
                }
                this.index = i;
                if (i > -1 && lis.length > 0) {
                    lis[i].setAttribute("aria-selected", "true");
                    this.status.textContent = lis[i].textContent;
                    this.ul.scrollTop = lis[i].offsetTop - this.ul.clientHeight + lis[i].clientHeight;
                    $.fire(this.input, "awesomplete-highlight", {
                        text: this.suggestions[this.index]
                    });
                }
            },
            select: function(selected, origin) {
                if (selected) {
                    this.index = $.siblingIndex(selected);
                } else {
                    selected = this.ul.children[this.index];
                }
                if (selected) {
                    var suggestion = this.suggestions[this.index];
                    var allowed = $.fire(this.input, "awesomplete-select", {
                        text: suggestion,
                        origin: origin || selected
                    });
                    if (allowed) {
                        this.replace(suggestion);
                        this.close({
                            reason: "select"
                        });
                        $.fire(this.input, "awesomplete-selectcomplete", {
                            text: suggestion
                        });
                    }
                }
            },
            evaluate: function() {
                var me = this;
                var value = this.input.value;
                if (value.length >= this.minChars && this._list.length > 0) {
                    this.index = -1;
                    this.ul.innerHTML = "";
                    this.suggestions = this._list.map(function(item) {
                        return new Suggestion(me.data(item, value));
                    }).filter(function(item) {
                        return me.filter(item, value);
                    });
                    if (this.sort !== false) {
                        this.suggestions = this.suggestions.sort(this.sort);
                    }
                    this.suggestions = this.suggestions.slice(0, this.maxItems);
                    this.suggestions.forEach(function(text) {
                        me.ul.appendChild(me.item(text, value));
                    });
                    if (this.ul.children.length === 0) {
                        this.close({
                            reason: "nomatches"
                        });
                    } else {
                        this.open();
                    }
                } else {
                    this.close({
                        reason: "nomatches"
                    });
                }
            }
        };
        _.all = [];
        _.FILTER_CONTAINS = function(text, input) {
            return RegExp($.regExpEscape(input.trim()), "i").test(text);
        };
        _.FILTER_STARTSWITH = function(text, input) {
            return RegExp("^" + $.regExpEscape(input.trim()), "i").test(text);
        };
        _.SORT_BYLENGTH = function(a, b) {
            if (a.length !== b.length) {
                return a.length - b.length;
            }
            return a < b ? -1 : 1;
        };
        _.ITEM = function(text, input) {
            var html = input.trim() === "" ? text : text.replace(RegExp($.regExpEscape(input.trim()), "gi"), "<mark>$&</mark>");
            return $.create("li", {
                className: "auto-suggest-item",
                innerHTML: html,
                "aria-selected": "false"
            });
        };
        _.REPLACE = function(text) {
            this.input.value = text.value;
        };
        _.DATA = function(item) {
            return item;
        };
        function Suggestion(data) {
            var o = Array.isArray(data) ? {
                label: data[0],
                value: data[1]
            } : typeof data === "object" && "label" in data && "value" in data ? data : {
                label: data,
                value: data
            };
            this.label = o.label || o.value;
            this.value = o.value;
        }
        Object.defineProperty(Suggestion.prototype = Object.create(String.prototype), "length", {
            get: function() {
                return this.label.length;
            }
        });
        Suggestion.prototype.toString = Suggestion.prototype.valueOf = function() {
            return "" + this.label;
        };
        function configure(instance, properties, o) {
            for (var i in properties) {
                var initial = properties[i], attrValue = instance.input.getAttribute("data-" + i.toLowerCase());
                if (typeof initial === "number") {
                    instance[i] = parseInt(attrValue);
                } else if (initial === false) {
                    instance[i] = attrValue !== null;
                } else if (initial instanceof Function) {
                    instance[i] = null;
                } else {
                    instance[i] = attrValue;
                }
                if (!instance[i] && instance[i] !== 0) {
                    instance[i] = i in o ? o[i] : initial;
                }
            }
        }
        var slice = Array.prototype.slice;
        function $(expr, con) {
            return typeof expr === "string" ? (con || document).querySelector(expr) : expr || null;
        }
        function $$(expr, con) {
            return slice.call((con || document).querySelectorAll(expr));
        }
        $.create = function(tag, o) {
            var element = document.createElement(tag);
            for (var i in o) {
                var val = o[i];
                if (i === "inside") {
                    $(val).appendChild(element);
                } else if (i === "around") {
                    var ref = $(val);
                    ref.parentNode.insertBefore(element, ref);
                    element.appendChild(ref);
                } else if (i in element) {
                    element[i] = val;
                } else {
                    element.setAttribute(i, val);
                }
            }
            return element;
        };
        $.bind = function(element, o) {
            if (element) {
                for (var event in o) {
                    var callback = o[event];
                    event.split(/\s+/).forEach(function(event) {
                        element.addEventListener(event, callback);
                    });
                }
            }
        };
        $.unbind = function(element, o) {
            if (element) {
                for (var event in o) {
                    var callback = o[event];
                    event.split(/\s+/).forEach(function(event) {
                        element.removeEventListener(event, callback);
                    });
                }
            }
        };
        $.fire = function(target, type, properties) {
            var evt = document.createEvent("HTMLEvents");
            evt.initEvent(type, true, true);
            for (var j in properties) {
                evt[j] = properties[j];
            }
            return target.dispatchEvent(evt);
        };
        $.regExpEscape = function(s) {
            return s.replace(/[-\\^$*+?.()|[\]{}]/g, "\\$&");
        };
        $.siblingIndex = function(el) {
            for (var i = 0; el = el.previousElementSibling; i++) ;
            return i;
        };
        function init() {
            $$("input.awesomplete").forEach(function(input) {
                new _(input);
            });
        }
        if (typeof Document !== "undefined") {
            if (document.readyState !== "loading") {
                init();
            } else {
                document.addEventListener("DOMContentLoaded", init);
            }
        }
        _.$ = $;
        _.$$ = $$;
        if (typeof self !== "undefined") {
            self.Awesomplete = _;
        }
        if (typeof module === "object" && module.exports) {
            module.exports = _;
        }
        return _;
    })();
}

function lazyLoad(image) {
    if (!image.classList.contains("loaded")) {
        var placeholderOld = image.getAttribute("src");
        var placeholderNew = image.getAttribute("data-lazy-src");
        image.classList.add("loaded");
        image.setAttribute("src", placeholderNew);
    }
}

document.addEventListener("DOMContentLoaded", function() {
    var placeholderImg = document.querySelectorAll("[data-lazy-src]");
    if (placeholderImg.length > 0) {
        for (var i = 0; i < placeholderImg.length; i++) {
            lazyLoad(placeholderImg[i]);
        }
    }
});

document.addEventListener("DOMContentLoaded", function() {
    var mediaLightbox = {
        init: function() {
            var lightbox = document.querySelectorAll("[data-media-lightbox]");
            for (var i = 0; i < lightbox.length; i++) {
                mediaLightbox.setHandlers(lightbox[i]);
            }
        },
        setHandlers: function(lightbox) {
            var lightboxModal = document.querySelector("[data-media-lightbox-modal]");
            var lightboxClose = lightboxModal.querySelector("[data-media-lightbox-close]");
            var lightboxIFRAME = lightboxModal.querySelector("iframe");
            var lightboxSRC = lightbox.querySelector("[data-src-url]").getAttribute("data-src-url");
            var lightboxOverlay = document.querySelector("[data-media-lightbox-overlay]");
            var lightboxButton = document.querySelector("[data-media-lightbox-button]");
            var currentModal = null;
            lightboxModal.setAttribute("role", "alert");
            lightboxModal.setAttribute("aria-hidden", "true");
            lightbox.addEventListener("click", function(o) {
                o.preventDefault();
                currentModal = this;
                lightboxModal.setAttribute("data-media-lightbox-modal", "active");
                lightboxModal.setAttribute("aria-hidden", "false");
                lightboxClose.focus();
                lightboxIFRAME.setAttribute("src", lightboxSRC + "?autoplay=1");
                lightboxClose.addEventListener("click", function(c) {
                    c.preventDefault();
                    lightboxModal.setAttribute("data-media-lightbox-modal", "");
                    lightboxModal.setAttribute("aria-hidden", "true");
                    lightbox.focus();
                    lightboxIFRAME.setAttribute("src", "null");
                });
                document.addEventListener("keyup", function(e) {
                    if (e.keyCode == 27) {
                        lightboxClose.click();
                    }
                });
            });
            lightboxOverlay.addEventListener("click", function() {
                lightboxClose.click();
            });
        }
    };
    mediaLightbox.init();
});

document.addEventListener("DOMContentLoaded", function() {
    var BRIGHTCOVE = {
        init: function() {
            var container = document.querySelector("[data-theme]");
            if (!container) {
                return;
            }
            var video = container.querySelectorAll("[data-video-id]");
            var playlist = document.querySelectorAll("[data-playlist-id]");
            if (!video || !playlist) {
                return;
            }
            BRIGHTCOVE.findVideo(container);
            BRIGHTCOVE.findPlaylist();
            BRIGHTCOVE.videoModal();
        },
        findVideo: function(container) {
            var videoContainers = document.querySelectorAll("[data-video-id]");
            for (var i = 0, x = videoContainers.length; i < x; i++) {
                var currentID = videoContainers[i].getAttribute("data-video-id");
                if (!videoContainers[i].classList.contains("loaded")) {
                    BRIGHTCOVE.singleVideo(currentID, videoContainers[i], container);
                    videoContainers[i].classList.add("loaded");
                }
            }
        },
        findPlaylist: function() {
            var playlistContainers = document.querySelectorAll("[data-playlist-id]");
            for (var i = 0, x = playlistContainers.length; i < x; i++) {
                var currentID = playlistContainers[i].getAttribute("data-playlist-id");
                BRIGHTCOVE.singlePlaylist(currentID, playlistContainers[i]);
            }
        },
        singleVideo: function(video_id, currentElement, container) {
            var req = new XMLHttpRequest();
            var url = "https://edge.api.brightcove.com/playback/v1/accounts/849720474001/videos/" + video_id;
            req.overrideMimeType("application/json");
            req.open("GET", url, true);
            req.setRequestHeader("accept", "application/json;pk=BCpkADawqM3A-SfKehUQbgwIx1WpW1zJpaADGxF-iad3RUvQ0Ii7zD3_tL8EEZ9gk-DrjMxKo-t9rE0zoTaInioWQ9cDhvjwQflWKH21mXb3LlibFHKQG3HNxA4");
            req.onload = function() {
                var jsonResponse = JSON.parse(req.responseText);
                BRIGHTCOVE.createVideo(jsonResponse, currentElement, container);
            };
            req.send(null);
        },
        singlePlaylist: function(playlist_id, currentElement) {
            var req = new XMLHttpRequest();
            var url = "https://edge.api.brightcove.com/playback/v1/accounts/849720474001/playlists/" + playlist_id;
            req.overrideMimeType("application/json");
            req.open("GET", url, true);
            req.setRequestHeader("accept", "application/json;pk=BCpkADawqM3A-SfKehUQbgwIx1WpW1zJpaADGxF-iad3RUvQ0Ii7zD3_tL8EEZ9gk-DrjMxKo-t9rE0zoTaInioWQ9cDhvjwQflWKH21mXb3LlibFHKQG3HNxA4");
            req.onload = function() {
                var jsonResponse = JSON.parse(req.responseText);
                BRIGHTCOVE.createPlaylist(jsonResponse.videos, currentElement);
            };
            req.send(null);
        },
        createVideo: function(data, currentElement, container) {
            var autoPlay = false;
            var gridLayout = container.getAttribute("data-layout");
            var hasCaption = data.text_tracks;
            var videoSmall = false;
            var videoMedium = false;
            var videoLarge = false;
            switch (gridLayout) {
              case "grid-1":
              case "grid-2":
              case "1x2":
                videoLarge = true;
                break;

              case "grid-3":
              case "1x1":
              case "1x4":
                videoMedium = true;
                break;

              case "grid-4":
              case "grid-5":
              case "grid-6":
                videoSmall = true;
                break;

              default:
                videoSmall = true;
                break;
            }
            if (data.sources[11] && window.innerWidth <= 420 || data.sources[11] && videoSmall == true) {
                currentElement.setAttribute("src", data.sources[11].src);
            } else if (data.sources[9] && window.innerWidth <= 720 || data.sources[9] && videoMedium == true) {
                currentElement.setAttribute("src", data.sources[9].src);
            } else {
                currentElement.setAttribute("src", data.sources[7].src);
            }
            if (currentElement.getAttribute("autoplay") == "true" || currentElement.hasAttribute("autoplay")) {
                currentElement.play().then(function() {}).catch(function(error) {});
            } else if (hasCaption != "" && hasCaption != undefined) {
                var closedCaption = document.createElement("track");
                closedCaption.setAttribute("kind", data.text_tracks[0].kind);
                closedCaption.setAttribute("label", data.text_tracks[0].label);
                closedCaption.setAttribute("srclang", data.text_tracks[0].srclang);
                closedCaption.setAttribute("src", data.text_tracks[0].sources[1].src);
                closedCaption.setAttribute("default", "");
                currentElement.appendChild(closedCaption);
                currentElement.setAttribute("controls", "true");
                currentElement.setAttribute("preload", "none");
                autoPlay = true;
            } else {
                currentElement.removeAttribute("autoplay");
                currentElement.setAttribute("controls", "true");
            }
            currentElement.setAttribute("crossorigin", "");
            if (data.poster) {
                currentElement.setAttribute("poster", data.poster);
            }
            BRIGHTCOVE.videoLoad(currentElement, autoPlay);
        },
        createPlaylist: function(items, currentElement) {
            var playList = document.createElement("ul");
            var tempfragment = document.createDocumentFragment();
            playList.className = "playlist";
            items.map(function(item) {
                var playListItem = document.createElement("li");
                var playListItemSource = BRIGHTCOVE.videoSource(item.sources, "codec", "H264");
                playListItem.addEventListener("click", function() {
                    BRIGHTCOVE.assignState(this);
                });
                playListItem.className = "playlist-item";
                playListItem.setAttribute("data-src", playListItemSource.src);
                var playListAction = document.createElement("a");
                playListAction.className = "playlist-item-link";
                playListAction.setAttribute("href", "#");
                playListAction.addEventListener("click", function(e) {
                    e.preventDefault();
                });
                var playListVideo = currentElement.parentNode.parentNode.childNodes[0].nextSibling.childNodes[0].nextSibling;
                var firstVideoPoster = items[0].poster_sources[0].src;
                var firstVideoSrc = BRIGHTCOVE.videoSource(items[0].sources, "codec", "H264").src;
                playListVideo.setAttribute("poster", firstVideoPoster);
                playListVideo.setAttribute("src", firstVideoSrc);
                var playListItemPoster = document.createElement("div");
                playListItemPoster.className = "playlist-item-poster";
                var playListItemPosterImage = document.createElement("img");
                playListItemPosterImage.setAttribute("src", item.poster);
                var playListItemDescription = document.createElement("div");
                playListItemDescription.className = "playlist-item-desc";
                var playListItemTiming = document.createElement("span");
                playListItemTiming.className = "playlist-item-timing";
                playListItemTiming.textContent = BRIGHTCOVE.videoTime(item.duration);
                var playListItemTitle = document.createElement("h2");
                playListItemTitle.className = "playlist-item-title";
                playListItemTitle.textContent = item.name;
                playListItemPoster.appendChild(playListItemPosterImage);
                playListItemPoster.appendChild(playListItemTiming);
                playListItemDescription.appendChild(playListItemTitle);
                playListAction.appendChild(playListItemPoster);
                playListAction.appendChild(playListItemDescription);
                playListItem.appendChild(playListAction);
                tempfragment.appendChild(playListItem);
            });
            playList.appendChild(tempfragment);
            currentElement.appendChild(playList);
        },
        assignState: function(ele) {
            var theList = ele.parentNode.querySelectorAll("li");
            var videoSrc = ele.getAttribute("data-src");
            for (var i = 0; i < theList.length; i++) {
                theList[i].setAttribute("data-state", "");
            }
            ele.setAttribute("data-state", "is-playing");
            var theVideo = document.querySelector("[data-video]");
            theVideo.querySelector("video").setAttribute("src", videoSrc);
            theVideo.querySelector("video").play();
        },
        videoSource: function(array, key, value) {
            for (var i = 0; i < array.length; i++) {
                if (array[i][key] === value) {
                    return array[i];
                }
            }
            return null;
        },
        videoTime: function(millis) {
            var minutes = Math.floor(millis / 6e4);
            var seconds = (millis % 6e4 / 1e3).toFixed(0);
            return minutes + ":" + (seconds < 10 ? "0" : "") + seconds;
        },
        videoLoad: function(ele, auto) {
            ele.onloadeddata = function() {
                if (auto == true) {
                    ele.play();
                }
                setTimeout(function() {
                    ele.classList.add("loaded");
                }, 300);
            };
        },
        videoModal: function() {
            var modal = document.querySelector('[data-theme="video"]');
            if (!modal) {
                return;
            }
            var modalVideo = modal.querySelector("[data-video-id]");
            var modalClose = document.querySelectorAll("[data-micromodal-close]");
            for (var i = 0; i < modalClose.length; i++) {
                modalClose[i].addEventListener("click", function() {
                    modalVideo.pause();
                });
            }
        }
    };
    BRIGHTCOVE.init();
});