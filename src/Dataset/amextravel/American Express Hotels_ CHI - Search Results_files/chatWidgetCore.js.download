/**
 * This file define a class-like structure for Embedded Window on iFrame.
 * Please dont change these unless you absolutely know what you are doing.
 **/
/* Define NameSpace for Chat Widget Implementation */
window.lpCWTag = window.lpCWTag || {};
window.lpCWTagConst = window.lpCWTagConst || {};
var lpMTagConfig = lpMTagConfig || {};
lpMTagConfig.vars = lpMTagConfig.vars || [];
var insideChatCreation = false;
var omnEWfired = false;
var HOME_PAGE_SERVER_URL = null;
var copychatInstanceParam=null;
var currentTranscript="";
var ninaCurrentTranscript="";
var starttimeLPOverride;
var convEndTime = null;
var lppreChatAnswer="";
var addLineOnnavigation=false;
var chatWinCloseable = true;
var sidvidOverride ="";
var mycaAssistData="";
var jwtValue ="";
var firsttimelogincm;
var cTypeOverride="";
var visitorIdForLE="";
var sessionId="";
var interactionContextId="";
var lpupdate="";
var logger;
var lpInteractiveChat = false; //indicate if there is an interactive msg from a visitor
var vaInteractiveChat = false; //indicate if there is an interactive msg from a visitor
var lastIntentName ="";
var cid="";
var eid="";
var messageCount = 0;
var minimizedMessageCount = 0;
var lpChatWinMinimized = false;
var startEscalationTime;
var widgetOpenStatus=false;
var cob_widgetOpenStatus=false;
var monthhist = -1;
var datehist = -1;
var historytrailcount=1;
var noofconversations;
var noofconversationsprocessed=0;
var showMessageSectionTO;
var historyLoaded=false;
var isofferSlide="";
var RCWidgetStepNo =0;
var RCWidgetStepSize=0;
var expansionFlag="";
var deviceFamilyName = "DESKTOP";
var isconsolidated=false;
var totalmsgs=0;
var totalmsgsprocessed=0;
var inhistoryrecords =false;
var viewMoreHistoryFlag = false;
var chatHistoryDiv = "";
var bbCookieOverride = "";
var leAgentEmpId = "";
var leAgentEmpName = "";
var globalrld=false;
var currTime = new Date();
var chatIdleTime;
var lastIntendId = '';
var starRating = 0,sliderValue=0, yesNoValue = '';
var starRatingVals = ['','Poor','Fair','Good','Very Good','Excellent'];
var MCQClicked =false;
var cobrowseAcceptedOvr = "";
var chatPriority = "";
var fromToggleBlock = false;
var botresponsegreaterthan2 = false;
var submittedVASurvey = false;
var deviceHeight;
var deviceBucket = "";
var deviceOrientationHeight;

var isIPhone = navigator.userAgent.match(/(iPhone)/g);
var isAndroid = navigator.userAgent.match(/(Android)/g);
var isIOSChrome = window.navigator.userAgent.match(/(CriOS)/g);
var prevOrientation = getWindowOrientation();
var isPortScrollPosBottom = true; // Is portrait scroll position of message section bottom
// var isInputTextFieldActive = false;
var keepSoftKeys = false; // to keep the soft keyboard open only when message is originated from typing bar in small devices
$.xhrPool = [];
$.xhrPool.abortAll = function() {
    $(this).each(function(idx, jqXHR) {
        jqXHR.abort();
    });
    $.xhrPool.splice(0, this.length); 
};
var sqMap;
var scType;
var devNavigator = window.navigator.userAgent.toLowerCase();
var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
];

function getWindowOrientation(){
    if(window.orientation){
        return (Math.abs(window.orientation) === 90) ? 'landscape' : 'portrait';
    }
    else {
        var orientation = (screen.orientation || {}).type;
        return (orientation === "landscape-primary" || orientation === "landscape-secondary") ? 'landscape' : 'portrait';
    }
}
/**
 * LPChatWidget is the driver of the embedded window. This component is responsible for connecting to LP platform using different set of LP APIs.
 * Most business logic is implemented in this class. Therefore, a deep understand is required before modifying anything in this class.
 *
 * Usage:
 * 		cw = new lpCWTagUI.LPChatWidget();
 * 		cw.reEstChatConnection()
 * Output:
 *		embedded window will establish an exist connection/session
 *
 * @version: 0.9
 */
lpCWTag.LPChatWidget = lpCWTag.LPChatWidget || function LPChatWidget(window) {
    var myChatWiz = this;
    var lpCWAssist = new lpCWTag.LPChatWidgetAssist(window);
    logger = new lpCWTag.LPChatWidgetLogger();
    var sessionMgr, notificationDialog;

    lpChatWinMinimized = false; //indicates window whether minimize or maximize
    var lpChatFlashingStarted = false; //indicates flashing started or not

    // indicator whether to show slide-out or not. Default is not show
    var isSlideOutShow = false;

    // the original height when not minimize
    var lpChatUnMinizeHeight = "430px";

    // the height when minimize
    var lpChatMinizeHeight = "90px";

    // the width of the ChatWizFrameContainer (this is on the parent
    // page) when the slide-out is hidden
    var lpChatWizFrameContainerOriginalWidth = "400px";

    // the width of the ChatiFrame (this is on the parent page)
    var lpChatiFrameOriginalWidth = "400px";

    //the width of the ChatWizFrameContainer (on the parent page) when the slid-out appears
    var slideOutOnWidthSize = "700px";

    var isAudioOn = true;
    var skill = "offline"; // chatSkill, SMC-english
    //var offlineSurveyNameOverride = ""; //display offline message by SurveyName - override feature
    //var preChatSurveyNameOverride = ""; //display prechat message by SurveyName - override feature
    //var exitSurveyNameOverride = ""; //display exit message by SurveyName - override feature
    var webserviceFailureOfflineSurveyNameOverride = ""; //use for this value to display in case Web Services failed
    var nonInteractiveChatSurveyNameOverride = ""; //use this value to display survey form for non-interactive chat
    var lpSUID = ""; //store uniqued ID for chat session

    var chatState, screenState = '',
        windowState = '';
    var tabIndex = 7;

    var surveyResult; // hold prechat survey results
    var visitorId; // hold visitorId
    var webserviceLoadComplete = true; //webservice load indicator
    var webserviceLoadResult = false; //webservice load result
    var chat, collaborationApi, chatInstanceReady = false,
        collaborationInstanceReady = false; // API instances

    var LP_CHAT_FONT_SIZE_MIN = 11;
    var LP_CHAT_FONT_SIZE_MAX = 15;
    var lpChatFontSize = 13;

    var lpChatWizButtonName = ""; //request ButtonName param
    var lpVisitorSessionId = ""; //request visitorSessionId param
    var webserviceTimer; //web service timer
    var webserviceEnable = true;
   // var chatWinCloseable = true;
    var lpSiteContainer = "";
    
    var lpVisitorTypingMsg = false;
    var lpNumErrorMessage = false;
    var lpChatStartWebStorageKey = "LP_NV_EW";
    var isFirstChat = true;
    var xiconclicked = false;
    var isPreChatEscalated = false;
    var isContinueClicked = false;
    var isMarvinLatestTranscript = false;
    var fromreloadMarvin = false;
	var escalateInvalidcId=false;
	var errlpChatWizButtonName="";
	var errlpCustVar="";
	
	var scrollStatus = true;
    //var lpsessionstorageval=""; //added here for session
    //available data types for pre chat and post chat. these are used to decide what validation type needs to by applied 
    var dataTypes = {
        CHECKBOX: 'Checkbox',
        RADIO: 'Radio Button',
        RADIO_SIDE: 'Radio Button (side by side)',
        TEXT: 'Text Field',
        TEXT_AREA: 'Text Area',
        NUMERIC: 'Numeric Field',
        DROPDOWN: 'Dropdown Box'
    }

    var screenStateType = {
        NONE: '',
        LOADING: 'LOADING',
        PRECHATSURVEY: 'PRECHAT_SURVEY',
        CHATTING: 'CHATTING',
        EXITSURVEY: 'EXIT_SURVEY'
    }
    var windowStateType = {
        READY: 'READY',
        DESTRUCTION: 'DESTRUCTION'
    }
	windowState =windowStateType.READY;

    /*****************DEFINE THE HTML IDs **************************/
    var lpChatID_lpChatiFrame = "lpChatiFrame"; // this is the iFrame id
    var lpChatID_lpChatWizContainer = "lpChatWizContainer"; //this is the  wrapper DIV on the parent  page

    var lpChatID_lpChatWizFrameContainer = "lpChatWizFrameContainer"; //this is the main chat DIV in the iFrame
    var lpChatID_lpChatBodySection = "lpChatBodySection"
    var lpChatID_lpChatAgentType = "lpChatAgentType"; //the chatAgentTyping element
    var lpChatID_lpChatMessagesSection = "lpChatMessagesSection"; //the ChatMessageSection div
    var lpChatID_lpChatCurrMessagesSection = "currentChat"; //US1137693
	var lpChatID_thanksref = "thanksref";
	var lpChatID_thanksrefcursor = "thanksrefcursor";
	var lpChatID_hamburgerimg = "hamburgerimg";
	var lpChatID_lpxicon = "lpxicon";
    var lpChatID_lpChatInputTextField = "lpChatInputTextField"; //the lpChatInputTextField textarea where vistor can type in
    var lpChatID_lpChatCloseChatBtn = "lpPreChatCloseBtn"; //close button in footer
    var lpChatID_lpChatMenuSection = "lpChatMenuSection"; //the chatmenu DIV
    var lpChatID_lpChatInputFieldSection = "lpChatInputFieldSection"; // the chat  input field DIV
    var lpChatID_lpChatMenuItemFontDecreaseBtn = "lpChatMenuItemFontDecreaseBtn";
    var lpChatID_lpChatMenuItemFontIncreaseBtn = "lpChatMenuItemFontIncreaseBtn";
    var lpChatID_lpChatSurveyQuestionNum = "lpSurveyTotalQuestNum"; //no of questions
    var lpChatID_lpChatSurveyId = "lpSurveyID"; // survey id
    var lpChatID_lpChatSurveyQuestionsContainer = "lpSurveyQuestionsContainer"; //survey questions container
    var lpChatID_lpChatMainMessageSection = "lpChatMainMessageSection";
    var lpChatClass_lpChatSystemMessageSection = ".lpSystemMessageDiv";
    var lpChatID_lpChatSlideOutContainer = "lpChatSlideOutContainer";
    var lpChatClass_lpChatSurveySectionText = ".lpChatSurveySectionText";
    var lpChatID_lpPreChatMessagesSection = "lpPreChatMessagesSection";
    var lpChatID_lpChatContent = "lpChatContent";
    var lpChatID_lpChatAudioButton = "lpChatMenuItemAudioBtn";
    var lpChatID_lpPreChatSurveyCloseBtn = "lpPreChatSurveyCloseBtn";
    var lpChatID_lpChatCloseWidgetButton = "lpCloseWidget";
    var lpChatID_lpPCIInputText = "lpSecurityQuesInput";
    var idlesessionVar;
    var onInitTimer;
    var onInitTimerflag = false;
    var isNinaChat = false;
    var ninabaseurl = '';
    var sciCode = '';
    var ninachatresponse = '';
    var nuanceFlowFlagOverrride = '';
    var typeAheadCurrentSelection = -1;
    var typeAheadResultCount = 0;
    var typeAheadintentUUIDVar = 0;
    var sendAddlineTriggerOverride = false;
    var transferringChat = false;
    var xcutobjOverride = "";
    // Added code for Marvin Chat history change
    var transcriptData = [];
    var ninaChatMessagesSection = "ninaChatMessageSection"; //the Nina ChatMessageSection div

    var marvinConversationId = "N";
    var lastResponseCode = '020';
    var callResume = false;
    var clickStartLiveChat = false;
    var disbleTextarea = false;
    var marvinResp = false;
	var timerEnable=false;
	var marvinlinkresponse=false;
	var parentpageurl='';
	var idleendchatsessionVar;
    var iScrollPos = 0;
    var iPhonePortraitScrollPos = 0; // current message section scroll postion in portrait mode
     var isFirstMarvincall=false;  
	 var isFirstMsgSent = false;
	 var isCommonTopicsFirstDisplayed = false;
	 var isRecordMsgExist = true;
	 var isSecondMarvincall=false; 
	 var vaMessages = new Object();
     var issueResolutionBtnValue = null;



    /***************** PRIVATE METHODS **************************/

    //use to reset all variable to default
    function resetAll() {
        logger.debug("Resetting all variables");
        isAudioOn = true;
        lpChatFontSize = 13;
        chatWinCloseable = true;
        lpInteractiveChat = false;
        vaInteractiveChat = false; 
		isSecondMarvincall=false;
    botresponsegreaterthan2 = false;
    isPreChatEscalated =false;
        lpVisitorTypingMsg = false;
        //offlineSurveyNameOverride = "";
        //preChatSurveyNameOverride = "";
        //exitSurveyNameOverride = "";
        screenState = '';
        windowState = windowStateType.READY;
        chatInstanceReady = false;
        collaborationInstanceReady = false;
        nuanceFlowFlagOverrride = '';
        sendAddlineTriggerOverride = false;
        xcutobjOverride = '';
        marvinResp = false;
		timerEnable=false;
		historyLoaded=false;
		isofferSlide="";
		RCWidgetStepNo =0;
		viewMoreHistoryFlag=false;
        starRating = 0;
        sliderValue = 0;
        yesNoValue = '';
        submittedVASurvey = false;
        latestConvID = '';
    }

    //delete API instances
    function deleteAPI_instance() {
        collaborationApi = null;
        chat = null;
        delete collaborationApi;
        delete chat;
    }

    function jqe(pElem) {
        return "#" + pElem;
    }

    function getTargetForParenChatFrame() {
        var qs = getQueryStrings();         
        var parentURL = qs["src"];
        return parentURL.indexOf('https') > -1 ? 'https://' + parentURL.substr(8).split('/')[0] : 'http://' +
            parentURL.substr(7).split('/')[0];
    }

    // remove leading/trailing spaces
    function getTrimmedValue(inputId, clearValue) {
        var elementVal = $.trim($(jqe(inputId)).val());
        if (clearValue)
            $(jqe(inputId)).val("");
        return elementVal;
    }

    // hide the ChatWizContainer (on the parent page)
    function hideChatWizContainer() {
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "HIDE_CONTAINER"
        });
    }

    function loadLPomn() {
        if (!omnEWfired) {
            //var url="https://qwww.aexp-static.com/api/axpi/omniture/s_code_global_context.js";
            //lpdownLoadomnJS(url);
            omn.hierarchy = "US|AMEX|Acq|AmexAssist|PCVideo";
            omn.pagename = "Welcome";
            omn.newpagename = "yes";
            omn.language = "en";
            omn.bu = "US:Acq";
            omn.rwd = "rwd";
            var s_code = s.t();
            if (s_code) document.write(s_code);
            omnEWfired = true;
        }
    }

    // show the ChatWizContainer (on the parent page)
    function showChatWizContainer(status) {
		var chatwindowstatus = "false"
        if(typeof status!= "undefined"){
          chatwindowstatus = "true";
        }
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "SHOW_CONTAINER",
			"chatwindowstatus":chatwindowstatus 
        });
    }

	/** Minimize the chat window on parent page */
	function minimizeChatWizContainer() {
		sendPostMessage({
			"lpEmbChatWiz": "LPNVPF",
			"CMD": "CONTROL",
			"value": "MINIMIZE_CONTAINER",
			"minimizeChatWindow": "true"
		});
	}

    function setlpchatActiveCookie(flag,pgreload) {
		sessionMgr.setlestate("chatting");
		setLestateCk("chatting");
		var msg;
		var count=0;
		var scount=0;
		var refCtr=0;
    var lcount=0;
		if(sessionMgr.getLenoChatState()!=""){
			msg = sessionMgr.getLenoChatState();
		}
		if(sessionMgr.getlenooffercount()!=""){
			count = sessionMgr.getlenooffercount();
		}
		if(sessionMgr.getlenoseccount()!=""){
			scount = sessionMgr.getlenoseccount();
		}
    if(sessionMgr.getlenolocoffercount()!=""){
			lcount = sessionMgr.getlenolocoffercount();
		}
		//console.log("leno chat state:"+msg);
		if(pgreload)
			refCtr=sessionMgr.getrefCtr();
		else
			refCtr=0;
		/*Send the updated LOC Count for reporting*/
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "SET_ACTIVECOOKIE",
			"MSGTIMER":flag,
			"LPSUID":lpSUID,
			"LNVALUE":msg,
			"LNOFFERCNT":count,
			"LNSECCNT":scount,
      "LNLOCOFFERCNT":lcount,
			"REFCTR":refCtr
        });
    }

    myChatWiz.setlechatActiveCookie = function(pgreload){
              sessionMgr.start();
              if(!timerEnable){
		         setlpchatActiveCookie(true,pgreload);
                            timerEnable=true;
		}else{
			 setlpchatActiveCookie(false,pgreload);
		}

    }
	function setmarvinchatActiveCookie(flag) {
		sessionMgr.setlestate("");
		setLestateCk("");
		var msg;
		var count=0;
		var scount=0;
		var refCtr=0;
    var lcount=0;
		if(sessionMgr.getLenoChatState()!=""){
			msg = sessionMgr.getLenoChatState();
		}
		if(sessionMgr.getlenooffercount()!=""){
			count = sessionMgr.getlenooffercount();
		}
		if(sessionMgr.getlenoseccount()!=""){
			scount = sessionMgr.getlenoseccount();
		}
    if(sessionMgr.getlenolocoffercount()!=""){
			lcount = sessionMgr.getlenolocoffercount();
		}
		refCtr=sessionMgr.getrefCtr();
    /*Send the updated LOC Count for reporting*/
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "SET_MARVINACTIVECOOKIE",
			"MSGTIMER":flag,
			"LPSUID":lpSUID,
			"LNVALUE":msg,
			"LNOFFERCNT":count,
			"LNSECCNT":scount,
      "LNLOCOFFERCNT":lcount,
			"REFCTR":refCtr
        });
    }
	

    

   

    // Get formatted time with AM/PM
    function getFormattedTime(dateTimeString) {
        var date = new Date(dateTimeString);
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12;
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var strTime = hours + ':' + minutes + ' ' + ampm;
        return strTime;
    }

    // create a chat line HTML for Info/Agent/Visitor
    function createLine(line,ishistory) {
        var newFormattedChatLine = "";
        //logger.debug("previousLineSource:"+previousLineSource+"line.source:"+line.source+"line.text:"+line.text);
        var lastSender;
        if (fromreloadMarvin)
            lastSender = $("#ninaChatMessageSection .messageSender").last().html();
        else
            lastSender = $(".messageSender:last").html();
        fromreloadMarvin = false;
        if (typeof lastSender != "undefined") {
            lastSender = lastSender.toLowerCase();
        } else {
            lastSender = "";
        }
        if (lastSender == (line.by).toLowerCase())
            displaySource = false;
        else
            displaySource = true;

        //displaySource=true;
          
        var d1 = new Date();
        if(ishistory)
	    d1 = new Date(line.time); 	 
	var t1 = d1.getTime();
	var d = new Date(t1);
	var autotime = formatAMPM(d)
	logger.debug("You - " + monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + autotime);
      //US1654868
      // var messageOwner =  monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + autotime;
         var messageOwner =  autotime;
        if (line.source == 'system') {
            var text = line.text;
            if (text.indexOf("You are now chatting with") > -1) {
                text = "<div style='padding:5px 0;font-weight:bold;'>" +
                    text + "</div>"
            }
            newFormattedChatLine = "<div class='lpChatInfoText'>" +
                text + "</div>";
        } else if (line.source == 'visitor') {
            newFormattedChatLine = lpCWAssist.lpChatMakeRightSideMessage("You", line.text, lpChatFontSize, displaySource,"You - "+messageOwner );
        } else if (line.source == 'agent') {
            newFormattedChatLine = lpCWAssist.lpChatMakeLeftSideMessage(line.by, line.text, lpChatFontSize, displaySource);
        } else if (line.source == 'nina') {
            newFormattedChatLine = lpCWAssist.lpNinaChatMakeLeftSideMessage(line.by, line.text, lpChatFontSize, displaySource,"Virtual Assistant - "+messageOwner);
        }else if (line.source == 'ninagreet') {
            newFormattedChatLine = lpCWAssist.lpNinaChatMakeLeftSideGMessage(line.by, line.text, lpChatFontSize, displaySource,"Virtual Assistant - "+messageOwner);
        }else if (line.source == 'proactive') {
            newFormattedChatLine = lpCWAssist.lpNinaChatMakeLeftSideProactiveMessage(line.by, line.text, lpChatFontSize, displaySource,"Virtual Assistant - "+messageOwner);
        }

        return newFormattedChatLine;
    }

    // add ChatLine to MessageSection DOM
    function addLineToDom(line, pPlaysound,msgFrom,isFirstMarvincall,nodate) {
		var pUrl = (window.location != window.parent.location) ? document.referrer : document.location.href;
		logger.debug('pUrl:'+pUrl);
		if(pUrl.indexOf("e1qglobal2.americanexpress.com")!=-1){sendAddlineTriggerOverride=true}
		
       // if (sendAddlineTriggerOverride) { commenting  for marvin time extension on reload or navigation
            sendPostMessage({
                "lpEmbChatWiz": "LPNVPF",
                "CMD": "UIDESIGN",
                "value": "ADDLINES"
            });
        //}
		/*--KA--*/
        /* if (isNinaChat) {
            clearTimeout(idlesessionVar);
            idlesessionVar = setTimeout(function() {
                lpChatCloseChatBtnClick();
            }, 600000);
        } */
		/*--KA--*/
		
       /* logger.debug('isAudioOn:' + sessionMgr.isAudioOn());
        logger.debug('getFontSize:' + sessionMgr.getFontSize());
        logger.debug('getSUID:' + sessionMgr.getSUID());
        logger.debug('getOfflineChatSurveyNameOverride:' + sessionMgr.getOfflineChatSurveyNameOverride());
        logger.debug('getPreChatSurveyNameOverride:' + sessionMgr.getPreChatSurveyNameOverride());
        logger.debug('getExitChatSurveyNameOverride:' + sessionMgr.getExitChatSurveyNameOverride());
        logger.debug('getVisitorSessionID:' + sessionMgr.getVisitorSessionID());
        logger.debug('getVisitorID:' + sessionMgr.getVisitorID());
        logger.debug('getChatSkill:' + sessionMgr.getChatSkill());
        logger.debug('isChatStarted:' + sessionMgr.isChatStarted());
        logger.debug('isActiveChatSession:' + sessionMgr.isActiveChatSession());*/
		currentTranscript=currentTranscript+line;
		if(isFirstMarvincall){
             var d1 = new Date();
             var t1 = d1.getTime();
		var d = new Date(t1);
		var autotime = formatAMPM(d)
		logger.debug("You - " + monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + autotime);
          //US1654868
	       //var messageOwner =  monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + autotime;
           var messageOwner =  "Today";
            if(nodate=="nodate"){}else{
              if($("#chathistory .conversationDate:last").html() !== messageOwner){
                    $(jqe(ninaChatMessagesSection)).append('<div class="conversationDateWrapper"><div class="conversationDate">' + messageOwner + '</div></div>'); 
              }      
            }             
        } 
        $(jqe(lpChatID_lpChatCurrMessagesSection)).append(line); //US1137693
      /*  $(".messageOwner").hide();
        $(".messageOwner").last().show(); */
       try{
       $(".messageOwner").addClass("addZeroSize");
	   if($(".messageOwner").last().attr("class").indexOf("greetm") ==-1 && $(".messageOwner").last().attr("class").indexOf("vamsg") ==-1){
       $(".messageOwner").last().removeClass("addZeroSize");
	   }
	   }catch(e){}


        //if (pPlaysound)
            playAudio(msgFrom);
    }

    // add ChatLine to NinaMessageSection DOM
    function addLineToNinaDom(line, pPlaysound) {
		ninaCurrentTranscript = ninaCurrentTranscript+line;
        $(jqe(ninaChatMessagesSection)).append(line);
      /*  $(".messageOwner").hide();
        $(".messageOwner").last().show(); */
      try{
      $(".messageOwner").addClass("addZeroSize");
       if($(".messageOwner").last().attr("class").indexOf("greetm") ==-1 && $(".messageOwner").last().attr("class").indexOf("vamsg") ==-1){
       $(".messageOwner").last().removeClass("addZeroSize");
	   }
	   }catch(e){}

    
       // if (pPlaysound)
            playAudio("Agent");
    }
    // scroll to bottom of the MessageSection DOM if scrolling existing
    function scrollToBottom(donotscroll) {
        logger.debug("scrollToBottom");
        if ($(jqe(lpChatID_lpChatMessagesSection)).length) {
			if(donotscroll){
				 $(jqe(lpChatID_lpChatMessagesSection))
                .animate({
                    scrollTop: $(jqe(lpChatID_lpChatMessagesSection))[0].scrollHeight
                }, 1);
			}else{
            $(jqe(lpChatID_lpChatMessagesSection))
                .animate({
                    scrollTop: $(jqe(lpChatID_lpChatMessagesSection))[0].scrollHeight
                }, 1000);
			}	
        } 

        if(isIPhone) { // DE307644: Inappropriate scroll position while turning to landscape mode_iPhones only
            isPortScrollPosBottom = true;
        }
    }

    function changeScrollStatus(){
		setTimeout(function(){scrollStatus = true;},500);
	}
	
    /**
     * Detecting if there is any matching credit card pattern
     */
    function ccMasking(strText) {
        var maskingChar = "****************";
        var ccPattern1 = /[0-9]{13,16}/;
        var ccPattern2 = /[0-9]{4}[\-\x20\.][0-9]{4}[\-\x20\.][0-9]{4}[\-\x20\.][0-9]{4}/;
        var ccPattern3 = /[0-9]{4}[\-\x20\.][0-9]{6}[\-\x20\.][0-9]{5}/;
        var ccPattern4 = /[0-9]{3}[\-\x20\.][0-9]{4}[\-\x20\.][0-9]{4}[\-\x20\.][0-9]{2}/;
        var ccPattern5 = /[0-9]{4}[\-\x20\.][0-9]{4}[\-\x20\.][0-9]{3}[\-\x20\.][0-9]{2}/;
        return !lpCWTagConst.CC_MASKING_ENABLE ? strText : strText.replace(ccPattern1, maskingChar)
            .replace(ccPattern2, maskingChar)
            .replace(ccPattern3, maskingChar)
            .replace(ccPattern4, maskingChar)
            .replace(ccPattern5, maskingChar);
    }

    //add info message to the chat screen
    function addInfoMessageToChatMessages(infoMsg) {
        var infoMsgLine = lpCWAssist.lpChatMakeInfoNotificationMessage("Info", infoMsg, lpChatFontSize)
		currentTranscript=currentTranscript+infoMsgLine;
        $(jqe(lpChatID_lpChatCurrMessagesSection)).append(infoMsgLine); //US1137693
        scrollToBottom();
    }

    // send visitor chat lines
    /*Added a new IF block to display the line sent from survey screen*/
    function sendLine(fromSurvey) {
        var text = getTrimmedValue(lpChatID_lpChatInputTextField, true);
        if(fromSurvey){
          text = "Did not resolve my request: "+$("#feedbackAns").val();
        }  
        var valABeforeCCMasking = text;

        text = ccMasking(text);
        if (!isNinaChat) {
          if(fromSurvey){
            var line = createLine({
                by: 'You',
                text: text,
                source: 'visitor',
                time: new Date().toString()
            });
            addLineToDom(line, false,"Visitor");
            scrollToBottom();
        		transferChatBtnClicktoLE();
            submittedVASurvey = true;
            sessionMgr.setSubmittedVASurvey(true);
            sessionMgr.setCMcomments($("#feedbackAns").val());
        	}else if (text && chat && text != "Type here..." &&
                chatState == chat.chatStates.CHATTING) {
                isolateLinecreation(valABeforeCCMasking, text)
            }
        } else {
            //makeNinaQuery(text);
            if (text !== "") {
                if (valABeforeCCMasking == text) {
                    if(isFirstMarvincall){
                       getMarvinReponse_prechat(text);
                       isFirstMarvincall=false;
			            }else{			
                        if(fromSurvey){
                           makeMarvinQuery('', true,'survey'); 
                           makeMarvinQuery('', false,'survey','close');
                           exitSurveyBtnClickAutomation(false);
                        }else{
                            makeMarvinQuery(text, false,'typingbar');
                        }    
                   }
                }
                isolateLinecreation(valABeforeCCMasking, text);
            }
        }
    }
/*--Method to go back to the chatting screen after the user enters the feedback --*/
    function showChatTranscriptAgain(){
      $(".lpAutomationsurvey").hide();
      $("#lpChatMainMessageSection").show();
      $("#ttrtime").remove();
      $("#lpchatbottomsection").show();
      screenState = screenStateType.CHATTING;
      sessionMgr.setScreen(screenState);
      chatWinCloseable = false;
      sendLine(true);      
    }
    
   function transferChatBtnClicktoLE(){
       isMarvinLatestTranscript = false;
	   //invokeleauthurl(lastResponseCode,lastIntendId);
	invokeUILog("Marvin: " + marvinConversationId, "INFO", "GUID: " + bbCookieOverride + " - Loaded Marvin conversation history from transferChat ");   
  if(scType != "US-PersonalLoans-en-Standard"){  
      getMarvinChatHistory(false);
  }
       isNinaChat=false; 
       transferringChat = true;
        sessionMgr.setMarvinChatEscalated(true);
		sendPostMessage({
                            "lpEmbChatWiz": "LPNVPF",
                            "CMD": "CONTROL",
                            "value": "SET_ATCHTESC",
                            "ckValue": "true"
                        });
        var rLinks = document.getElementsByClassName("refreshLinks");
        for (var i = 0; i < rLinks.length; i++) {
            rLinks[i].style.pointerEvents = 'none';
            rLinks[i].style.color = 'gray';
        }

        var cLinks = document.getElementsByClassName("choicelinks");
        for (var i = 0; i < cLinks.length; i++) {
            cLinks[i].style.pointerEvents = 'none';
            cLinks[i].style.color = 'gray';
        }
    if(expansionFlag=="credit" && chatPriority ){     
      var line = createLine({
                        by: 'Virtual Assistant',
                        text: lpCWTagConst.CreditPrioritizationMessage,
                        source: 'proactive',
                        time: new Date().toString()
                    });
     addLineToDom(line, true,"Agent",true);      
      }     
		//isccpavailable = checkSkillandTime();
    var isccpavailable = true;
	   if(!isccpavailable){
		   myChatWiz.lpChatShowBusyViewLE();
	   }else{	
      if(expansionFlag=="credit" && chatPriority ){   
           unregisterEventHandler(lpChatID_lpChatInputTextField, "keyup", keyChanges);
           unregisterEventHandler("LpSendDataButton", "click", sendDataFromButton);
           $(jqe(lpChatID_lpChatInputTextField)).removeAttr('disabled');
           $(jqe(lpChatID_lpChatInputTextField)).focus();
           $(jqe("LpSendDataButton")).removeAttr('disabled');  
           prepareOfflineMessages();
           sessionMgr.setlestate("waitingforcminput");
           setLestateCk("waitingforcminput"); 
      }else{
			invokeLErequestApi();
	   }
	   }   
     
    } 

   var historyWaitCounter = 0;
    /*Capture the transcript from Marvin, cm feedback and send it to CCP*/
   function invokeLErequestApi(pgreload) {
        if(typeof pgreload == "undefined"){
            pageload = false;
        }else{
           pageload = true;
        }

      var isSmallDevice = deviceBucket === "Small" || (deviceBucket === "Medium" && getWindowOrientation() === "landscape"); // Small device in protrait and landscape modes
      unregisterEventHandler("LpSendDataButton", "keydown", sendControlToClose);
        registerEventHandler("LpSendDataButton", "keydown", sendControlToClose);
        if(scType == "US-PersonalLoans-en-Standard"){  
            historyWaitCounter = 20;
            if(isAndroid) {
                $('#lpChatInputTextFieldProxy').focus();
            }
            $(jqe(lpChatID_lpChatInputTextField)).attr('disabled', true);
            $(jqe("LpSendDataButton")).attr('disabled', true);
        }
        if (historyWaitCounter < 20) {
            if (isMarvinLatestTranscript) {
                if (transcriptData != null && transcriptData.length > 0) {
                     unregisterEventHandler("LpSendDataButton", "click", sendDataFromButton);
                      if(scType != "US-PersonalLoans-en-Standard"){  
                      $(jqe(lpChatID_lpChatInputTextField)).removeAttr('disabled');
                      if(isSmallDevice) {
                         if(!keepSoftKeys){
                            $(jqe(lpChatID_lpChatInputTextField)).blur();
                            if(isAndroid){
                                $('#lpChatInputTextFieldProxy').blur();
                            }
                        } else {
                            if(isIPhone || (isAndroid && getWindowOrientation() === "portrait")){ // Allow focus in android in portrait mode
                                $(jqe(lpChatID_lpChatInputTextField)).focus(); 
                                keepSoftKeys = false;
                            }
                        }
                      }else{
                        $(jqe(lpChatID_lpChatInputTextField)).focus();
                      }
            		 $(jqe("LpSendDataButton")).removeAttr('disabled');
                      }
                     unregisterEventHandler(lpChatID_lpChatCloseChatBtn, "click", lpChatCloseChatBtnClick); 
                     unregisterEventHandler(lpChatID_lpChatInputTextField, "keyup", keyChanges);
                     removeSearchResults();
                     if(expansionFlag=="credit" && chatPriority ){ 
                        transcriptData.push("Proactive Chat: " + lpCWTagConst.CreditPrioritizationMessage);					
                    }
                     // transcriptData.push("AutomatonEscalationCCP:true");
                     transcriptData.push("Virtual Assistant : responseCode="+lastResponseCode);
                     if(typeof $("#feedbackAns") != "undefined" && $("#feedbackAns") != null && typeof $("#feedbackAns").val() != "undefined" ){
                           transcriptData.push("CM : Did not resolve my request: "+$("#feedbackAns").val());
                     }
                     
                      jwtValue="";  
                      invokeleauthurl(lastResponseCode,lastIntentName);
					  prepareOfflineMessages();
                       var jwtTimer = setInterval(function(){
	 			if(jwtValue!=="") {		
				    var d = new Date(); 
                    startEscalationTime=d.getTime();
					sessionMgr.setstartEscalationTime(startEscalationTime);	
                    prepareToConnect(transcriptData,true,pageload,jwtValue,visitorIdForLE,sessionId, interactionContextId,cid,eid,skill);
					clearInterval(jwtTimer); 
		 		}  	      
			}, 500); 
                }else{
                    unregisterEventHandler("LpSendDataButton", "click", sendDataFromButton);
                    if(scType != "US-PersonalLoans-en-Standard"){
                      $(jqe(lpChatID_lpChatInputTextField)).removeAttr('disabled');
                      if(isSmallDevice) {
                        if(!keepSoftKeys){
                            $(jqe(lpChatID_lpChatInputTextField)).blur();
                            if(isAndroid){
                                $('#lpChatInputTextFieldProxy').blur();
                            }
                        } else {
                            if(isIPhone || (isAndroid && getWindowOrientation() === "portrait")){ // Allow focus in android in portrait mode
                                $(jqe(lpChatID_lpChatInputTextField)).focus();
                                keepSoftKeys = false; 
                            }
                        }
                      } else {
                        $(jqe(lpChatID_lpChatInputTextField)).focus();
                      }
            		 $(jqe("LpSendDataButton")).removeAttr('disabled');
                    }
                     unregisterEventHandler(lpChatID_lpChatCloseChatBtn, "click", lpChatCloseChatBtnClick); 
                     unregisterEventHandler(lpChatID_lpChatInputTextField, "keyup", keyChanges);
                     removeSearchResults();
                     jwtValue="";
                     invokeleauthurl(lastResponseCode,lastIntentName); 
					 prepareOfflineMessages();		
                     var jwtTimer = setInterval(function(){
	 			if(jwtValue!=="") {		
							    var d = new Date(); 
								startEscalationTime=d.getTime();
								sessionMgr.setstartEscalationTime(startEscalationTime);									
                 	if(expansionFlag=="credit" && chatPriority){
                    transcriptData.push("Proactive Chat: " + lpCWTagConst.CreditPrioritizationMessage);				
                    prepareToConnect(transcriptData,true,pageload,jwtValue,visitorIdForLE,sessionId, interactionContextId,cid,eid,skill);
                  }else{
                    if(typeof $("#feedbackAns") != "undefined" && $("#feedbackAns") != null && typeof $("#feedbackAns").val() != "undefined" ){
                           transcriptData.push("CM : Did not resolve my request: "+$("#feedbackAns").val());
                           prepareToConnect(transcriptData,true,pageload,jwtValue,visitorIdForLE,sessionId, interactionContextId,cid,eid,skill);
                     }else{
                           prepareToConnect('',true,pageload,jwtValue,visitorIdForLE,sessionId, interactionContextId,cid,eid,skill);
                     }                
                  }                     			
								
					clearInterval(jwtTimer); 
		 		}  	      
			}, 500);
			
                }               
                historyWaitCounter = 0;
            } else {
                historyWaitCounter++;
                window.setTimeout(function() {
                    invokeLErequestApi(pgreload);
                }, 1000);
            }
        } else {
            historyWaitCounter = 0;
            unregisterEventHandler("LpSendDataButton", "click", sendDataFromButton); 
            if(scType != "US-PersonalLoans-en-Standard"){
                      $(jqe(lpChatID_lpChatInputTextField)).removeAttr('disabled');
                    if(isSmallDevice) {
                        if(!keepSoftKeys){
                            $(jqe(lpChatID_lpChatInputTextField)).blur();
                            if(isAndroid){
                                $('#lpChatInputTextFieldProxy').blur();
                            }
                        } else {
                            if(isIPhone || (isAndroid && getWindowOrientation() === "portrait")){ // Allow focus in android in portrait mode
                                $(jqe(lpChatID_lpChatInputTextField)).focus();
                                keepSoftKeys = false; 
                            }
                        }
                    } else {
                        $(jqe(lpChatID_lpChatInputTextField)).focus();
                    }
            		 $(jqe("LpSendDataButton")).removeAttr('disabled');
            }
                      unregisterEventHandler(lpChatID_lpChatCloseChatBtn, "click", lpChatCloseChatBtnClick);    
                      unregisterEventHandler(lpChatID_lpChatInputTextField, "keyup", keyChanges);
                      removeSearchResults();
                      jwtValue="";
                      invokeleauthurl(lastResponseCode,lastIntentName); 
					  prepareOfflineMessages();
            		 //prepareToConnect('',true,false,jwtValue);
			var jwtTimer = setInterval(function(){
	 			if(jwtValue!=="") {		
							    var d = new Date(); 
								startEscalationTime=d.getTime();	
								sessionMgr.setstartEscalationTime(startEscalationTime);		
                if(expansionFlag=="credit" && chatPriority){
                    transcriptData.push("Proactive Chat: " + lpCWTagConst.CreditPrioritizationMessage);				
                    prepareToConnect(transcriptData,true,pageload,jwtValue,visitorIdForLE,sessionId, interactionContextId,cid,eid,skill);
                }else{
                  if(typeof $("#feedbackAns") != "undefined" && $("#feedbackAns") != null && typeof $("#feedbackAns").val() != "undefined" ){
                           transcriptData.push("CM : Did not resolve my request: "+$("#feedbackAns").val());
                           prepareToConnect(transcriptData,true,pageload,jwtValue,visitorIdForLE,sessionId, interactionContextId,cid,eid,skill);
                     }else{
                           prepareToConnect('',true,pageload,jwtValue,visitorIdForLE,sessionId, interactionContextId,cid,eid,skill);
                     }
                }          
								
					clearInterval(jwtTimer); 
		 		}  	      
			}, 500);

        }


    }
	
	function checkSkillandTime(){
		if(expansionFlag=="centurion" || expansionFlag=="credit"){
			return convertToServerTimeZone(skill);
		}else{
			return true;
		}
	}
	
	function convertToServerTimeZone(skill){
    offset = -4.0
    clientDate = new Date();
    utc = clientDate.getTime() + (clientDate.getTimezoneOffset() * 60000);
    estDate = new Date(utc + (3600000*offset));
	time = estDate.toLocaleString();
	
	logger.debug(estDate); 

	var day=estDate.getDay();
	logger.debug("est day--"+day);

	var time = estDate.toLocaleTimeString();
	logger.debug("est time--"+time);

	var ampm = time.split(" ")[1];
	logger.debug("est ampm--"+ampm);

	time1 = time.split(" ")[0];
		h1=parseInt(time1.split(":")[0]);
		m1=parseInt(time1.split(":")[1]);
		s1=parseInt(time1.split(":")[2]);
	if(ampm=="PM"){
		if(h1!=12)
			h1=h1+12;		
	}
	if(ampm=="AM"){
		if(h1==12)
			h1=0;		
	}

	 logger.debug(h1+":"+m1+":"+s1); 

	var currentD = new Date();
	currentD.setHours(h1,m1,s1);

	var startChatD = new Date();
	var endChatD = new Date();
	if(expansionFlag=="centurion"){	
		if(day > 0 && day < 6){
			/*startChatD.setHours(8,00,0); // 8.00 am
			endChatD.setHours(21,00,0); // 9.00 pm	
		   
			logger.debug("Chat available-->")
			if(currentD >= startChatD && currentD < endChatD ){
				logger.debug("yes!");
				return true;
			}else{
				logger.debug("no, sorry!");
				return false;
			}*/
			return true;
		}else{
			logger.debug("no, sorry!");
			return false;
		}		
	}else if(expansionFlag=="credit"){
		if(day > 0 && day < 6){
			/*startChatD.setHours(8,00,0); // 8.00 am
			endChatD.setHours(22,30,0); // 10.30 pm	
		   
			logger.debug("Chat available-->")
			if(currentD >= startChatD && currentD < endChatD ){
				logger.debug("yes!");
				return true;
			}else{
				logger.debug("no, sorry!");
				return false;
			}*/
			return true;
		}else{
			startChatD.setHours(8,00,0); // 8.00 am
			endChatD.setHours(18,30,0); // 6.30 pm	
		   
			logger.debug("Chat available-->")
			if(currentD >= startChatD && currentD < endChatD ){
				logger.debug("yes!");
				return true;
			}else{
				logger.debug("no, sorry!");
				return false;
			}
		}
	}
}
    function makeMarvinQuery(text, isEscalted,inputSrc,fromclose) {
	//bbCookieOverride = '16661979ab5e7021462d4178fa0385ae';
        if(isAndroid) {
            $('#lpChatInputTextFieldProxy').focus();
        }
        $(jqe(lpChatID_lpChatInputTextField)).attr('disabled', true);
        $(jqe("LpSendDataButton")).attr('disabled', true);
        var inpStr = '';
		var intentIdFromOptions="";
        var indicatorFromoptions="";
        if (marvinConversationId == "N") marvinConversationId = "";
		if(typeof(isEscalted)=="string"){
            var intentData = isEscalted.split('|');
			intentIdFromOptions=intentData[0];
            indicatorFromoptions=intentData[1];
			isEscalted=false;
		}
        if (isEscalted) {
            inpStr = '{"userId" : "' + bbCookieOverride + '",  "conversationId" : "' + marvinConversationId + '",  "intentId" : "",  "messageId" : "1",  "structured" : { "questionType" : "escalate" }, "channel" : "livechat"}';
            clickStartLiveChat = true;
            document.getElementById("lpNinaTransferChatBtn").style.pointerEvents = 'none';
        } else {
            if (text == '') {
                inpStr = '{ "userId" : "' + bbCookieOverride + '", "conversationId" : "' + marvinConversationId + '", "intentId" : "","exp":"'+expansionFlag+'", "messageId" : "1", "structured" : { "questionType" : "chatend" },"channel" : "livechat"}';
            } else {
                inpStr = '{"userId" : "' + bbCookieOverride + '","conversationId" : "' + marvinConversationId + '",  "intentId" : "'+intentIdFromOptions+'","exp":"'+expansionFlag+'","messageId" : "1234XYZ", "unstructured" : {"utterance" : "' + text + '"},"channel" : "livechat"}';
            }
        }
	/*	if(isSecondMarvincall){
         if(fromclose!="close"){
		vaInteractiveChat = true;
              sessionMgr.setvaInteractive(vaInteractiveChat);
         } 
		}*/
        if (marvinResp) {
            callMarvinLiveChat(inpStr,inputSrc,fromclose,indicatorFromoptions);
        } else {
            setTimeout(function() {
                callMarvinLiveChat(inpStr,inputSrc,fromclose,indicatorFromoptions);
            }, 5000);
        }

    }

    function callMarvinLiveChat(inpStr,inputSrc,fromclose, indicatorFromoptions) {
        marvinResp = false;
		var tvar=5000;
    var liveChatHeaders = { 'Accept': 'application/json', 'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e'};
    if(inputSrc === 'commonTopics') {
      liveChatHeaders = { 'Accept': 'application/json', 'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e','experiment_indicator': indicatorFromoptions };
    } else if(inputSrc === 'elasticSearch') {
      liveChatHeaders = { 'Accept': 'application/json', 'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e','experiment_indicator': 'type_ahead' };
    }
        $.ajax({
			url: 'https://apigateway.americanexpress.com/servicing/v1/cmchat/livechat',
            headers: liveChatHeaders,
            type: "POST",
            contentType: "application/json",
            crossDomain: true,
            data: inpStr,
			xhrFields: {
				withCredentials: true
			},
            success: function(data) {
                //alert('success::'+data);				
                if(inputSrc == "typingbar"){
                    keepSoftKeys = true;	
                 }else{
                    keepSoftKeys = false;	
                 }
                myChatWiz.sendMarvinresponse(data, false, '',inputSrc,fromclose);
            },
            async: true,
            timeout: tvar,
            error: function(req, status, err) {
                logger.debug('something went wrong', status, err);
				invokeUILog("Marvin: " + marvinConversationId, "ERROR", "GUID: " + bbCookieOverride + " - callMarvinLiveChat - Unable to send message - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);	
             if(inputSrc == "typingbar"){
                keepSoftKeys = true;	
             }else{
                keepSoftKeys = false;	
             }   
                myChatWiz.sendMarvinresponse('', false, '',inputSrc);
                if (req.status == 0  && status=='timeout') {
                    lastResponseCode = '016';
                   // logger.debug('CCP Escalation, reason=', "Marvin request timed out");
                } else if (req.status > 399 && req.status < 500) {
                    lastResponseCode = '014';
                    //logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                } else {
                    lastResponseCode = '014';
                   // logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                }
            }
        });
    }
	
    function isolateLinecreation(valABeforeCCMasking, text) {
 var line ="";
	if (isNinaChat) {
            line = createLine({
                by: "You",
                text: text,
                source: 'visitor',
                time: new Date().toString()
            });
        }
	else{
        var line = createLine({
            by: chat.getVisitorName(),
            text: text,
            source: 'visitor',
            time: new Date().toString()
        });
        }
        if(!isNinaChat) 
        chat.addLine({
            text: text,
            error: function() {
                line.className = "error";
            }
        });
        if (valABeforeCCMasking != text) {
            addInfoMessageToChatMessages(lpCWTagConst.lpMsg_CreditCardPatternDetected_InChat);
        }
        addLineToDom(line, false,"Visitor");
        scrollToBottom();
    }



    // bind the event for visitor to hit 'Enter' key to send chat lines
    function keyChanges(e) {
        e = e || window.event;
        var key = e.keyCode || e.which;
		 var text = getTrimmedValue(lpChatID_lpChatInputTextField, false);
        if (!isNinaChat) {
            if (key == 13) {
                if (e.type == "keyup") {
				
                    sendLine();
                    setVisitorTyping(false);
                }
                return false;
            } else {
               // var text = getTrimmedValue(lpChatID_lpChatInputTextField, false);
                if (!lpVisitorTypingMsg && text != "") {
                    setVisitorTyping(true);
                } else if (lpVisitorTypingMsg && text == "") {
                    setVisitorTyping(false);
                }

            }
        } else {
            if (key == 13) {
                if (e.type == "keyup" && text != "") {
					if($("#recordedmsg").length > 0){
						lpChatWidget.rmRecmsgOnFirstMsg();
					}
					if($("#commontopics").length > 0  && $("#elasticresults").length >0){
						//removeCommonTopics();
						//hideCommonTopics();
						removeESandCT();
					}
					hideElasticResults();
                    sendLine();
                }
                return false;
            }
			/*if(e.type == "keyup"){
				var searchStr = getTrimmedValue(lpChatID_lpChatInputTextField, false);
				
				if (searchStr.length > 3) {
					getElasticResults(searchStr);
				}else{
					hideElasticResults();
					if($("#commontopics").length > 0){
						if(searchStr == ""){
							showCommonTopics();
						}else{
							hideCommonTopics();
						}
					}
				}
			}*/
			if(e.type == "keyup"){
				var searchStr = getTrimmedValue(lpChatID_lpChatInputTextField, false);
				if(key != 40 && key != 38){
				if (searchStr.length > 3 && $("#elasticresults").length >0) {
					getElasticResults(searchStr);
				}else{
					if ($("#elasticresults").length >0){
						hideElasticResults();
					}
					if($("#commontopics").length > 0){
						if(searchStr == ""){
							showCommonTopics();
						}else{
							hideCommonTopics();
							}
						}
					}
				}
		 }
        }
    }   

	

    function sendDataFromButton() {
        //logger.debug("this is from Amex Assist Team");
		var text = getTrimmedValue(lpChatID_lpChatInputTextField, false);
		if(text != ""){
			if($("#recordedmsg").length > 0){
				lpChatWidget.rmRecmsgOnFirstMsg();
			}
		hideElasticResults();
        sendLine();
        setVisitorTyping(false);
		}
    }
	
  
  function sendControlToClose(e, chatType){
     e = e || window.event;
        var key = e.keyCode || e.which;
        if(key=="9"){
    sendPostMessage({
					"lpEmbChatWiz": "LPNVPF",
					"CMD": "CONTROL",
					"value": "FOCUS_CLOSE_BUTTON"
				});
        e.preventDefault();
        }
		else if(key == 13){
			if(chatType == 'preChat'){
				$("#lpPreChatSurveySubmitBtn").trigger('click');
			}
			else if(chatType == 'postChat'){
				$("#lpPostChatSurveySubmitBtn").trigger('click');
			}
		}
  }
  // Mousedown handler to prevent send button from getting focus and allowing text box focus to remain - for small devices
  function preventSoftKeysClouser(e){
      e.preventDefault();
  }
  
	//function to hide elastic results
	function hideElasticResults(){
		if ($("#elasticresults").length > 0 && $("#elasticresults").css("display") == 'block'){
			$(".elasticresults").remove();
			$("#elasticresults").hide();
			scrollStatus = false;
			changeScrollStatus();
			adjustlpMsgHeight();
                        lpChatWidget.scrollToBottomLE();
		}
	}

    // broadcast to agent console that visitor is typing...
    function setVisitorTyping(typing) {
        if (chat && chatState == chat.chatStates.CHATTING) {
            logger.debug("visitor is typing");
            chat.setVisitorTyping({
                typing: typing
            });
            lpVisitorTypingMsg = typing ? true : false;
			if (typing) {
				setTimeout(function(){ window.scroll(0, 0); }, 10);
			}
        }
    }

    /*
     * indicates if this is an interative chat. 
     */
    function isInterativeChat() {
        return lpInteractiveChat ? true : false;
    }

    function onStartEvent(data) {
        logger.debug("onStart", data);
    }

   

    function createChatInstanceForTransfer() {
        try {

            var chatInstanceParam = {
                lpNumber: lpCWTagConst.lpChatAccountNumber,
                appKey: lpCWTagConst.lpChatAppKey,
                domain: lpCWTagConst.domain,
                sessionUID: lpSUID,
                onLoad: chatOnloadEvent,
                onInit: chatOnInitEvent,
                onInfo: onInfoEvent,
                onLine: addLines,
                onState: updateChatState,
                onStart: onStartEvent,
                onStop: stopCollaborationSession,
                onAgentTyping: agentTyping,
                onExitSurvey: onExitSurveyEvent,
                onPreChatSurvey: onPreChatSurveyEvent,
                onSubmitExitSurvey: onSubmitExitSurveyEvent,
                onVisitorDisposed: onVisitorDisposedEvent,
                onRequestChat: onRequestChatEvent,
                context: myChatWiz
            };
            logger.debug("createChatInstance param", chatInstanceParam);
            chat = new lpTag.taglets.ChatOverRestAPI(chatInstanceParam);
			copychatInstanceParam = chatInstanceParam;
        } catch (exc) {
            logger.debug("ERROR", "Failed to create ChatOverRestAPI instance! " + exc);
            return;
        }
    }


    function onVisitorDisposedEvent(data) {
        logger.debug("onVisitorDisposed", data);
    }

    function onSubmitExitSurveyEvent(data) {
        logger.debug("onSubmitExitSurvey", data);
    }

    function onPreChatSurveyEvent(data) {
        logger.debug("onPreChatSurvey", data);
    }

    function onExitSurveyEvent(data) {
        logger.debug("onExitSurvey", data);
    }

    function onInfoEvent(data) {
        logger.debug("onInfo", data);
        //defect N-58. Itai's suggestion
        if (data.error) {
            notificationDialog.open(lpCWTagConst.lpMsg_OnInfoEventErrorMsg, true);
        }
    }

    function chatOnloadEvent(data) {
        logger.debug("onLoad", data);
        chatState = data.state; //update chat state - to handle the lpChatSkill = "offline"
    }

    function sendPostMessageChatInActive() {
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "CHAT_STATE_INACTIVE"
        });
    }

    /**
     * when chat api is in initialized state, execute per logic below
     */
    function chatOnInitEvent(data) {
        logger.debug("onInit", data);
		sendErrorAlert("Timestamp", "chatOnInitEvent -" + new Date());
        chatInstanceReady = true; //mark chat instance initialized
        if (windowState == windowStateType.DESTRUCTION) {
            cleanupPreviousSession();
            insideChatCreation = false;
        } else {
            if (data.init) {
                //indicate chat started
                sendPostMessage({
                    "lpEmbChatWiz": "LPNVPF",
                    "CMD": "CONTROL",
                    "value": "CHAT_STATE_ACTIVE"
                });
            }

            if (chatState == "uninitialised" && data.init && sessionMgr.getChatState() == "") {
                //handle on the start button clicked & chat instance is ready
				
                if (skill == "offline") {
					sendErrorAlert("cantconnect", "Chatstate uninitialised Skill offline");
                    if (offlineSurveyNameOverride == "") {
                        //present offline page if skill is defaulted to 'offline'
                        showOfflineScreenBySkill(skill);
                    } else if (offlineSurveyNameOverride != "") {
                        //if there is an override in offlineSurveyNameOverride, display offline by SurveyName
                        showOfflineScreenBySurveyName(offlineSurveyNameOverride);
                    }
                } else {
                    if (!webserviceEnable) {							
                        checkAgentAvailability(); // proceed to
                    }
                }
                //dont do anything if webserviceEnable=true because timer in loadWebServiceChat() is still running and it will make decision there
            }
        }
    }

    /**
     * cleanup the abandoned session
     */
    function cleanupPreviousSession() {
        logger.debug("cleanupPreviousSession", "...");
        logger.debug("cleanupPreviousSession", "chatInstanceReady=" + chatInstanceReady +
            " collaborationInstanceReady=" + collaborationInstanceReady +
            " windowState = " + windowState);
        if (windowState == windowStateType.DESTRUCTION) {
			sendErrorAlert("Timestamp", "cleanupPreviousSession -" + new Date());
            //if(chatInstanceReady && collaborationInstanceReady){ commented as if n/w delay collab called alter
            logger.debug("cleanupPreviousSession start to clean previous session", "...");
            if (collaborationApi)
                collaborationApi.stopSession();
            if (chat)
                chat.disposeVisitor();
            chatOverHandler();
            deleteAPI_instance();
            sessionMgr.stop();
            clearOnClose();
            resetAll();
            logger.debug("cleanupPreviousSession complete cleaning previous session", "...");
            //}
        } else {
            logger.debug("cleanupPreviousSession not ready to clean up previous session", "...");
        }
    }

   
   

    // Code changes for Marvin Chat history transcript start
    /**
     * method to pull the Chat History from getChat Marvin API call
     */
    function getMarvinChatHistory(isPageReload,retryCnt) {
		if(typeof retryCnt!="undefined"){
			marvinerrCount=retryCnt;
		}else{
			marvinerrCount=0;
		}
        if (marvinConversationId == "N") marvinConversationId = "";      

        var getChatPayLoad = '{"conversationID" : "' + marvinConversationId + '","cardMemberId" : "' + bbCookieOverride + '","offset" : 1,   "limit" : 999, "startDate" : "","endDate" : "", "sortBy": "ASC", "commandMsg": false,"excludeMsgList": ""}';
		var histurl = 'https://apigateway.americanexpress.com/servicing/v1/cmchat/history';
        //logger.debug(getChatPayLoad);
        $.ajax({
            url: histurl,
            headers:{'Accept': 'application/json',"X-AMEX-API-KEY":"e9868517-4f07-46c2-a31e-6c01651fab1e"},
            type: "POST",
            async: true,
            contentType: "application/json",
            crossDomain: true,
            data: getChatPayLoad,
            success: function(data) {
                //logger.debug('Response for getChat' + data);
				invokeUILog("Marvin: " + marvinConversationId, "INFO", "GUID: " + bbCookieOverride + " - Loaded Marvin conversation history - Retry count: " + marvinerrCount+" isPageReload - "+isPageReload);
				marvinerrCount=0;
                if (isPageReload) {
                    myChatWiz.addMarvinChatHistory(data);
                } else {
                    myChatWiz.sendMarvinChatHistory(data,"success");
                }
            },
            timeout: 1500,
            error: function(req, status, err) {
				if(marvinerrCount<2){
					invokeUILog("Marvin: " + marvinConversationId, "ERROR", "GUID: " + bbCookieOverride + " - Unable to get Marvin conversation history - Retry count: " + marvinerrCount +" isPageReload - "+isPageReload + " - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);		
					marvinerrCount++;
					 getMarvinChatHistory(isPageReload,marvinerrCount); 
				}else{
                    invokeUILog("Marvin: " + marvinConversationId, "ERROR", "GUID: " + bbCookieOverride + " - Unable to get Marvin conversation history - Retry count: " + marvinerrCount +" isPageReload - "+isPageReload + " - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);
                logger.debug('something went wrong', status, err);
				//isMarvinLatestTranscript = true;
				 myChatWiz.sendMarvinChatHistory(status,"error");
				 marvinerrCount=0;
				}
            }
        });
    }

    /**
     * method to format the Chat History received from Marvin
     */
    myChatWiz.sendMarvinChatHistory = function(data,callStatus) {

        var formattedChatHistory = [];
		lastIntentName ="";
		if(callStatus=="error"){
			formattedChatHistory.push("*** Unable to provide Automation transcript ***");
		}else
		{	
        if (data != null && data.status == "Success") {

            var chatHistoryDetails = data.chatHistory;

            for (i = 0; i < chatHistoryDetails.length; i++) {
                var chatJson = JSON.parse(chatHistoryDetails[i].chatTranscriptText);
                if (chatHistoryDetails[i].createdBy == "bot") {
					lastIntentName = chatHistoryDetails[i].intentName;
                    if (chatHistoryDetails[i].messageType == "text") {
                        formattedChatHistory.push("Virtual Assistant : " + chatJson.reply);
                    } else if (chatHistoryDetails[i].messageType == "structured") {
						
						var mStr="";
                       // formattedChatHistory.push("Virtual Assistant : " + chatJson.questionText);
						mStr="Virtual Assistant : MChoice- " + chatJson.questionText+"\n";
                        for (j = 0; j < chatJson.attributes.choices.length; j++) {
                          if(typeof chatJson.attributes.choices[j].choiceCardArt !="undefined" && chatJson.attributes.choices[j].choiceCardArt !==""){
                             mStr=mStr+"McOption: "+chatJson.attributes.choices[j].choiceText+"||"+chatJson.attributes.choices[j].choiceCardArt+"\n";
                          }else{
                              mStr=mStr+"McOption: "+chatJson.attributes.choices[j].choiceText+"\n";
                          }  
                           //formattedChatHistory.push("Virtual Assistant :  Choice" + chatJson.attributes.choices[j].choiceText);
                        }
							formattedChatHistory.push(mStr);
							
                    } else if (chatHistoryDetails[i].messageType == "unstructured") {
                        formattedChatHistory.push("Virtual Assistant : " + chatJson.reply);
                    }

                } else {
                    if (chatJson.questionType != "escalate" && typeof chatJson.utterance != "undefined" && chatJson.utterance !='') {
                        formattedChatHistory.push("CM : " + chatJson.utterance);
                    } else if (typeof chatJson.choiceText != "undefined") {
                        //formattedChatHistory.push("CM : " + chatJson.choiceText);
						if(chatHistoryDetails[i].messageType == "structured" && chatHistoryDetails[i].createdBy == "livechat"){
							formattedChatHistory.push("CM : Selected_Choice " + chatJson.choiceText);
						}else{
							formattedChatHistory.push("CM : " + chatJson.choiceText);
						}
                    }
                }
            }
        }
	  }
        transcriptData = formattedChatHistory;
        isMarvinLatestTranscript = true;
        //logger.debug("formattedChatHistory -->" + formattedChatHistory);
    }

    /**
     * method to format the Chat History received from Marvin
     */
    myChatWiz.addMarvinChatHistory = function(data) {
		ninaCurrentTranscript="";
            var formattedChatHistory = [];
            if (data != null && data.status == "Success") {

                var chatHistoryDetails = data.chatHistory;
             /*   var d1 = new Date();
			var t1 = d1.getTime();
			var d = new Date(t1);
			var dateStr = monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear();		
		$(jqe(ninaChatMessagesSection)).append('<div class="conversationDate">' + dateStr + '</div>');  */
		var intendCount=0;
		if(chatHistoryDetails.length > 0){
			var timecreated1 = chatHistoryDetails[0].createdTime; 
			timecreated1 =timecreated1.split(".")[0]+ " GMT";
			timecreated1= timecreated1.replace(/-/g, '/');
			var d1 = new Date(timecreated1); 	 
			var t1 = d1.getTime();
			var d = new Date(t1);
			var autotime = formatAMPM(d)
			logger.debug(monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + autotime);
			//US1654868 //var strtDate =  monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + autotime;
      var strtDate =  monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear();
      var noofdays = daysBetween(d,new Date());                                
                                if(noofdays < 7){
                                  if(noofdays == 0)
                                    strtDate = "Today";                                 
                                  else if(noofdays == 1)
                                    strtDate = "Yesterday";
                                  else
                                    strtDate = getDayofWeek(d.getDay());
                                }
      if($("#chathistory .conversationDate:last").html() !== strtDate){                          
        $(jqe(ninaChatMessagesSection)).append('<div class="conversationDateWrapper"><div class="conversationDate">' + strtDate + '</div></div>'); 
        $("#currentChat .conversationDateWrapper").hide();
      }        
		}

		        var botresponsecount=0; 
            var timecreated;
            var chatendFlag = false;
                for (i = 0; i < chatHistoryDetails.length; i++) {
                    var formattedHtml = "";
                    var linebyValue = "";
                    var sourceValue = "";
                    var esclateFlag = false;
                    timecreated = chatHistoryDetails[i].createdTime; 
					timecreated =timecreated.split(".")[0]+ " GMT";
					timecreated= timecreated.replace(/-/g, '/');
                    var chatJson = JSON.parse(chatHistoryDetails[i].chatTranscriptText);
                    if (chatHistoryDetails[i].createdBy == "bot") {
						botresponsecount=botresponsecount+1;
            if(botresponsecount > 1){
              botresponsegreaterthan2 = true;
            }
                        if (chatHistoryDetails[i].messageType == "text") {
							/*if(chatHistoryDetails[i].intentCd == "greeting"){
							if(intendCount==0){
									formattedHtml = formattedHtml + chatJson.reply;
								}
								intendCount=intendCount+1;
							}else{
								formattedHtml = formattedHtml + chatJson.reply;
							}	*/
							 formattedHtml = formattedHtml + chatJson.reply;
							 if(botresponsecount==1 || botresponsecount==2){
								 var strcompare="to better assist you, please wait a moment while I bring in a Customer Care Professional";
								 if((chatJson.reply.toLowerCase()).indexOf(strcompare.toLowerCase())>-1){
									 formattedHtml="";
								 }
							 }
                        } else if (chatHistoryDetails[i].messageType == "structured") {
                            formattedHtml = formattedHtml + '<div>' + chatJson.questionText + '</div>';
                            for (j = 0; j < chatJson.attributes.choices.length; j++) {
                                if (sessionMgr.getMarvinChatEscalated() == false) {
                                    if (chatJson.questionType == "relatedanswers") {
                                        formattedHtml = formattedHtml + '<div class="choicelinks" style="color: #1274b8;cursor: pointer;" onclick="sendMarvinLinkResponse1(this)" id="' + chatJson.attributes.choices[j].choiceIntent + '">' + chatJson.attributes.choices[j].choiceText + '</div>';
                                    } else if (chatJson.questionType == "multichoice" || chatJson.questionType == "defer") {
                                        formattedHtml = formattedHtml + '<div class="choicelinks" style="color: #1274b8;cursor: pointer;" onclick="sendMarvinMCQResponse1(this,' + chatJson.questionId + ',\''+chatJson.questionType+'\')" id="' + chatJson.attributes.choices[j].choiceId + '">' + chatJson.attributes.choices[j].choiceText + '</div>';
                                    }else if (chatJson.questionType == "cardselect") {
                                        var cardData = chatJson.attributes.choices[j].choiceText.split("ending");
                                        var cardDesc = cardData[0];
                                        var cardNum;
                                        if(cardData.length>0){
                                           cardNum = 'ending '+cardData[1];
                                        } 
                                      if(typeof chatJson.attributes.choices[j].choiceCardArt != "undefined"){
                                        if(chatJson.attributes.choices[j].choiceCardArt == null || chatJson.attributes.choices[j].choiceCardArt == "null"){
                                             chatJson.attributes.choices[j].choiceCardArt = "https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/defaultcard.png";
                                          }
                                        formattedHtml = formattedHtml + '<div class="choicelinks" style="color: #1274b8;cursor: pointer;" onclick="sendMarvinCSResponse1(this,' + chatJson.questionId +',\''+chatJson.attributes.choices[j].choiceText+'\')" id="' + chatJson.attributes.choices[j].choiceId + '">' + '<div class="cardWrapper"><span class="cardArt"><img src="'+chatJson.attributes.choices[j].choiceCardArt+'"></span>'+'<span class="cardInfo"><div class="cardDesc">'+cardDesc+'</div><div class="cardNum">'+cardNum+'</div> </span></div>' + '</div>';
                                      }else{
                                        formattedHtml = formattedHtml + '<div class="choicelinks" style="color: #1274b8;cursor: pointer;" onclick="sendMarvinCSResponse1(this,' + chatJson.questionId + ',\''+chatJson.attributes.choices[j].choiceText+'\')" id="' + chatJson.attributes.choices[j].choiceId + '">' +'<div class="cardDesc">'+chatJson.attributes.choices[j].choiceText+'</div>' + '</div>';
                                      } 
                                    }

                                } else {
                                    formattedHtml = formattedHtml + '<div class="choicelinks">' + chatJson.attributes.choices[j].choiceText + '</div>';
                                }

                            }
                        } else if (chatHistoryDetails[i].messageType == "unstructured") {
                            formattedHtml = formattedHtml + value.reply;
                        }
                        sourceValue = "nina";
						if(chatHistoryDetails[i].intentCd == "greeting"){
								 if($(".greetm").length==0){
									sourceValue='ninagreet';
								}
							 }
                        linebyValue = "Virtual Assistant";
                    } else {
                        if (typeof chatJson.utterance != "undefined" && chatJson.utterance !='') {
                            formattedHtml = formattedHtml + chatJson.utterance;
                        } else if (chatJson.questionType == "escalate") {
                            esclateFlag = true;
                        } else if(typeof chatJson.choiceText != "undefined" && chatJson.choiceText !=''){
                            formattedHtml = formattedHtml + chatJson.choiceText;
                        }else if (chatJson.questionType == "chatend") {
                            chatendFlag = true;
                        }
                        linebyValue = "You";
                        sourceValue = "visitor";
                    }
                    fromreloadMarvin = true;
		    if(formattedHtml!=""){	
                    var line = createLine({
                        by: linebyValue,
                        text: formattedHtml,
                        source: sourceValue,
                        time: timecreated
                    },true);
				if (!esclateFlag && !chatendFlag) {
                        addLineToNinaDom(line, true);
                    }		
		    }
					
                    
                }
                /*On page reload display the card member feedback in transcript*/
                if(submittedVASurvey){
                   linebyValue = "You";
                   sourceValue = "visitor";
                  surveytext = "Did not resolve my request:"+sessionMgr.getCMcomments();
                  var line = createLine({
                        by: linebyValue,
                        text: surveytext,
                        source: sourceValue,
                        time: timecreated
                    },true);
                    addLineToNinaDom(line, true);
                }
                
            }
			//if(sessionMgr.getMarvinChatEscalated() == "false" || sessionMgr.getMarvinChatEscalated() == false){
				scrollToBottom(true);
			//}	
            $(jqe(lpChatID_lpChatInputTextField)).removeAttr('disabled');
            $(jqe(lpChatID_lpChatInputTextField)).focus();
            $(jqe("LpSendDataButton")).removeAttr('disabled');
			marvinResp=true;
            //logger.debug("formattedChatHistory -->" + formattedHtml);
        }
        // Code changes for Marvin Chat history transcript End			

   

    /* notify parent to hide container, reset all variables */
    function disposeEndChat() {
		sendErrorAlert("Timestamp", "endChat -" + new Date());
        logger.info("dispose end chat", "...");
        insideChatCreation = false;
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "END_CHAT"
        }); //notify parent to end chat
        clearOnClose();
        lpChatShowView("", true);
       // chatOverHandler();
       // deleteAPI_instance();
        resetAll();
		inhistoryrecords=false;
		$.xhrPool.abortAll();
    }


    /* will close the PCI Slide out if already exists */
    function closeSlideOut() {
        //$(jqe(lpChatID_lpChatSlideOutContainer)).remove();
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "UPDATE_DRAG_AREA_HIDE_PCI"
        }); //notify parent to increase drag area
        $(jqe(lpChatID_lpChatSlideOutContainer)).remove();
    }

    function clearOnClose() {
		
        if (typeof idlesessionVar != "undefined")
            clearTimeout(idlesessionVar);
		timerEnable=false;
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "LPCDATA"
        });
    }

   function lpChatCloseChatBtnClickCancel	(){
	 sessionMgr.setchatIdle(new Date());  
	 clearTimeout(idlesessionVar);
	 idlesessionVar = setTimeout(function() {
		lpChatCloseChatBtnClick();
	 }, 600000);  
     clearTimeout(idleendchatsessionVar);
     // $("#confirmOverLay").hide();
     // $("#confirmPrompt").hide();

   }


    function lpChatCloseChatBtnClickConfirmed() {
	    clearTimeout(idleendchatsessionVar);
		$.xhrPool.abortAll();
        logger.debug("lpChatCloseChatBtnClick", "...chatWinCloseable=" + chatWinCloseable);

        if (typeof webserviceTimer != "undefined")
            clearInterval(webserviceTimer);

        //close the PCI if visible
        closeSlideOut();

        if (isNinaChat) {
              //clearOnClose();
            //makeMarvinQuery('', false,'close');
            myChatWiz.showPostChatSurveyForAutomation();

        } else {
			//console.log('Skill on page before survey: ' + skill + ' - Experience value: ' + expansionFlag);
			sendPostMessage({
					"lpEmbChatWiz": "LPNVPF",
					"CMD": "CONTROL",
					"value": "CLOSE_ENDCHAT_OVERLAY"
				});
			if($("#lpChatMainMessageSection").is(":visible")) {
				
				clearOnClose();
				$("#sendexitsurvey" ).trigger( "click");	
				myChatWiz.showPostChatSurveyForLEmessaging();       
				if (!xiconclicked) {
					try {
						omn_rmassistaction("Click", "LiveChat_InChatSession-EndChat");
					} catch (e) {
						logger.debug("omn error LiveChat_InChatSession-EndChat");
					}
				}
			}
		sessionMgr.deleteSMMapFromSessionStorage(); 
        isNinaChat = false;
        }		
        xiconclicked = false;
    }
	
	function getLatestSkill(){
		//console.log('Initial Skill: ' + skill + ' - Experience value: ' + expansionFlag);
		var qUrl = 'https://clicktochat.americanexpress.com/chat/conversation/details/'+latestConvID;
		$.ajax({
			url: qUrl,
			type: "GET",
			contentType: "application/json; charset=utf-8",
			crossDomain: true,
			dataType: 'json',
			timeout: 60000,
			success: function(data) {
				//console.log('Latest Skill - Response: ', data);
				if(typeof data.skill != "undefined" && data.skill != null && data.skill != "") {
					skill = data.skill;
					scType = data.skill;
					sessionMgr.setcTypeValue(scType);
				}
				if(typeof data.exp_value != "undefined" && data.exp_value != null && data.exp_value != "") {
					expansionFlag = data.exp_value;
					sessionMgr.setExpansionFlag(expansionFlag);
				}
				//console.log('Latest Skill: ' + skill + ' - Experience value: ' + expansionFlag);						
			},
			error: function(res, status, err) {
				//console.log('err',err);
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbCookieOverride + " - Unable to get latest skill - Response status: " + res.status + " - " + res.statusText + " - Response ready state: " + res.readyState + " - Status: " + status);
			}
		});
	}

    /* event handler for close button in footer click */
    function lpChatCloseChatBtnClick() {
	
        logger.debug("lpChatCloseChatBtnClick", "...chatWinCloseable=" + chatWinCloseable);
    if(!historyLoaded && chatWinCloseable){
		sessionMgr.deleteChatSessionStorage();
		disposeEndChat();
		if (!isNinaChat && !chatWinCloseable){
			$("#sendexitsurvey" ).trigger( "click");
		}
	}else{
  if(isNinaChat && chatWinCloseable){
    sessionMgr.deleteSMMapFromSessionStorage(); 
    isNinaChat = false;
    disposeEndChat();
  }    
	if (!isNinaChat && chatWinCloseable) {
                //case when not in chat
				if(screenState == screenStateType.EXITSURVEY){
					//var surRes='{"csat":"0","rtfscore":"0"}';
					var surRes='{"csat":"0","rtfscore":"0","fcrscore":"0"}';
					$('#sendofflinemsg').trigger( "click",surRes); 
				}
                sessionMgr.deleteChatSessionStorage();
                disposeEndChat();
            }else{
				clearTimeout(idlesessionVar);
				clearTimeout(idleendchatsessionVar);
				idleendchatsessionVar = setTimeout(function() {
					sendPostMessage({
					"lpEmbChatWiz": "LPNVPF",
					"CMD": "CONTROL",
					"value": "HIDE_END_CHAT_LAYER"
				});
					lpChatCloseChatBtnClickConfirmed();
				}, 120000);
				sendPostMessage({
					"lpEmbChatWiz": "LPNVPF",
					"CMD": "CONTROL",
					"value": "DISP_END_CHAT_LAYER"
				});
               //$("#confirmOverLay").show();
               //$("#confirmPrompt").show();
			   //$("#confirmButton").focus();
        }
	}
	 inhistoryrecords =false;
	 //console.log("in close inhistoryrecords"+inhistoryrecords);
  /*      if(chatWinCloseable){
              if(!isNinaChat && screenState == screenStateType.EXITSURVEY)
              {
                  var jObj='{"rate": "NA", "resolved":"NA"}';    
                 $( "#sendexitsurvey" ).trigger( "click",jObj );
              }   
           sessionMgr.deleteChatSessionStorage();
            disposeEndChat(); 
           
	 }else if(!isNinaChat && screenState == screenStateType.EXITSURVEY){
		   var jObj='{"rate": "NA", "resolved":"NA"}';    
                 $( "#sendexitsurvey" ).trigger( "click",jObj );
                 sessionMgr.deleteChatSessionStorage();
                 disposeEndChat(); 
         }	
          $("#confirmOverLay").show();
               $("#confirmPrompt").show();
			   $("#confirmButton").focus();
  */
    }

    /*Close EW window on key press 13*/
    function lpChatCloseChatBtnClickOnKey(e) {
        e = e || window.event;
        var key = e.keyCode || e.which;
        if (key == 13) {
            lpChatCloseChatBtnClick();
        }
    }

	function lpChatCloseChatBtnClickConfirmedOnkey(e) {
        e = e || window.event;
        var key = e.keyCode || e.which;
        if (key == 13) {
            lpChatCloseChatBtnClickConfirmed();
        }
		
		if(key == "9"){
			$("#confirmCancel").focus();
			return false;	
		}
    }
	
	function lpChatCloseChatBtnClickCancelOnkey(e) {
        e = e || window.event;
        var key = e.keyCode || e.which;
        if (key == 13) {
            lpChatCloseChatBtnClickCancel();
        }
		if(key == "9"){
			$("#confirmButton").focus();	
			return false;
		}
    }
    /**
     * invoke to handle end chat and set to do cleanup the abandon session
     */
    function endChatHandlerSelfDestruction() {
        logger.debug("endChatHandlerSelfDestruction", "...");
        sessionMgr.setLPvisitorID(chat.getSessionKey().split("K")[1]);
        lpChatShowView("", true);
        if (collaborationApi)
            collaborationApi.stopSession();
        if (chat)
            chat.disposeVisitor();
        chatOverHandler();
        deleteAPI_instance();
        sessionMgr.stop();
        clearOnClose();
        resetAll();
    }

    /* API will send the event for end-chat and this method will invoke */
    function endChatHandler() {
		
        logger.debug("endChatHandler", "...");
        sessionMgr.setLPvisitorID(chat.getSessionKey().split("K")[1]);
        sendPostMessageChatInActive();
        sessionMgr.stop();
        clearOnClose();
        //close the PCI if visible
        closeSlideOut();

        if (chatWinCloseable) {
            disposeEndChat();
        } else {
            checkForPostChatSurvey();
        }

        if (collaborationApi)
            collaborationApi.stopSession();
        if (chat)
            chat.disposeVisitor();
    }

    /* end current chat session */
    function endChat() {
        logger.debug("endChat", "...chatState=" + chatState);

        if (chat && (chatState == chat.chatStates.CHATTING || chatState == chat.chatStates.RESUMING ||
                chatState == chat.chatStates.WAITING)) { //|| chatState == chat.chatStates.NOTFOUND

            var endChatParam = {
                    disposeVisitor: true,
                    context: myChatWiz,
                    skill: skill,
                    error: function(data) {
                        logger.debug("endChat.error", data);
                        chatWinCloseable = true;
                        endChatHandler();
                    }
                }
                /* send endChat request and waiting for endChat event call back */
            var failedRequest = chat.endChat(endChatParam);

            if (failedRequest && failedRequest.error) {
                logger.debug("endChat.error2", failedRequest);
                chatWinCloseable = true;
                endChatHandler();
            }
        } else if (chatState == chat.chatStates.INITIALISED) {
            endChatHandler();
        }

    }

    /* increase font size button click handler */
    function increaseFontSize() {
        lpChatFontSize = (lpChatFontSize == LP_CHAT_FONT_SIZE_MAX) ? LP_CHAT_FONT_SIZE_MAX :
            (2 + lpChatFontSize);
        changeFontSize();
        if(lpChatFontSize == LP_CHAT_FONT_SIZE_MAX){
          $(jqe(lpChatID_lpChatMenuItemFontIncreaseBtn)).parent().addClass("ptevent");
          $(jqe(lpChatID_lpChatMenuItemFontIncreaseBtn)).parent().removeClass("lpPointer");
          $(jqe(lpChatID_lpChatMenuItemFontIncreaseBtn)).parent().trigger("mouseout");
          $(jqe(lpChatID_lpChatMenuItemFontIncreaseBtn)).parent().trigger("mouseover");  
		  $(".lpHoverDiv").remove(); 
       }else{
          $(jqe(lpChatID_lpChatMenuItemFontDecreaseBtn)).parent().addClass("lpPointer");
          $(jqe(lpChatID_lpChatMenuItemFontDecreaseBtn)).parent().removeClass("ptevent");
       } 
        try {
            omn_rmassistaction("Click", "LiveChat_InChatSession-IncreaseFont");
        } catch (e) {
            logger.debug("omn error LiveChat_InChatSession-IncreaseFont");
        }
    }

    /* decrease font size button click handler */
    function decreaseFontSize() {
        lpChatFontSize = (lpChatFontSize == LP_CHAT_FONT_SIZE_MIN) ? LP_CHAT_FONT_SIZE_MIN :
            (lpChatFontSize - 2);
        changeFontSize();

        if(lpChatFontSize == LP_CHAT_FONT_SIZE_MIN){
           $(jqe(lpChatID_lpChatMenuItemFontDecreaseBtn)).parent().addClass("ptevent");
           $(jqe(lpChatID_lpChatMenuItemFontDecreaseBtn)).parent().removeClass("lpPointer");
           $(jqe(lpChatID_lpChatMenuItemFontDecreaseBtn)).parent().trigger("mouseout");
           $(jqe(lpChatID_lpChatMenuItemFontDecreaseBtn)).parent().trigger("mouseover"); 
           $(".lpHoverDiv").remove();		   
        }else{
           $(jqe(lpChatID_lpChatMenuItemFontIncreaseBtn)).parent().addClass("lpPointer");
           $(jqe(lpChatID_lpChatMenuItemFontIncreaseBtn)).parent().removeClass("ptevent");
        } 

        try {
            omn_rmassistaction("Click", "LiveChat_InChatSession-DecreaseFont");
        } catch (e) {
            logger.debug("omn error LiveChat_InChatSession-DecreaseFont");
        }
    }

    /* update font size in chat window */
    function changeFontSize() {
        var newFontSize = lpChatFontSize + "px";
        sessionMgr.setFontSize(lpChatFontSize);
        $("div.lpChatMsg").css("font-size", newFontSize); //$("lpChatMsg").css("font-size", newFontSize);
       // $("div.lpSystemMessageDiv").css("font-size", newFontSize); 
    }

    // DE307644: Inappropriate scroll position while turning to landscape mode_iPhones only
    function setPortraitScrollPosition() {
        var currOrientation = getWindowOrientation();
        if(currOrientation === 'portrait'){
            iPhonePortraitScrollPos = $("#lpChatMessagesSection").scrollTop();
            var actualScrollHeight = $("#lpChatMessagesSection")[0].scrollHeight - $("#lpChatMessagesSection").height();
            if(actualScrollHeight === $("#lpChatMessagesSection").scrollTop()){
                isPortScrollPosBottom = true;
            } else {
                isPortScrollPosBottom = false;
            }
        }
    }


    function mouseWheelEvent(e){
        if(typeof e.originalEvent.detail == 'number' && e.originalEvent.detail !== 0) {
            if(e.originalEvent.detail > 0) {                
                if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") != "block"){
					$("#recordedmsg").show();
					scrollStatus = false;
					changeScrollStatus();
					adjustlpMsgHeight();
				}
            } 
        } else if (typeof e.originalEvent.wheelDelta == 'number') {
            if(e.originalEvent.wheelDelta < 0) {
                if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") != "block"){
					$("#recordedmsg").show();
					scrollStatus = false;
					changeScrollStatus();
					adjustlpMsgHeight();
				}
            } 
        }
    }

	function recordedMsgStatus(event) {
		if(fromToggleBlock){
			fromToggleBlock = false;
			return false;
		}
		var iCurScrollPos = $(this).scrollTop();
		if(scrollStatus){
			//var iCurScrollPos = $(this).scrollTop();
            var actualScrollHeight = $( "#lpChatMessagesSection" ).prop('scrollHeight') - $("#lpChatMainMessageSection").height();
            var scrollPos = $( "#lpChatMessagesSection" ).scrollTop(); 
            if(actualScrollHeight === Math.floor(scrollPos)){
                if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") != "block"){
                    $("#recordedmsg").show(); 
                    scrollStatus = false;
					changeScrollStatus();
                    adjustlpMsgHeight(); 
                    scrollToBottom();
				}
            }
            else if (iCurScrollPos > iScrollPos) {
				//Scrolling Down
				if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") != "block"){
					$("#recordedmsg").show();
					scrollStatus = false;
					changeScrollStatus();
					adjustlpMsgHeight();
				}
			} else {
				//Scrolling Up
				if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") != "none"){
					if(iScrollPos != 0){
					$("#recordedmsg").hide();
					scrollStatus = false;
					changeScrollStatus();
					adjustlpMsgHeight();
					}
				}
			}
			//iScrollPos = iCurScrollPos;
		}
		iScrollPos = iCurScrollPos;
		
	}
	
    /* Toggle sound button click handler */
    function changeAudioSetting() {
        logger.debug("changeAudioSetting", isAudioOn);
        isAudioOn = isAudioOn ? false : true;
        sessionMgr.setAudio(isAudioOn);
        if (isAudioOn) {
            $(".sprite-font-sound-off").addClass("sprite-font-sound-on").removeClass("sprite-font-sound-off")
            $(jqe(lpChatID_lpChatAudioButton)).attr('data-msg', lpCWTagConst.lpTxt_TurnOffSound);
            $(jqe(lpChatID_lpChatAudioButton)).text("Turn Off Sound");
        } else {
            $(".sprite-font-sound-on").addClass("sprite-font-sound-off").removeClass("sprite-font-sound-on")
            $(jqe(lpChatID_lpChatAudioButton)).attr('data-msg', lpCWTagConst.lpTxt_TurnOnSound);
            $(jqe(lpChatID_lpChatAudioButton)).text("Turn On Sound");
        }
        $(jqe(lpChatID_lpChatAudioButton)).trigger("mouseout");
        $(jqe(lpChatID_lpChatAudioButton)).trigger("mouseover");  
      
        try {
            omn_rmassistaction("Click", "LiveChat_InChatSession-ToggleSound");
        } catch (e) {
            logger.debug("omn error LiveChat_InChatSession-ToggleSound");
        }
    }

     /** check & play audio */
	function playAudio(msgFrom) {
		var isIE;
		var myBeepAudio;
		var isHTML5 = null;
		if (isAudioOn) {
			try {
				isHTML5 = typeof document.createElement("audio").play == "undefined" ? false : true;
				if(msgFrom == "Agent")	
					myBeepAudio = new Audio('https://icm.aexp-static.com/content/dam/chat/lechat/css/sound/AmexChatPop.mp3');
				else
					myBeepAudio = new Audio('https://icm.aexp-static.com/content/dam/chat/lechat/css/sound/CM+Chat+Pop.mp3');
				myBeepAudio.play();
			} catch (ex) {
				isHTML5 = false;
			}

			try {
				isIE = navigator.userAgent.toLowerCase().indexOf("msie") > -1 ? true : false;
			} catch (ex) {
				isIE = false;
			}
		}
	}
	
	var _originalSize;
	 
	// To keep the focus on textbox when send btn is clicked - for small devices.
	// US1629523: Keyboard opening and closing - Mobile web only  
	function bindKeypadRelatedEvents(){ 
		$("#lpChatInputTextField").off("blur",unregisterKeypadEvents);
		$("#lpChatInputTextField").off("focus",registerKeypadEvents);
		
		$("#lpChatInputTextField").on("blur",unregisterKeypadEvents);
		$("#lpChatInputTextField").on("focus",registerKeypadEvents);
        
        $(window).off('orientationchange', orientationChangeHandler);
        $(window).on('orientationchange', orientationChangeHandler);
	 
		if(isAndroid){   

            $("#lpChatInputTextFieldProxy").off("blur",unregisterKeypadEvents2);
            $("#lpChatInputTextFieldProxy").off("focus",registerKeypadEvents2);
            
            $("#lpChatInputTextFieldProxy").on("blur",unregisterKeypadEvents2);
            $("#lpChatInputTextFieldProxy").on("focus",registerKeypadEvents2);
            
			_originalSize = $(window).width() + $(window).height();
			$(window).off('resize', keyPadEventBindingsOnResize);
			$(window).on('resize', keyPadEventBindingsOnResize);
		}
    }
	
	function keyPadEventBindingsOnResize(){ 
        var currentSize = $(window).width() + $(window).height();
		if(_originalSize){
			if(currentSize != _originalSize){
                registerKeypadEvents();
			}else{ 
				$("#lpChatInputTextField").blur();
                unregisterKeypadEvents();
			} 
		} 
	}
    
	
	function registerKeypadEvents(){
        //console.log("typingbar issue: registerKeypadEvents");
        unregisterKeypadEvents();
		registerEventHandler("LpSendDataButton", "mousedown", preventSoftKeysClouser); 
        registerEventHandler("lpChatMainMessageSection", "mousedown", preventSoftKeysClouser);  
        registerEventHandler("commontopics", "mousedown", preventSoftKeysClouser);
        registerEventHandler("elasticresults", "mousedown", preventSoftKeysClouser);
		registerEventHandler(lpChatID_hamburgerimg, "mousedown", preventSoftKeysClouser);
        registerEventHandler(lpChatID_lpxicon, "mousedown", preventSoftKeysClouser); 
		setTimeout(function(){ window.scroll(0, 0); }, 5);
    }
    
	function unregisterKeypadEvents(){
        //console.log("typingbar issue: unregisterKeypadEvents");
		unregisterEventHandler("LpSendDataButton", "mousedown", preventSoftKeysClouser);  
        unregisterEventHandler("lpChatMainMessageSection", "mousedown", preventSoftKeysClouser);   
        unregisterEventHandler("commontopics", "mousedown", preventSoftKeysClouser);   
        unregisterEventHandler("elasticresults", "mousedown", preventSoftKeysClouser);   
		unregisterEventHandler(lpChatID_hamburgerimg,  "mousedown", preventSoftKeysClouser);
		unregisterEventHandler(lpChatID_lpxicon, "mousedown", preventSoftKeysClouser); 
		setTimeout(function(){ window.scroll(0, 0); }, 5);
    }
    
    function registerKeypadEvents2(){
        //console.log("typingbar issue: registerKeypadEvents2");
        unregisterKeypadEvents2();
		registerEventHandler("LpSendDataButton", "mousedown", preventSoftKeysClouser); 
        registerEventHandler("lpChatMainMessageSection", "mousedown", preventSoftKeysClouser);  
        registerEventHandler("commontopics", "mousedown", preventSoftKeysClouser);
        registerEventHandler("elasticresults", "mousedown", preventSoftKeysClouser);
		registerEventHandler(lpChatID_hamburgerimg, "mousedown", preventSoftKeysClouser);
        registerEventHandler(lpChatID_lpxicon, "mousedown", preventSoftKeysClouser); 
		setTimeout(function(){ window.scroll(0, 0); }, 5);
    }
    
	function unregisterKeypadEvents2(){
        //console.log("typingbar issue: unregisterKeypadEvents2");
		unregisterEventHandler("LpSendDataButton", "mousedown", preventSoftKeysClouser);  
        unregisterEventHandler("lpChatMainMessageSection", "mousedown", preventSoftKeysClouser);   
        unregisterEventHandler("commontopics", "mousedown", preventSoftKeysClouser);   
        unregisterEventHandler("elasticresults", "mousedown", preventSoftKeysClouser);   
		unregisterEventHandler(lpChatID_hamburgerimg,  "mousedown", preventSoftKeysClouser);
		unregisterEventHandler(lpChatID_lpxicon, "mousedown", preventSoftKeysClouser); 
		setTimeout(function(){ window.scroll(0, 0); }, 5);
	}
	
     
	// DE303661: Error found in TC2126034: SIT_Keypad open scenario while switching to landscape
    function orientationChangeHandler() { 
        // $('#currentChat').append('<div>Orientation changed: '+getWindowOrientation()+'</div>');
        if(getWindowOrientation() === "landscape"){// landscape   
            if(document.activeElement.id === "lpChatInputTextField"){
                $('#lpChatInputTextField').blur();
            } else if(isAndroid && document.activeElement.id === "lpChatInputTextFieldProxy") {
                $('#lpChatInputTextFieldProxy').blur();
            }
        }
    }

    /**
     * Generic function to register for event
     */
    function registerEventHandler(pElementId, pEventType, pHandler) {
        logger.debug("registerEventHandler", pElementId + " " + pEventType);
        try {
            $(jqe(pElementId)).on(pEventType, pHandler);
        } catch (excp) {
            logger.debug("Exception in registerEventHandler elementID=" + pElementId + ", EventType=" +
                pEventType + " & error message", excp);
        }
    }

    /**
     * Generic function to unregister for event
     */
    function unregisterEventHandler(pElementId, pEventType, pHandler) {
        logger.debug("unregisterEventHandler", pElementId + " " + pEventType);
        try {
            $(jqe(pElementId)).off(pEventType, pHandler);
        } catch (excp) {
            logger.debug("Exception in unregisterEventHandler elementID=" + pElementId + ", EventType=" +
                pEventType + " & error message", excp);
        }
    }

    /**
     * bind chat input text field event so when user hit 'Enter' it will send chat messages
     */
    function bindChatInputTextFieldEvent(flagChat) {
        if ((!isNinaChat && !disbleTextarea) || flagChat) {
            if ($(jqe(lpChatID_lpChatInputTextField)).attr("disabled") != "undefined") {
                $(jqe(lpChatID_lpChatInputTextField)).removeAttr('disabled');
                $(jqe(lpChatID_lpChatInputTextField)).focus();
                $(jqe("LpSendDataButton")).removeAttr('disabled');
                disbleTextarea = false;
            }
        }

        if ($(jqe(lpChatID_lpChatInputTextField)).attr("onKeyup") != "undefined") {
            unregisterEventHandler(lpChatID_lpChatInputTextField, "keyup", keyChanges);
            registerEventHandler(lpChatID_lpChatInputTextField, "keyup", keyChanges);
			unregisterEventHandler(lpChatID_lpChatInputTextField, "click", showCommonTopics);
            registerEventHandler(lpChatID_lpChatInputTextField, "click", showCommonTopics);
			unregisterEventHandler(lpChatID_lpChatInputTextField, "blur", hideCommonTopics);
            registerEventHandler(lpChatID_lpChatInputTextField, "blur", hideCommonTopics);
			/*unregisterEventHandler("commontopics", "mouseenter", removeblurEventCT);
			unregisterEventHandler("commontopics", "mouseleave", addblurEventCT);
			registerEventHandler("commontopics", "mouseenter", removeblurEventCT);
			registerEventHandler("commontopics", "mouseleave", addblurEventCT);*/
			
			// commented below code to avoid hiding common topics
			/*$("#commontopics").off("mouseenter",removeblurEventCT);
			$("#commontopics").off("mouseleave",addblurEventOnMLeaveCT);
			$("#commontopics").on("mouseenter",removeblurEventCT);
			$("#commontopics").on("mouseleave",addblurEventOnMLeaveCT);*/
        }

        unregisterEventHandler("LpSendDataButton", "click", sendDataFromButton);
        registerEventHandler("LpSendDataButton", "click", sendDataFromButton);
        unregisterEventHandler("LpSendDataButton", "keydown", sendControlToClose);
        registerEventHandler("LpSendDataButton", "keydown", sendControlToClose);

    }

    /**
     * bind close chat event
     */
    function bindCloseButtonEvent() {
        try {
            logger.debug("bindCloseButtonEvent", "remove existing events");
            unregisterEventHandler(lpChatID_lpChatCloseChatBtn, "click", lpChatCloseChatBtnClick);
            registerEventHandler(lpChatID_lpChatCloseChatBtn, "click", lpChatCloseChatBtnClick);

	    unregisterEventHandler("confirmButton", "click", lpChatCloseChatBtnClickConfirmed);
            registerEventHandler("confirmButton", "click", lpChatCloseChatBtnClickConfirmed);

		unregisterEventHandler("confirmCancel", "click", lpChatCloseChatBtnClickCancel);
            registerEventHandler("confirmCancel", "click", lpChatCloseChatBtnClickCancel);
	
		unregisterEventHandler("confirmButton", "keydown", lpChatCloseChatBtnClickConfirmedOnkey);
            registerEventHandler("confirmButton", "keydown", lpChatCloseChatBtnClickConfirmedOnkey);

		unregisterEventHandler("confirmCancel", "keydown", lpChatCloseChatBtnClickCancelOnkey);
            registerEventHandler("confirmCancel", "keydown", lpChatCloseChatBtnClickCancelOnkey);

            //unregisterEventHandler(lpChatID_lpPreChatSurveyCloseBtn, "click", lpChatCloseChatBtnClick);
            //registerEventHandler(lpChatID_lpPreChatSurveyCloseBtn, "click", lpChatCloseChatBtnClick);

            unregisterEventHandler(lpChatID_lpPreChatSurveyCloseBtn, "keyup", lpChatCloseChatBtnClickOnKey);
            registerEventHandler(lpChatID_lpPreChatSurveyCloseBtn, "keyup", lpChatCloseChatBtnClickOnKey);
            if (!lpCWAssist.isPostMessageSupported()) {
                logger.debug("bindCloseButtonEvent", "remove existing events");
                $(jqe(lpChatID_lpChatCloseChatBtn)).hide();
            }
        } catch (excp) {
            logger.debug("Exception in bindCloseButtonEvent, error message", excp);
        }
    }

    /**
     * Blinking Text functionality for loading page
     */
    function lpLoadingTextBlinking() {
        window.blinker = setInterval(function() {
            if (window.blink) {
                $('#lpTextBlinking').css('color', '#666');
                window.blink = false;
            } else {
                $('#lpTextBlinking').css('color', '#aaa');
                window.blink = true;
            }
        }, 800);
    }

    /**
     * animating content
     */
    function animateLpContent() {
        $("#lpPreChatMessagesSection .sprite-company-logo-small").animate({
            marginTop: "15px"
        }, 1000, function() {
            $("#lpChatContent").fadeIn('slow');
            $("#lpFocusContent").focus();
            //$("#lpPreChatMessagesSection .sprite-company-logo-small").focus();
        });

    }


    /**
     * bind all buttons event within embedded window
     */
    function bindAllButtonEvents() {
        logger.debug("bindAllButtonEvents", "binding...");

        bindCloseButtonEvent();
        unregisterEventHandler(lpChatID_lpChatMenuItemFontDecreaseBtn, "click", decreaseFontSize);
        unregisterEventHandler(lpChatID_lpChatMenuItemFontIncreaseBtn, "click", increaseFontSize);
        unregisterEventHandler(lpChatID_lpChatAudioButton, "click", changeAudioSetting);
		unregisterEventHandler(lpChatID_lpChatMessagesSection, "scroll", recordedMsgStatus);
        if(!isIPhone){
            unregisterEventHandler(lpChatID_lpChatMessagesSection, 'mousewheel DOMMouseScroll', mouseWheelEvent);
        }
		unregisterEventHandler(lpChatID_thanksrefcursor, "click", lpChatWidget.rmRecmsgOnFirstMsg);
		unregisterEventHandler(lpChatID_hamburgerimg, "click", hammburgerClick);
		unregisterEventHandler(lpChatID_lpxicon, "click", lpxiconClick);
		
		// US1629523: Keyboard opening and closing - Mobile web only  
		bindKeypadRelatedEvents()
        registerEventHandler(lpChatID_lpChatMenuItemFontDecreaseBtn, "click", decreaseFontSize);
        registerEventHandler(lpChatID_lpChatMenuItemFontIncreaseBtn, "click", increaseFontSize);
        registerEventHandler(lpChatID_lpChatAudioButton, "click", changeAudioSetting);
		registerEventHandler(lpChatID_lpChatMessagesSection, "scroll", recordedMsgStatus);
        if(!isIPhone){
            registerEventHandler(lpChatID_lpChatMessagesSection, 'mousewheel DOMMouseScroll', mouseWheelEvent);
        }
		registerEventHandler(lpChatID_thanksrefcursor, "click", lpChatWidget.rmRecmsgOnFirstMsg);
		registerEventHandler(lpChatID_hamburgerimg, "click", hammburgerClick);
        registerEventHandler(lpChatID_lpxicon, "click", lpxiconClick);
        if(isIPhone){
            unregisterEventHandler(lpChatID_lpChatMessagesSection, "scroll", setPortraitScrollPosition);
            registerEventHandler(lpChatID_lpChatMessagesSection, "scroll", setPortraitScrollPosition);
        }
		$("#lpPrivacyStmntBtn").attr("tabindex", "0");
        unregisterEventHandler("lpPrivacyStmntBtn", "click", lpCWAssist.openPrivacyStmnt);
        registerEventHandler("lpPrivacyStmntBtn", "click", lpCWAssist.openPrivacyStmnt);
      
        unregisterEventHandler("lpPrivacyStmntBtn", "keydown", function() {
            lpCWAssist.openPrivacyStmntAcss(event);
        });
        registerEventHandler("lpPrivacyStmntBtn", "keydown", function() {
            lpCWAssist.openPrivacyStmntAcss(event);
        });
		
   //US1641394: Spike - Scroll history load - Desktop and Mobile Web
    unregisterEventHandler("lpChatMessagesSection", "scroll", function(){displayHistory(event)});
        registerEventHandler("lpChatMessagesSection", "scroll", function(){displayHistory(event)});   
  
       //click on hamburger image to expand tools
		/*$("#lpChatWizFrameContainer").on("click","#hamburgerimg",function(e){
			scrollStatus = false;
			$("#hamburgerimg").hide();
			$("#lpxicon").show();
			$("#lptoolbar").show();
			adjustlpMsgHeight();
			lpChatWidget.scrollToBottomLE();
		});

		//click on close icon to hide the tools
		$("#lpChatWizFrameContainer").on("click","#lpxicon",function(e){
			scrollStatus = false;
			$("#lpxicon").hide();
			$("#hamburgerimg").show();
			$("#lptoolbar").hide();
			adjustlpMsgHeight();
			lpChatWidget.scrollToBottomLE();
		});*/
		
		// Commenting mouseover events as they are not required, need to delete it
        /*$(".lpHoverButton").on("mouseover",
            function() {
                $("body").append(lpCWAssist.lpMakeHoverDiv($(this).attr("data-msg")));
                var top = $(this).offset().top-32;
                var left = $(this).offset().left - ($(".lpHoverDiv").width() / 2) + ($(this).width() / 2);
                if (left <= 0) {
                    var arrowShift = left;
                    left = 0;
                    $(".lpHoverDiv .lpArrowUp").css({
                        left: arrowShift
                    });
                }
                $(".lpHoverDiv").css({
                    top: top,
                    left: left
                });
            }).on("mouseout", function() {
            $(".lpHoverDiv").remove();
        });*/
    }

	function hammburgerClick(){
		//scrollStatus = false;
		$("#hamburgerimg").hide();
		$("#lpxicon").show();
		$("#lptoolbar").show();
		scrollStatus = false;
		changeScrollStatus();
		//adjustlpMsgHeight();
		//lpChatWidget.scrollToBottomLE();
	}
	$(document).mouseup(function(e){
        var container = $("#lptoolbar");
        if(!container.is(e.target) && container.has(e.target).length === 0 && container.show()!= null){
            container.hide();
            $("#lpxicon").hide();
            $("#hamburgerimg").show();
        }
    });
	function lpxiconClick(){
		//scrollStatus = false;
		$("#lpxicon").hide();
		$("#hamburgerimg").show();
		$("#lptoolbar").hide();
		scrollStatus = false;
		changeScrollStatus();
		//adjustlpMsgHeight();
		//lpChatWidget.scrollToBottomLE();
	}
	
	/** This function is used to adjust height of the EW */
	function adjustEWheight(widgetOpen){
		var isSmallDevice = deviceBucket.indexOf('Small') !== -1;
		if(widgetOpen) {
			$("#lpChatMessagesSection").css("bottom", "0px"); // US1137693
			var lpmsgsection = isSmallDevice ? (deviceOrientationHeight - 173) : 270; // US1137693
			if(isofferSlide == "offer") {
				// if(RCWidgetStepNo==4 || RCWidgetStepNo==6) {
				if(RCWidgetStepSize > 232) // US1137693
					RCWidgetStepSize = 232; // US1137693

				lpmsgsection = isSmallDevice ? (deviceOrientationHeight - 16 - RCWidgetStepSize) : (443 - RCWidgetStepSize); // US1137693

				$("#lpChatMainMessageSection").css("margin-top", RCWidgetStepSize - 15 + "px");
				/*} else {
					lpmsgsection = 421-RCWidgetStepSize;
					$("#lpChatMainMessageSection").css("margin-top",RCWidgetStepSize+"px");
				}*/
			} else if(isofferSlide == "secureQ") {
				if(cob_widgetOpenStatus) {
					lpmsgsection = isSmallDevice ? (deviceOrientationHeight - 182) : 275; // US1137693
					$("#lpChatMainMessageSection").css("margin-top","146px");//old 153px
				} else {
					lpmsgsection = isSmallDevice ? (deviceOrientationHeight - 169) : 290; // US1137693
					$("#lpChatMainMessageSection").css("margin-top","138px"); //old 153px
				}
			}
			if($("#lpLowSystemMessageDiv").length > 0 && $("#lpLowSystemMessageDiv").css("display") == "block") {
				lpmsgsection = lpmsgsection - $("#lpchatbottomsection").height() - 36;
			} else {
				lpmsgsection = lpmsgsection - $("#lpchatbottomsection").height() - 22;
			}

			/*if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") == "block") {
				lpmsgsection = lpmsgsection - 50;
			} else if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") == "none") {
				lpmsgsection = lpmsgsection;
			} else {
				isRecordMsgExist = sessionMgr.getRecordMsgVal();
				if($("#recordedmsg").length > 0 && (isRecordMsgExist == "true" || isRecordMsgExist == true)) {
					lpmsgsection = lpmsgsection - 50;
				}
			}*/

			var bottomSection = $("#lpchatbottomsection").height();
			//console.log("WIDGET: lpmsgsection: " + lpmsgsection + " -- bottomSection: " + bottomSection + " -- deviceOrientationHeight: " + deviceOrientationHeight);
			$("#lpChatMainMessageSection").css("height", (lpmsgsection + 11) + "px"); // US1137693, US1649698
			$("#lpChatMessagesSection").css("max-height", (lpmsgsection - 4) + "px"); // US1137693, US1649698
			if(!viewMoreHistoryFlag) {
				scrollToBottom(true);
			}
			// setMomentumScrolling();
		} else {
			adjustlpMsgHeight(true);
		}
	}

	/** 
	* Function to adjust the message section height.
	* Created as part of US1137693: Typing Indicator
	*/
	function adjustlpMsgHeight(removetmpMargin) {
		if(widgetOpenStatus){
			adjustEWheight(true);				
		} else {
			var btmsection = 0; 
			// if(deviceOrientationHeight < 420) {
			// 	var chatbody = deviceOrientationHeight - 106; // For RWD Stories
			// 	var lpmsgsection = deviceOrientationHeight - 206; // For RWD Stories
			// } else {
			if($(".res_Small").length > 0) {
				var chatbody = deviceOrientationHeight - 43; // For RWD Stories
				var lpmsgsection = deviceOrientationHeight - 143;  // For RWD Stories
			} else {
				var chatbody = 416;
				var lpmsgsection = 309; // US1137693
			}
			// }
			var heightdiffbwbody = 0; // US1137693
			if($("#lpchatbottomsection").length > 0 && $("#lpchatbottomsection").height() != null) {
				btmsection = $("#lpchatbottomsection").height();
				if(btmsection == 0){
					btmsection = 45;
				}
			}
			//console.log("NO WIDGET: chatbody: " + chatbody + " -- lpmsgsection: " + lpmsgsection + " -- btmsection: " + btmsection + " -- deviceOrientationHeight: " + deviceOrientationHeight);
			if($("#lpLowSystemMessageDiv").length > 0 && $("#lpLowSystemMessageDiv").css("display") == "block") {
				lpmsgsection = chatbody - (btmsection) - 29; // US1137693
				heightdiffbwbody = 30; // US1137693
				$(".customercaretyping").css("bottom", 0);
				$("#lpChatMessagesSection").css("bottom", heightdiffbwbody);
			} else if($("#lpNASystemMessageDiv").length > 0 && $("#lpNASystemMessageDiv").css("display") == "block") {
				lpmsgsection = chatbody - (btmsection) - 29; // US1137693
				heightdiffbwbody = 30; // US1137693
				$(".customercaretyping").css("bottom", 30);
				$("#lpChatMessagesSection").css("bottom", heightdiffbwbody);
			} else {
				lpmsgsection = chatbody - (btmsection) + 1; // US1137693
				$("#lpChatMessagesSection").css("bottom", heightdiffbwbody);
			}
			if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") == "block") {
				/*if($(".res_Small").length > 0) {
					lpmsgsection = lpmsgsection - 63;
				} else{*/
				lpmsgsection = lpmsgsection - 50;
				/*} */
			} else if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") == "none") {
				lpmsgsection = lpmsgsection;
			} else {
				isRecordMsgExist = sessionMgr.getRecordMsgVal();
				if($("#recordedmsg").length > 0 && (isRecordMsgExist == "true" || isRecordMsgExist == true)) {
					lpmsgsection = lpmsgsection - 50; 
				}
			}

			var prevLpMsgSectionHeight = $("#lpChatMainMessageSection").height();
			//$("#lpChatMessagesSection").css("height",lpmsgsection);
			$("#lpChatMainMessageSection").css("height", lpmsgsection + heightdiffbwbody);
			$("#lpChatMessagesSection").css("max-height", lpmsgsection);

            // scroll to the bottom of the messages when the window resizes in small devices
            // $('#currentChat').append('<div>adjustlpMsgHeight called!</div>');
			scrollToBottomOnResize(prevLpMsgSectionHeight);
			if(removetmpMargin != undefined && removetmpMargin) {
				$("#lpChatMainMessageSection").css("margin-top", "0px");
			}
			// setMomentumScrolling();
		}
	}

	/** Function to scroll to the bottom of the messages when the window resizes in small devices */
    function scrollToBottomOnResize(lpMsgSectionHeight) {
        var currOrientation = getWindowOrientation();

        if(isIPhone) { // DE307644: Inappropriate scroll position while turning to landscape mode_iPhones only
            if(currOrientation !== prevOrientation){ // Orientation change detected
                if(currOrientation === 'portrait'){
                    if(isPortScrollPosBottom){ // scroll to bottom if the past scroll position of portrait mode before orientation change is at bottom
                        setTimeout(function(){
                            scrollStatus = false;
			    changeScrollStatus();
                            scrollToBottom(true);
                        }, 500);
                        // $('#currentChat').append('<div>isPortScrollPosBottom, and scrolled bottom!</div>')
                    } else { // if not at the bottom set the actual scroll position of portrait mode before orientation change is at bottom                        
                            var prevScrollPos = iPhonePortraitScrollPos;
                            setTimeout(function(){
                                $("#lpChatMessagesSection").scrollTop(prevScrollPos);
                            }, 500);                            
                    }
                }
                prevOrientation = currOrientation;
            }
        }
        else { //Andriod
            var actualScrollHeight = $( "#lpChatMessagesSection" ).prop('scrollHeight') - lpMsgSectionHeight;
            var scrollPos = $( "#lpChatMessagesSection" ).scrollTop();
            if(actualScrollHeight === Math.floor(scrollPos)) {
                scrollToBottom(true);
            }
        }
    }

	/** Set momentum scrolling properties */
	function setMomentumScrolling() {
		var messagesSectionDiv = document.getElementById('lpChatMessagesSection');
		if (typeof messagesSectionDiv !== "undefined" && null != messagesSectionDiv) {
			if (isIPhone && isIOSChrome) {
				/** For iOS - Chrome - Remove momentum scrolling */
				setTimeout(function() {
					messagesSectionDiv.style['-webkit-overflow-scrolling'] = 'auto';
				}, 5);
			} else if (isIPhone && !isIOSChrome) {
				/** For iOS - Safari - Apply momentum scrolling */
				setTimeout(function() {
					messagesSectionDiv.style['-webkit-overflow-scrolling'] = 'touch';
				}, 5);
			}
		}
	}

    /**
     * When API call failure for any reason, display offline message
     */
    function showAPICallFailure(data, msg) {
        logger.debug("showAPICallFailure", data);
        clearOnClose();
        loadLPomn();
        var errMsg = "";
        if (data.error.msg != undefined) {
            errMsg = data.error.msg;
        } else if (data.error.message != undefined) {
            errMsg = data.error.message;
        } else {
            errMsg = data.error;
        }
        lpChatShowView(lpCWAssist.lpChatMakeOfflineScreenHtml(msg, errMsg), true);
        showChatWizContainer();
    }

    /**
     * When API call failure for any reason, display offline message in a notification
     */
    function showAPICallFailureInPopup(data, msg) {
        logger.debug("showAPICallFailureInPopup", data);
        notificationDialog.open(msg, true);
    }

    /**
     * show offline by survey name
     */
    function showOfflineScreenBySurveyName(pSurveyName) {
        checkOfflineBySurveyName(pSurveyName);
    }

    /**
     * show offline by skill id
     */
    function showOfflineScreenBySkill(pSkill) {
        checkOfflineBySkill(pSkill);
    }

    /**
     * make API call to retrieve offline by skill
     */
    function checkOfflineBySkill(pSkill) {
        clearOnClose();
        if (onInitTimerflag) {
            clearTimeout(onInitTimer);
            onInitTimerflag = false;
        }
        var offlineRequestParam = {
            skill: pSkill,
            success: myChatWiz.showOverrideOfflineScreen,
            error: function(data) {
                showAPICallFailure(data, lpCWTagConst.lpMsg_APICallFailure)
            },
            context: myChatWiz
        }

        logger.debug("checkOfflineBySkill", "requeParam=" + pSkill);
        var failedRequest = chat.getOfflineSurvey(offlineRequestParam);
        if (failedRequest && failedRequest.error) {
            showAPICallFailure(failedRequest, lpCWTagConst.lpMsg_APICallFailure);
        }
    }

    /**
     * make API call to retrieve offline by survey name
     */
    function checkOfflineBySurveyName(pSurveyName) {
        sendErrorAlert("Survey", "checkOfflineBySurveyName:surveyName=" + pSurveyName);
        clearOnClose();
        if (onInitTimerflag) {
            clearTimeout(onInitTimer);
            onInitTimerflag = false;
        }
        logger.debug("checkOfflineBySurveyName", "surveyName=" + pSurveyName);
        var failedRequest = chat.getOfflineSurvey({
            surveyName: pSurveyName,
            success: myChatWiz.showOverrideOfflineScreen,
            error: function(data) {
            	sendErrorAlert("Survey", "checkOfflineBySurveyNameError:surveyName=" + pSurveyName);
                showAPICallFailure(data, lpCWTagConst.lpMsg_APICallFailure)
            },
            context: myChatWiz
        });

        if (failedRequest && failedRequest.error) {
            showAPICallFailure(failedRequest, lpCWTagConst.lpMsg_APICallFailure);
        }
    }

    /**
     * make API call to retrieve exit survey
     */
    function checkForPostChatSurvey() {
		if(ninaCurrentTranscript!="")
		{
			ninaCurrentTranscript='<div class="lpSystemMessageDiv ninaSystemDiv" id="ninaSystemMessage"><div><br/>This chat may be recorded and monitored. For your  <br/>security, click "End Chat" before leaving your computer <br/>unattended or when the chat is complete.</div> <div class="ninaHdrspace">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right corner</div></div>'+ninaCurrentTranscript;
			currentTranscript=ninaCurrentTranscript+currentTranscript;
		}
		logger.debug("currentTranscript--->"+currentTranscript);
        var exitChatSurveyParam = {
            success: myChatWiz.showPostChatSurvey,
            error: myChatWiz.noPostChatSurvey,
            context: myChatWiz
        };

        if (isInterativeChat()) {
            if (exitSurveyNameOverride != "") {
                exitChatSurveyParam.surveyName = exitSurveyNameOverride;
            } else {
                exitChatSurveyParam.skill = skill;
            }
        } else {
            exitChatSurveyParam.surveyName = nonInteractiveChatSurveyNameOverride;
        }

        logger.debug("checkForPostChatSurvey param", exitChatSurveyParam);

        var failedRequest = "";

        if (isInterativeChat()) {
            logger.debug("checkForPostChatSurvey", "interactive chat detected");
            failedRequest = chat.getExitSurvey(exitChatSurveyParam);
        } else {
            logger.debug("checkForPostChatSurvey", "none-interative chat detected");
            chatWinCloseable = true; //allow to close chat window
            failedRequest = chat.getExitSurvey(exitChatSurveyParam);
        }

        if (failedRequest && failedRequest.error) {
            showAPICallFailure(failedRequest, lpCWTagConst.lpMsg_APICallFailure_Exit);
        }
    }

   

    /**
     * handle when offline survey submit button is clicked
     */
    function lpOnOfflineSurveySubmit(data) {
        logger.debug("lpOnOfflineSurveySubmit", "...");
        var question = lpChatGetSurveyAnswers(data);
        var surveyResult = {
            id: getTrimmedValue("lpSurveyID", false),
            question: question
        }
        logger.debug("lpOnOfflineSurveySubmit.surveyResult", surveyResult);
        var submitSurveySuccess = function(result) {
            disposeEndChat();
        }

        var tmpsiteContainer = "";
        if (isFirstChat) {
            tmpsiteContainer = lpSiteContainer;
            logger.debug("chatRequest siteContainer: in offline if condition", tmpsiteContainer);
        } else {
            tmpsiteContainer = "Master";
            logger.debug("chatRequest siteContainer: in offline else condition", tmpsiteContainer);
        }
        var tmpLpVisitorID = sessionMgr.getLPvisitorID();
        logger.debug("lpVisitorSessionId before override ------>", lpVisitorSessionId);
        logger.debug("visitorSessionId from session ------>", tmpLpVisitorID);
        if (tmpLpVisitorID != null && tmpLpVisitorID != '') {
            lpVisitorSessionId = tmpLpVisitorID;
            logger.debug("lpVisitorSessionId after override ------>", lpVisitorSessionId);
        }
        var chatRequest = {
            survey: surveyResult,
            visitorSessionId: lpVisitorSessionId,
            siteContainer: tmpsiteContainer,
            success: submitSurveySuccess,
            error: function(data) {
                showAPICallFailureInPopup(data, lpCWTagConst.lpMsg_APICallFailure_SubmitSurvey)
            },
        };
        var failedRequest = chat.submitOfflineSurvey(chatRequest);
        logger.debug("setting into the session ------>", chat.getSessionKey().split("K")[1]);
        sessionMgr.setLPvisitorID(chat.getSessionKey().split("K")[1]);
        if (failedRequest.error) {
            showAPICallFailureInPopup(failedRequest, lpCWTagConst.lpMsg_APICallFailure_SubmitSurvey);
        }
    }

    /* start chat after submitting pre chat */
    function lpOnPreChatSurveySubmit(data) {
        logger.debug("lpOnPreChatSurveySubmit", data);
        if (false && chatState == chat.chatStates.NOTFOUND && screenState == screenStateType.PRECHATSURVEY) {
            logger.debug("lpOnPreChatSurveySubmit", "with NOT FOUND status");
			sendErrorAlert("cantconnect", "Chat state not found");
            if (offlineSurveyNameOverride != "")
                checkOfflineBySurveyName(offlineSurveyNameOverride);
            else
                checkOfflineBySkill(skill);
        } else {
            var question = lpChatGetSurveyAnswers(data);
			if(question[0] != "undefined" && question[0] != null){
				if(question[0].answer != "undefined")
					lppreChatAnswer=question[0].answer; 
			}
            var surveyResult = {
                id: getTrimmedValue("lpSurveyID", false),
                question: question
            };
            logger.debug("lpOnPreChatSurveySubmit surveyResult", surveyResult);
            $(jqe(lpChatID_lpPreChatMessagesSection)).hide();
            $(jqe(lpChatID_lpPreChatMessagesSection)).remove();

            lpPrepareChat(surveyResult);
        }
    }

    /* start Nina chat after submitting pre chat */
    function lpOnPreChatNinaSurveySubmit(data) {
        logger.debug("lpOnPreChatNinaSurveySubmit", data);
        getMarvinReponse_prechat(data);
        ninaBindEvents(true);
    }
	
	
	

    function getMarvinReponse_prechat(data) {
        chatWinCloseable=false;
       // var question = lpChatGetSurveyAnswers(data);
        //var firstanswer = question[0].answer;
         var firstanswer = data;
    if(scType=="US-PersonalLoans-en-Standard"){
      if(!xiconclicked){
					setmarvinchatActiveCookie(true);
        if(isFirstMarvincall){
					myChatWiz.loadchatMessageSection();
				}
                myChatWiz.sendMarvinresponse('', true, firstanswer,'prechat');
                lastResponseCode = '';                
				}else{
              xiconclicked=false; isNinaChat = false;
       }
    }else{  
		
		var typeAheadintentUUIDVartmp='';
		if(typeAheadintentUUIDVar==0){
			typeAheadintentUUIDVartmp = '';
		}else
		{
			typeAheadintentUUIDVartmp=typeAheadintentUUIDVar;
		}
		var inpStr = '';

		if(isFirstMarvincall){
			inpStr = '{"userId" : "' + bbCookieOverride + '","conversationId" : "",  "intentId" : "greeting", "exp":"'+expansionFlag+'",  "messageId" : "1234XYZ", "unstructured" : {"utterance" : ""},"context" : {"xcut":' + xcutobjOverride + '},"channel" : "livechat"}';
		}

        var tvar=5000;
        $.ajax({
            url: 'https://apigateway.americanexpress.com/servicing/v1/cmchat/livechat',
            headers: {
				'Accept': 'application/json',
                'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e'
            },
            type: "POST",
            contentType: "application/json",
            crossDomain: true,
            data: inpStr,
			xhrFields: {
				withCredentials: true
			},
            success: function(data) {
			if(!xiconclicked){ 		
					setmarvinchatActiveCookie(true);
				if(isFirstMarvincall){
					myChatWiz.loadchatMessageSection();
					getCommonTopicsResults();
				}
				try{
					invokeUILog("Marvin: " + bbCookieOverride, "INFO", "Marvin preChat call Success - Response status: "+data.conversationId);	
				}catch(e){
					invokeUILog("Marvin: " + bbCookieOverride, "INFO", "Marvin preChat call Success - catch: "+e);
				}
                keepSoftKeys = false;
                myChatWiz.sendMarvinresponse(data, true, firstanswer,'prechat');
			}else{
			 xiconclicked=false; isNinaChat = false;
            }	
            },
            async: true,
            timeout: tvar,
            error: function(req, status, err) {
                logger.debug('something went wrong', status, err);
				invokeUILog("Marvin: " + bbCookieOverride, "ERROR", "Marvin preChat call failed - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);	
				if(!xiconclicked){
					setmarvinchatActiveCookie(true);
                if(isFirstMarvincall){
					myChatWiz.loadchatMessageSection();
				}
                keepSoftKeys = false;
                myChatWiz.sendMarvinresponse('', true, firstanswer,'prechat');
                if (req.status == 0) {
                    lastResponseCode = '016';
                    //logger.debug('CCP Escalation, reason=', "Marvin request timed out");
                } else if (req.status > 399 && req.status < 500) {
                    lastResponseCode = '014';
                   // logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                } else {
                    lastResponseCode = '015';
                   // logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                }
				}else{
			 xiconclicked=false; isNinaChat = false;
                }	
            }
        });
    }   
		
    }


    function prechatContinueBtnClick(data) {
        if (!isContinueClicked) {
            isContinueClicked = true;
            myChatWiz.validateSurvey(data, prechatContinueBtnClickvalidated);
        }
    }

    function prechatContinueBtnClickvalidated(data) {
        logger.debug("prechatContinueBtnClickvalidated", data);

        document.getElementById("lpContinueSubmitBtn").style.pointerEvents = 'none';
        document.getElementById("lpNinaTransferChatBtn").style.pointerEvents = 'auto';
        if (typeof document.getElementsByTagName("textarea")[0] != "undefined") {
              document.getElementsByTagName("textarea")[0].disabled = true;
        } else {
            var inpFields = document.getElementsByTagName("input");
            for (var i = 0; i < inpFields.length; i++) {
                if (inpFields[i].getAttribute("type") == "text") {
                    inpFields[i].disabled = true;
                }
            }
        }
        //$("#lpPrivacyStmntBtn").addClass("addFloatleft");
        //$("#lpNinaTransferChatBtn").show();
        //$("#lpNinaTransferChatBtn").addClass("addFloatright");
       // logger.debug("call marvin ");
        getMarvinReponse_prechat(data);
        //ninaBindEvents(true);
    }


    function callRequestChat() {
        marvinResp = false;
        setTimeout(function() {
            establishRequestChat(null);
        }, 600);
        $("#lpNinaTransferChatBtn").hide();
        $("#ninaHeader").css("background-color", "#fff");
        $("#ninaHeader").css("color", "#333333");
        omn_rmassistaction("Click", "LiveChat_EscalateChatToCCP");
        //$(".lpSystemMessageDiv").addClass("ninaSystemDiv");
        isPreChatEscalated = false;
        document.getElementById("lpNinaTransferChatBtn").style.pointerEvents = 'auto';
    }

   
    function getRandomNumber() {
        return Math.floor(Math.random() * (10000000 - 10000 + 1) + 10000);
    }
   
    /* fetch answeres to all questions */
    function lpChatGetSurveyAnswers(data) {
        logger.debug("lpChatGetSurveyAnswers", "...");
        var question = new Array();
        var activeQuestionTemp = new Array();
        var index = 0;
        if (data.survey && data.survey.questions && data.survey.questions.question && data.survey.questions.question.length > 0) {
            for (var i = 0; i < data.survey.questions.question.length; i++) {
                var thisQuestion = data.survey.questions.question[i];
                var chatSurveySectionQDiv = "#lpChatSurveySectionQ" + thisQuestion.order;
                if ($(chatSurveySectionQDiv).is(":visible")) {
                    activeQuestionTemp.push(thisQuestion.id);
                    var id = "#lpSurveyQuestionAns" + thisQuestion.order;
                     var tempQ = '<p>'+thisQuestion.label+'</p>';   
                     tempQ = $(tempQ).text();
                    if ($(id).length) {
                        question[index++] = {                           
                            question:tempQ,
                            answer: lpChatGetAnswer(thisQuestion, thisQuestion.order)
                        };
                    }
                }
            }
        }
        logger.debug("Active Questions ID List Answered", activeQuestionTemp);
        return question;
    }

    /* load chat window */
    function lpPrepareChat(surveyResult) {
        logger.debug("lpPrepareChat", "....");
      //  lpChatShowView(lpCWAssist.lpChatMakeMessageSection(isAudioOn));
		
        //establishRequestChat(surveyResult);
       unregisterEventHandler(lpChatID_lpChatCloseChatBtn, "click", lpChatCloseChatBtnClick);
       unregisterEventHandler(lpChatID_lpChatInputTextField, "keyup", keyChanges);
//	 prepareToConnect(surveyResult,true,false,jwtValue);
        prepareToConnect('',true,false,jwtValue,visitorIdForLE,sessionId, interactionContextId,cid,eid,skill);

        bindAllButtonEvents();
    }

    function convertTorate(csatresp){

    var rate = "5";
    if(csatresp=="Excellent") 
      rate="5";
    else if(csatresp=="Very Good") 
      rate="3";
    else if(csatresp=="Good") 
      rate="3";
    else if(csatresp=="Fair") 
      rate="3";
    else if(csatresp=="Poor")
      rate="3";
   
    return rate;
 
    } 	
	
	function convertToFCR(fcrresp){

    var rate = "1";
    if(fcrresp=="One") 
      rate="1";
    else if(fcrresp=="Two") 
      rate="2";
    else if(fcrresp=="Three") 
      rate="3";
    else if(fcrresp=="Four or more") 
      rate="4";
    else if(fcrresp=="Still unresolved")
      rate="5";
    else if(fcrresp=="Do not remember")
      rate="6";
   
    return rate;
 
    } 	
	
	function convertCCPRating(ccprate){
	var rate = "5";
    if(ccprate=="Excellent") 
      rate="5";
    else if(ccprate=="Very Good") 
      rate="4";
    else if(ccprate=="Good") 
      rate="3";
    else if(ccprate=="Fair") 
      rate="2";
    else if(ccprate=="Poor")
      rate="1";
   
    return rate;
	}
	
    /**
     * handle when exit survey submit button is clicked
     */
    function lpPostChatSurveySubmit(data) {
        logger.debug("lpPostChatSurveySubmit", "....");
		currentTranscript="";
		ninaCurrentTranscript="";
        var question = lpChatGetSurveyAnswers(data);
        var csatresp=question[0].answer;  
        if(expansionFlag=="credit"){
		   if(question[1].answer=="Other (please specify)")
		   {
			   	csatresp=question[3].answer;
		   }else{	
				csatresp=question[2].answer; 			
		   }
		}   
        csatresp = convertTorate(csatresp);
		 var rtfscore = question[2].answer;
		 if(expansionFlag=="credit"){
			 if(question[1].answer=="Other (please specify)"){
				 rtfscore = question[5].answer;		
			 }else{
				rtfscore = question[4].answer;			
			 }
		}
        rtfscore = rtfscore.split(" ")[0]
		
		var fcrscore;
		 if(expansionFlag=="credit"){
           fcrscore = question[0].answer;			
		}else{
			fcrscore = question[11].answer;
		}
        fcrscore = convertToFCR(fcrscore);
		 
		//var surveyRes = '{"csat":"'+csatresp+'","rtfscore":"'+rtfscore+'"}';
		var surveyRes = '{"csat":"'+csatresp+'","rtfscore":"'+rtfscore+'","fcrscore":"'+fcrscore+'"}';
         //$( "#sendexitsurvey" ).trigger( "click",JSON.stringify(question));  
$('#sendofflinemsg').trigger( "click",surveyRes);
       myChatWiz.disposeEndChatLE(question);

         /*   var surveyResult = {
                id: getTrimmedValue("lpSurveyID", false),
                question: question
            }

            //logger.debug("lpPostChatSurveySubmit.surveyResult", surveyResult);
            var submitSurveySuccess = function(result) {
                disposeEndChat();
            }

            var exitSurveyParam = {
                skill: skill,
                survey: surveyResult,
                context: myChatWiz,
                success: submitSurveySuccess,
                error: function(data) {
                    showAPICallFailureInPopup(data, lpCWTagConst.lpMsg_APICallFailure_SubmitSurvey)
                },
            };

            exitSurveyParam.visitorSessionId = lpVisitorSessionId;

            logger.debug("exitSurvey parameters: ", exitSurveyParam);
            var failedRequest = chat.submitExitSurvey(exitSurveyParam);
            if (failedRequest.error) {
                showAPICallFailureInPopup(failedRequest, lpCWTagConst.lpMsg_APICallFailure_SubmitSurvey);
            }*/
       
    }

    /**
     * update visitor id
     */
    function setGlobalVisitorId(data) {
        logger.debug("setGlobalVisitorId visitorId=", visitorId);
        if (visitorId) {
            logger.debug("setGlobalVisitorId visitorId=", visitorId + " already exist");
            return;
        }

        if (data && data.info && data.info.visitorId) {
            visitorId = data.info.visitorId;
            logger.debug("setGlobalVisitorId visitorId[1]",
                data.info.visitorId);
        } else if (data && data.visitorId) {
            visitorId = data.visitorId;
            logger.debug("setGlobalVisitorId visitorId[2]", data.visitorId);
        }

        sessionMgr.setVisitorID(visitorId);
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "SETLPPARAMS2",
            "vID": visitorId
        });
        scrollToBottom();
    }

    /**
     * handle when prechat survey submit button is clicked
     */
    function prechatSurveyBtnClick(data) {
        /*logger.debug("prechatSurveyBtnClick", "submitted");
        if (notificationDialog.isOpen()) {
            logger.debug("showPreChatSurvey", "notification is on");
            notificationDialog.close();
        }
        logger.debug("prechatSurveyBtnClick", "before sending message");*/
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "UIDESIGN",
            "value": "HIDECLOSEBTN"
        });
        myChatWiz.validateSurvey(data, lpOnPreChatSurveySubmit);
		
    }


    function prechatNinaSurveyBtnClick(data) {
        logger.debug("prechatNinaSurveyBtnClick", "submitted");
        if (notificationDialog.isOpen()) {
            logger.debug("showPreChatSurvey", "notification is on");
            notificationDialog.close();
        }
        logger.debug("prechatSurveyBtnClick", "before sending message");
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "UIDESIGN",
            "value": "HIDECLOSEBTN"
        });
        myChatWiz.validateSurvey(data, lpOnPreChatNinaSurveySubmit);
    }


    /**
     * preSurvey Submit textarea on enter key press
     */
    function preSurveySubmitOnEnterKey(data, event) {
        event = event || window.event;
        var keyEle = event.keyCode || event.which;
        if (keyEle == 13) {
            if (nuanceFlowFlagOverrride.toUpperCase() == "AUTOMATION" || nuanceFlowFlagOverrride == "P2") {
                if ($(".typeahead").length && typeAheadCurrentSelection != -1) {
                    tid = "#tahead" + typeAheadCurrentSelection;
                    $("#lpSurveyQuestionAns0").val($(tid).html());
                    typeAheadCurrentSelection = -1;
                    $(".typeahead").remove();
                } else {
                    prechatContinueBtnClick(data);
                }
            } else {
                prechatSurveyBtnClick(data);
            }
        } else {
            if (nuanceFlowFlagOverrride.toUpperCase() == "AUTOMATION" || nuanceFlowFlagOverrride == "P1" || nuanceFlowFlagOverrride == "P2") {
                if (keyEle == 38) {
                    if (typeAheadCurrentSelection == -1 || typeAheadCurrentSelection == 0)
                        typeAheadCurrentSelection = typeAheadResultCount - 1;
                    else
                        typeAheadCurrentSelection = typeAheadCurrentSelection - 1;
                    tid = "#tahead" + typeAheadCurrentSelection;
                    $(".typeaheadresult").removeClass("typeaheadresulthover");
                    $(tid).addClass("typeaheadresulthover");
                    scrolluplimit = $(".typeahead").offset().top;
                    if (scrolluplimit > $(tid).offset().top) {
                        tempScrollTop = $(".typeahead").scrollTop();
                        $(".typeahead").scrollTop(tempScrollTop - 30);
                    }
                    if (typeAheadCurrentSelection == 0) {
                        $(".typeahead").scrollTop(0);
                    } else if (typeAheadCurrentSelection == typeAheadResultCount - 1) {
                        lastelemScroll = document.getElementsByClassName("typeahead")[0].scrollHeight - document.getElementsByClassName("typeahead")[0].clientHeight;
                        $(".typeahead").scrollTop(lastelemScroll);
                    }
                } else if (keyEle == 40) {
                    if (typeAheadCurrentSelection == (typeAheadResultCount - 1))
                        typeAheadCurrentSelection = 0;
                    else
                        typeAheadCurrentSelection = typeAheadCurrentSelection + 1;
                    tid = "#tahead" + typeAheadCurrentSelection;
                    $(".typeaheadresult").removeClass("typeaheadresulthover");
                    $(tid).addClass("typeaheadresulthover");
                    scrolldownlimit = $(".typeahead").offset().top + 50;
                    if ($(tid).offset().top > scrolldownlimit) {
                        tempScrollTop = $(".typeahead").scrollTop();
                        $(".typeahead").scrollTop(tempScrollTop + 30);
                    }
                    if (typeAheadCurrentSelection == 0) {
                        $(".typeahead").scrollTop(0);
                    }
                } else {
                    searchStr = $("#lpSurveyQuestionAns" + 0).val().trim();

                    if (searchStr.length > 3) {
                        gettypeahead(searchStr)
                    } else {
                        $(".typeahead").remove();
                        typeAheadCurrentSelection = -1;
                        typeAheadintentUUIDVar = 0;
                        if (searchStr.length > 0)
                            $("#lpChatSurveySectionQError0").hide();
                    }
                }
            }

        }
    }

    function selecttheOptionbyclick(thiselem) {
        //logger.debug(thiselem.innerHTML + "::" + thiselem.className);
        typeAheadintentUUIDVar = thiselem.className;
        if (typeAheadintentUUIDVar.indexOf("intent_") !== -1) {
            typeAheadintentUUIDVar = typeAheadintentUUIDVar.replace("typeaheadresult intent_", "");
        }
        $("#lpSurveyQuestionAns0").val(thiselem.innerHTML);
        typeAheadCurrentSelection = -1;
        $(".typeahead").remove();
    }

	//function to select common topics result
	function selectCommonOptionbyclick(thiselem,data) {
      try{
		logger.debug(thiselem);
		var text = $(thiselem).find("span").html();
		var thisclass = $(thiselem).attr("class");
		var intentOnly = thisclass.split(" ")[1];
		intentOnly = intentOnly.replace("intent_","");
        var indicator = thisclass.split(" ")[2];
		indicator = indicator.replace("indicator_","");    
        var valABeforeCCMasking = text;
        text = ccMasking(text);
        //makeNinaQuery(text);
        if (text !== "") {
            if (valABeforeCCMasking == text) {
                 makeMarvinQuery(text, intentOnly+'|'+indicator,'commonTopics');
            }
            isolateLinecreation(valABeforeCCMasking, text);
        }
		$(jqe(lpChatID_lpChatInputTextField)).val("");
		//removeCommonTopics();
		//hideCommonTopics();
		removeESandCT();
		if($("#recordedmsg").length > 0){
			lpChatWidget.rmRecmsgOnFirstMsg();
        }
        $('#lpChatInputTextField').blur();
	  }catch(e){}	
	}
	
	//function to remove common topics
	function removeCommonTopics(){
		if($("#commontopics").length > 0 && lastResponseCode !== "020"){
			isCommonTopicsFirstDisplayed = true;
			unregisterEventHandler(lpChatID_lpChatInputTextField, "click", showCommonTopics);
			unregisterEventHandler(lpChatID_lpChatInputTextField, "blur", hideCommonTopics);
			unregisterEventHandler("commontopics", "mouseenter", removeblurEventCT);
			unregisterEventHandler("commontopics", "mouseleave", addblurEventCT);
			$("#commontopics").remove();
			scrollStatus = false;
			changeScrollStatus();
			adjustlpMsgHeight();
			lpChatWidget.scrollToBottomLE();
		}
	}
	
	//function to select elastic result
	function selectElasticOptionbyclick(thiselem,data) {
		logger.debug(thiselem);
		var text = $(thiselem).find("a").text();
		var thisclass = $(thiselem).attr("class");
		var intentOnly = thisclass.split(" ")[1];
		intentOnly = intentOnly.replace("intent_","");
        var valABeforeCCMasking = text;
        text = ccMasking(text);
        //makeNinaQuery(text);
        if (text !== "") {
            if (valABeforeCCMasking == text) {
                 makeMarvinQuery(text, intentOnly,'elasticSearch');
            }
            isolateLinecreation(valABeforeCCMasking, text);
        }
		$(jqe(lpChatID_lpChatInputTextField)).val("");
		//hideElasticResults();
		removeESandCT();
		if($("#recordedmsg").length > 0){
			lpChatWidget.rmRecmsgOnFirstMsg();
		}
        $('#lpChatInputTextField').blur();
	}

    function gettypeahead(searchStr) {
        //var inputStr='inputText={"queryText" : "'+searchStr+'"}';
        var inputStr = '{"queryText" : "' + searchStr + '"}';
        //var url = 'https://wsgcatservices-e2.americanexpress.com/ngsp-msl-service/askamex/search';
        // var url = 'https://wsgcatservices-e1.americanexpress.com/ngsp-msl-service/askamex/search';
        var url = 'https://apigateway.americanexpress.com/servicing/v1/cmchat/search';
        var typexhr = $.ajax({
            url: url,
            type: "POST",
            headers: {
                'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e'
            },
            contentType: "application/json",
            crossDomain: true,
            data: inputStr,
            success: function(data) {
                myChatWiz.sendTypeAheadresponse(data);
            },
            error: function(e) {

            }
        });

    }
	
	//function to show commontopics results when user clicked or focused in inputbox for first time
	function getCommonTopicsResults() {
		if(expansionFlag == ""){
			expansionFlag = sessionMgr.getExpansionFlagval(); 
		}
		var inputStr = '{"channel":["livechat"],"size":4,"publicGuid":"'+bbCookieOverride+'","experience": ["'+expansionFlag+'"]}';
		var url = 'https://apigateway.americanexpress.com/servicing/v2/cmchat/top_queries/inquiry_results';
        var typexhr = $.ajax({
            url: url,
            type: "POST",
            headers: {
                'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e'
            },
            contentType: "application/json",
            crossDomain: true,
            data: inputStr,
            success: function(data) {
                myChatWiz.makeCommonTopics(data);
            },
            error: function(req, status, err) {
				invokeUILog("Marvin: " + bbCookieOverride, "ERROR", "Inquiry Results - Unable to get common topics - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);
            }
        });

    }

	//function to show elastic results when user typed in inputbox
	function getElasticResults(searchStr) {
        var inputStr = '{"queryText" : "' + searchStr + '","size":5,"channel" : ["livechat"]}';
		var url = 'https://apigateway.americanexpress.com/servicing/v2/cmchat/autocomplete/search_results';
        var typexhr = $.ajax({
            url: url,
            type: "POST",
            headers: {
                'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e'
            },
            contentType: "application/json",
            crossDomain: true,
            data: inputStr,
            success: function(data) {
                myChatWiz.showElasticResults(data);
            },
            error: function(req, status, err) {
				// invokeUILog("Marvin: " + bbCookieOverride, "ERROR", "Elastic Search Results - Unable to get elastic search results - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);
				//console.log("Elastic Search Results - Unable to get elastic search results - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);
            }
        });

    }

    /**
     * preSurvey Submit textarea on enter key press
     */
    function preSurveySubmitNumberOnEnterKey(data, event) {
        event = event || window.event;
        var keyEle = event.keyCode || event.which;
        if (keyEle > 31 && (keyEle < 48 || keyEle > 57) && !(keyEle == 45 || keyEle == 43 || keyEle == 46 || keyEle == 13)) {
            event.preventDefault();
        }
        if (keyEle == 13) {
            prechatSurveyBtnClick(data);
        }
    }
    /**
     * show options list when click on selectBox in postChatSurvey screen
     */
    function lpHighlightliOption(ctx) {
        var eleOpt = $(ctx).siblings('ul').children('li').first().children('a');
        if ($(ctx).siblings('ul').children('li').children('a').hasClass('lpLiBgColor')) {
            eleOpt.focus();
            //eleOpt.removeClass("lpLiBgColor");
        } else {
            eleOpt.focus();
            //eleOpt.addClass("lpLiBgColor");
        }
    }

    function lpShowOptionsList(e) {
        if (e.currentTarget.nextSibling.style.display === 'none') {
            $(".ioaOptionsList").css("display", "none");
            e.currentTarget.nextSibling.style.display = "block";
            lpHighlightliOption(this);
        } else {
            e.currentTarget.nextSibling.style.display = "none";
        }
    }

    /**
     * show options list when keyup event accessibility on selectBox in postChatSurvey screen
     */
    function lpMoveDownKeyEvent(ctx) {
        var ele = $(ctx).closest('ul').find('.lpLiBgColor');
        var num = $(ctx).closest('.lpAnswerOptionSelect').find('li').length;
        var curInd = ele.parent().index();
        var nxtInd;
        if (num - 1 === curInd) {
            nxtInd = 0;
        } else {
            nxtInd = ++curInd;
        }
        $(ctx).closest('ul').find('a').removeClass('lpLiBgColor');
        $(ctx).closest('.lpAnswerOptionSelect').find('li').eq(nxtInd).find('a').addClass('lpLiBgColor');
    }

    function lpMoveUpKeyEvent(ctx) {
        var ele = $(ctx).closest('ul').find('.lpLiBgColor');
        var num = $(ctx).closest('.lpAnswerOptionSelect').find('li').length;
        var curInd = ele.parent().index();
        var nxtInd;
        if (curInd === 0) {
            nxtInd = num - 1;
        } else {
            nxtInd = --curInd;
        }
        $(ctx).closest('ul').find('a').removeClass('lpLiBgColor');
        $(ctx).closest('.lpAnswerOptionSelect').find('li').eq(nxtInd).find('a').addClass('lpLiBgColor');
    }

    function lpGetValueOfAnch(ctx) {
        var curAnc = $(ctx).closest('ul').find('.lpLiBgColor');
        var val = curAnc.html();
        curAnc.closest('.lpAnswerOptionSelect').find('.lpSelectedOption').children('.lpAnchLinkTxt').html(val);
        curAnc.closest('.lpAnswerOptionSelect').find('.lpSelectedOption').siblings('ul').css('display', 'none');
        $(ctx).closest('ul').siblings('a').focus();
    }

    function lpGetValueOfAnchOnClick(ctx) {
        var curAncClk = $(ctx);
        var valClk = $(ctx).html();
        curAncClk.closest('.lpAnswerOptionSelect').find('.lpSelectedOption').children('.lpAnchLinkTxt').html(valClk);
        curAncClk.closest('.lpAnswerOptionSelect').find('.lpSelectedOption').siblings('ul').css('display', 'none');
        $(ctx).closest('ul').find('a').removeClass('lpLiBgColor');
        $(ctx).addClass('lpLiBgColor');
        $(ctx).closest('ul').siblings('a').focus();
        //lpselectedAnc = $(ctx).index();
    }

    function lpSelectOptionsListOnKeyEvent(e) {
        logger.debug("lpSelectOptionsListOnKeyEvent------", e);
        e.preventDefault();
        if (e.keyCode == 40) {
            lpMoveDownKeyEvent(this);
        } else if (e.keyCode == 38) {
            lpMoveUpKeyEvent(this);
        } else if (e.keyCode == 13) {
            lpGetValueOfAnch(this);
        }
    }


    /**
     * hide options list when click on body of chat window
     */
    function lpHideOptionsListOnClick(e) {
        if (!e)
            e = window.event;
        var elemTarget = e.target.querySelectorAll(".ioaOptionsList");
        if (e.target.className !== "lpSelectedOption" && e.target.className !== "ioaOptionsList") {
            for (var i = 0; i < elemTarget.length; i++) {
                if (e.target.querySelectorAll(".ioaOptionsList")[i].style.display === 'block') {
                    e.target.querySelectorAll(".ioaOptionsList")[i].style.display = 'none';
                }
            }
        }
    }
    /**
     * handle when offline survey submit button is clicked
     */
    function offlineSurveyBtnClick(data) {
        logger.debug("offlineSurveyBtnClick", "submitted");
        myChatWiz.validateSurvey(data, lpOnOfflineSurveySubmit);
    }

    /**
     * handle when exit survey submit button is clicked
     */
    function exitSurveyBtnClick(data) {
        logger.debug("exitSurveyBtnClick", "submitted");
        myChatWiz.validateSurvey(data, lpPostChatSurveySubmit);
    }

    function focusclosebutton(e) {
        e = e || window.event;
        var key = e.keyCode || e.which;
        if (e.shiftKey && key == "9") {
            sendPostMessage({
                "lpEmbChatWiz": "LPNVPF",
                "CMD": "UIDESIGN",
                "value": "FOCUSONCLOSEBTN"
            });
        }
    }

    function getQueryStrings() {
        var assoc = {};
        var decode = function(s) {
            return decodeURIComponent(s.replace(/\+/g, " "));
        };
        var queryString = location.search.substring(1);
        var keyValues = queryString.split('&');

        for (var i in keyValues) {
            var key = keyValues[i].split('=');
            if (key.length > 1) {
                assoc[decode(key[0])] = decode(key[1]);
            }
        }

        return assoc;
    }
	
	function showChatTranscript(){
		var transcriptHTML = lpCWAssist.lpChatMakeChatTranscriptSection();
		
		$("#lpChatTranscriptSection").html(transcriptHTML);
		$(".lpSystemMessageDiv2").html(currentTranscript);
		
		$( ".lpSystemMessageDiv2 .lpChatInfoText" ).first().addClass( "chatinfofirst" );
		$( ".lpSystemMessageDiv2 .lpChatInfoText" ).last().addClass( "chatinfolast" );
		$("#lpPreChatMessagesSection").hide();
		$("#lpChatTranscriptSection").show();

		/*var agentMessages = $(".lpPurpleBg");
		for (var j = 0; j < agentMessages.length; j++) {
		aLinks = agentMessages[j].getElementsByTagName('a');
		
       	 for (var i = 0; i < aLinks.length; i++) {
            		aLinks[i].style.pointerEvents = 'none';
            		aLinks[i].style.color = 'gray';
       	 }
		}*/	

		
		/*var aLinks = $("#lpChatTranscriptSection a");
        for (var i = 0; i < aLinks.length; i++) {
            aLinks[i].style.pointerEvents = 'none';
            aLinks[i].style.color = 'gray';
        }*/
	
		var cLinks = $("#lpChatTranscriptSection .choicelinks");
        for (var i = 0; i < cLinks.length; i++) {
            cLinks[i].style.pointerEvents = 'none';
            cLinks[i].style.color = 'gray';
        }
	
		unregisterEventHandler("lpBacktoSurvey", "click", function() {
            showSurveyscreen();
        });
        registerEventHandler("lpBacktoSurvey", "click", function() {
            showSurveyscreen();
        });
		
		unregisterEventHandler(lpChatID_lpChatMenuItemFontDecreaseBtn, "click", decreaseFontSize);
        unregisterEventHandler(lpChatID_lpChatMenuItemFontIncreaseBtn, "click", increaseFontSize);

        registerEventHandler(lpChatID_lpChatMenuItemFontDecreaseBtn, "click", decreaseFontSize);
        registerEventHandler(lpChatID_lpChatMenuItemFontIncreaseBtn, "click", increaseFontSize);
		
		unregisterEventHandler("lpPrivacyStmntBtn", "click", lpCWAssist.openPrivacyStmnt);
        registerEventHandler("lpPrivacyStmntBtn", "click", lpCWAssist.openPrivacyStmnt);
		
	}

	function showSurveyscreen(){
		$("#lpChatTranscriptSection").hide();
		$("#lpPreChatMessagesSection").show();
		unregisterEventHandler("lpPrivacyStmntBtn", "click", lpCWAssist.openPrivacyStmnt);
        registerEventHandler("lpPrivacyStmntBtn", "click", lpCWAssist.openPrivacyStmnt);
	}
		
	//OnKeyUp Changes for Common Topics
	function focusOnUpDownKeysCommTopicsHdlr(e){
		e = e || window.event;
		var key = e.keyCode || e.which;
		if(key == '38'){
			e.preventDefault();
			removeblurEventCT();
			$(".commontopicresult").last().focus().addClass("commontopicresult-focus");
		}
	}
	
	//OnKeyUp Changes for Elastic Search
	function focusOnUpDownKeysElstcSrchHdlr(e){
		e = e || window.event;
		var key = e.keyCode || e.which;
		if(key == '38'){
			e.preventDefault();
			$(".elasticresult").last().focus().addClass("elasticresult-focus");
		}
	}
	//function to show common topics
	function showCommonTopics(){
		var text = getTrimmedValue(lpChatID_lpChatInputTextField, false);
		if(!isCommonTopicsFirstDisplayed && (text == "")){
			if($("#commontopics").length > 0 && $(".commontopicresult").length > 0 && $("#commontopics").css("display") == "none" && lastResponseCode === "020"){
				$("#commontopics").show();
				//OnKeyUp Changes for Common Topics
				$(jqe(lpChatID_lpChatInputTextField)).on("keyup",focusOnUpDownKeysCommTopicsHdlr);
				scrollStatus = false;
				changeScrollStatus();
				adjustlpMsgHeight();
				lpChatWidget.scrollToBottomLE();
			}
		}
	}
	
	//set the record message cookie
	function setRecMonitorCk(isrec){
		sendPostMessage({
		  "lpEmbChatWiz": "LPNVPF",
		  "CMD": "CONTROL",
		  "value": "SET_RECMONITOR",
		  "ckValue": isrec
	  });
	}
	
	//set the record message cookie
	function setLestateCk(state){
		sendPostMessage({
		  "lpEmbChatWiz": "LPNVPF",
		  "CMD": "CONTROL",
		  "value": "SET_LESTATE",
		  "ckValue": state
	  });
	}
	
	//function to hide common topics
	function hideCommonTopics(){
			if($("#commontopics").length > 0 && $("#commontopics").css("display") == "block"){
				//OnKeyUp Changes for Common Topics
				$(jqe(lpChatID_lpChatInputTextField)).off("keyup",focusOnUpDownKeysCommTopicsHdlr);
				$("#commontopics").hide();
				scrollStatus = false;
				changeScrollStatus();
				adjustlpMsgHeight();
				lpChatWidget.scrollToBottomLE();
			}
	}
	
	function removeSearchResults(){
		isFirstMsgSent = true;
		sessionMgr.setFirstMsgVal(isFirstMsgSent);
        if($("#commontopics").length > 0 && lastResponseCode !== "020") {
		removeCommonTopics();
        }
		    hideCommonTopics();
					//$("#commontopics").remove();
        if ($("#elasticresults").length >0 && lastResponseCode !== "020")
		$("#elasticresults").remove();
        hideElasticResults();

	    $(jqe(lpChatID_lpChatInputTextField)).off("keyup",focusOnUpDownKeysCommTopicsHdlr);
	    $(jqe(lpChatID_lpChatInputTextField)).off("keyup",focusOnUpDownKeysElstcSrchHdlr);
				adjustlpMsgHeight();
		lpChatWidget.scrollToBottomLE();
	}
	
	function removeESandCT(){
		  isRecordMsgExist = false;
		  sessionMgr.setRecordMsgVal(isRecordMsgExist);
		  setRecMonitorCk(isRecordMsgExist);
		  removeSearchResults();
       }	
	//function to remove blur event on commontopics
	function removeblurEventCT(){
		unregisterEventHandler(lpChatID_lpChatInputTextField, "blur", hideCommonTopics);
	}
	
	//function to add blur event on commontopics
	function addblurEventCT(){
		unregisterEventHandler(lpChatID_lpChatInputTextField, "blur", hideCommonTopics);
		registerEventHandler(lpChatID_lpChatInputTextField, "blur", hideCommonTopics);
              $("#lpChatInputTextField").focus(); 
	}
	
	//function to add blur event on commontopics when mouse leaves commontopics and to support if any of the intent is focused
	function addblurEventOnMLeaveCT(e){
		e = e || window.event;
		var target = $(this);
		unregisterEventHandler(lpChatID_lpChatInputTextField, "blur", hideCommonTopics);
		registerEventHandler(lpChatID_lpChatInputTextField, "blur", hideCommonTopics);
		$(".commontopicresult").removeClass("commontopicresult-focus");
		$("#lpChatInputTextField").focus(); 
	}
	
    /************************** EXPOSURE METHODS  **********************/

    myChatWiz.sendTypeAheadresponse = function(data) {

        //data = JSON.parse(data);
       // logger.debug('sendTypeAheadresponse ::' + data.results.length);
        typeAheadResultCount = data.results.length;

        $(".typeahead").remove();
        typeAheadCurrentSelection = -1;
        typeAheadintentUUIDVar = 0;
        if (typeAheadResultCount > 0) {
            $("#lpSurveyQuestionAns0").after("<div class='typeahead'></div>");

            for (i = 0; i < data.results.length; i++) {
                tid = "tahead" + i;
                record = data.results[i];
                intentUUIDVar = "";
                if (record.intentUUID !== "")
                    intentUUIDVar = ' intent_' + record.intent;
                $(".typeahead").append("<div id='" + tid + "' class='typeaheadresult" + intentUUIDVar + "'>" + record.askAmexQuery + "</div>");
                unregisterEventHandler(tid, "click", function(event) {
                    selecttheOptionbyclick(this);
                });
                registerEventHandler(tid, "click", function(event) {
                    selecttheOptionbyclick(this);
                });
            }
        }
    }
	
	//function to make common topics results in message section
	 myChatWiz.makeCommonTopics = function(responseData) {
        var experimentIndicator = responseData.experiment_indicator; 
        var data = responseData.intents;
		$(".commontopicresult").remove();
        if (data.length > 0) {
            for (i = data.length-1; i >= 0; i--) {
                tid = "tcommon" + i;
                record = data[i];
                intentUUIDVar = "";
                if (record.intentUUID !== "")
                    intentUUIDVar = ' intent_' + record.intent + ' indicator_' + experimentIndicator;
                $(".commontopics").append("<div id='" + tid + "' class='commontopicresult" + intentUUIDVar + "' tabIndex='0'><span>" + record.askAmexQuery + "</span></div>");
                unregisterEventHandler(tid, "click", function(event) {
                    selectCommonOptionbyclick(this,data);
                });
                registerEventHandler(tid, "click", function(event) {
                    selectCommonOptionbyclick(this,data);
                });
            }
			if(deviceBucket !== "Small"){
			//OnKeyUp Changes for Common Topics - Start
			$(".commontopicresult").off('keyup keydown mouseover').off('focus').off('blur'); //US1250803
			$(".commontopicresult").on('keyup keydown mouseover',function(e){ //US1250803
				e.preventDefault();
				if(e.type === "mouseover"){ 
					removeblurEventCT();//focusOnMouseOverCommTopicsHdlr();
				}
				keyUpDownEventHandler(e,this,'.commontopicresult',selectCommonOptionbyclick);
			}).on('focus',function(e){
				removeblurEventCT();
				//$(".commontopicresult").removeClass("commontopicresult-focus");
				//$(this).addClass("commontopicresult-focus");
			}).on('blur',function(e){
				//$(".commontopicresult").removeClass("commontopicresult-focus");
				//console.log("commontopicresult blurred "+e.type);
				if($(this).attr("class").indexOf("commontopicresult-focus") != -1){
					addblurEventCT();
					$(this).removeClass("commontopicresult-focus");
					hideCommonTopics();
				}
				/*if(key != 40 && key != 38){
					addblurEventCT();
					hideCommonTopics();
					console.log("commontopicresult blurred "+e.type);
				}*/
			});
			//OnKeyUp Changes for Common Topics - End
            }
			
        }
	 }
	
	//function to display elastic results in message section
	 myChatWiz.showElasticResults = function(data) {
		logger.debug(data);
		elasticResultCount = data.length;
		if(elasticResultCount == 0)
			$("#elasticresults").hide();
		scrollStatus = false;
		changeScrollStatus();
		adjustlpMsgHeight();
        $(".elasticresults").remove();
         if (elasticResultCount > 0 && lastResponseCode === "020") {
            $("#elasticresults").append("<div class='elasticresults'></div>");

            for (i = data.length-1; i >= 0; i--) {
                tid = "telastic" + i;
                record = data[i];
                intentUUIDVar = "";
                if (record.intentUUID !== "")
                    intentUUIDVar = ' intent_' + record.intent;
                $(".elasticresults").append("<div id='" + tid + "' class='elasticresult" + intentUUIDVar + "' tabIndex='0'><a href='#'>" + record.askAmexQuery + "</a></div>");
                unregisterEventHandler(tid, "click", function(event) {
                    selectElasticOptionbyclick(this,data);
                });
                registerEventHandler(tid, "click", function(event) {
                    selectElasticOptionbyclick(this,data);
                });
            }
            if(deviceBucket !== "Small") {
                //OnKeyUp Changes for elastic search - Start 
                $(".elasticresult").off('keyup keydown mouseover').off('blur'); //US1250803
                $(".elasticresult").on('keyup keydown mouseover',function(e){ //US1250803
                    e.preventDefault(); 
                    keyUpDownEventHandler(e,this,'.elasticresult',selectElasticOptionbyclick);
                }).on('blur',function(e){
                    if($(this).attr("class").indexOf("elasticresult-focus") != -1){ 
                        $(".elasticresult").removeClass("elasticresult-focus");  
                    }
                }); 
            }
			/*.on('focus',function(e){
				$(".elasticresult").removeClass("elasticresult-focus");
				$(this).addClass("elasticresult-focus");
			})*/
			$(jqe(lpChatID_lpChatInputTextField)).on("keyup",focusOnUpDownKeysElstcSrchHdlr);
			//OnKeyUp Changes for elastic search - End
			 $("#elasticresults").show();
			 var text = getTrimmedValue(lpChatID_lpChatInputTextField, false);
			 if(text == ""){
				 $("#elasticresults").hide();
				 $(".elasticresults").remove();
				 $(jqe(lpChatID_lpChatInputTextField)).off("keyup",focusOnUpDownKeysElstcSrchHdlr);
			 }
			 scrollStatus = false;
			 changeScrollStatus();
			 adjustlpMsgHeight();
			 lpChatWidget.scrollToBottomLE();
        }
	 }
	 
	 //OnKeyUp Changes  for Elastic Search & Common Topics - Start
	 function keyUpDownEventHandler(e,thisEle,targetClass,selectOptionOnEnter){
		 var target = $(thisEle);
		 var tClass = $(targetClass);
		 var focusCls = (targetClass == ".commontopicresult") ? "commontopicresult-focus" : "elasticresult-focus";
		e = e || window.event;
		//console.log("prevented default");
		var key = e.keyCode || e.which;
		if(e.type == 'mouseover'){
				tClass.removeClass(focusCls);
				target.focus().addClass(focusCls);
		}		
		else if(e.type == 'keyup'){
			if(key == 38 || key == 40 || key == 13){
				target.removeClass(focusCls);
			}
			switch (key) {
				case 38:
						if(target.is(tClass.first())){
							target.addClass(focusCls);
						}
						else
							target.prev().focus().addClass(focusCls);
					break;
				case 40:
						if(target.is(tClass.last()))
						{
							$(jqe(lpChatID_lpChatInputTextField)).focus();
							if(targetClass == ".commontopicresult"){
								addblurEventCT();
							} 
						}
						else
							target.next().focus().addClass(focusCls);
					break;
				case 13:
						selectOptionOnEnter(thisEle);
					break;
			}	
		}else if(e.type == 'keydown'){
			//console.log("This is key down!!!")
			//commented below code to fix Common Topics/Elastic Search Double highlight issue
			
		}
	}
	//OnKeyUp Changes  for Elastic Search & Common Topics - End
	
    myChatWiz.sendSCIresponse = function(data) {
        sciCode = data.TalkAgentResponse['@SCI'];
        ninachatresponse = data.TalkAgentResponse.Display.OutText['#text'];
        var line = createLine({
            by: 'Automated Assistant',
            text: ninachatresponse,
            source: 'nina',
            time: new Date().toString()
        });
        addLineToDom(line, false);
        scrollToBottom();

    }

    myChatWiz.sendNinaresponse = function(data) {
        ninachatresponse = data.TalkAgentResponse.Display.OutText['#text'];
        var line = createLine({
            by: 'Automated Assistant',
            text: ninachatresponse,
            source: 'nina',
            time: new Date().toString()
        });
        addLineToDom(line, false);
        scrollToBottom();
    }

    myChatWiz.sendNinaHistory = function(data) {
        var ninaSuccessCode = data.TranscriptOutput['@Code'];
        if (ninaSuccessCode == "Success") {
            var historyArray = data.TranscriptOutput.Interaction;
            $.each(historyArray, function(index1, record) {
                //logger.debug(index1 + '::' + record.Human + '::' + record.Agent);
            });
        }

    }
    myChatWiz.sendMarvinresponse = function(data1, isPrechatsubmitted, prechatquery,inputSrc,fromclose) {
       // logger.debug(data1);
      //  logger.debug("isPrechatsubmitted:" + isPrechatsubmitted);
        var finalAnsHtml = '';
        var isEscalted = false;
		var nodata=false;
        if (data1 == '') {
            if (marvinConversationId == "") marvinConversationId = "N";
            sessionMgr.setMarvinConversId(marvinConversationId);
			sendPostMessage({
                            "lpEmbChatWiz": "LPNVPF",
                            "CMD": "CONTROL",
                            "value": "SET_ATCNVSID",
                            "ckValue": marvinConversationId
                        });
            finalAnsHtml = "Please wait a moment while a Customer Care Professional joins the chat."
            isEscalted = true;
			lastIntendId = '';
			nodata=true;
        } else {
            jsonObj = data1;
            var messages = jsonObj.messages;
			if(typeof fromclose=="undefined"){
				marvinConversationId = jsonObj.conversationId;
			if(jsonObj.intentId!="chatend"){
				sessionMgr.setMarvinConversId(marvinConversationId);}
			}	
			sendPostMessage({
                            "lpEmbChatWiz": "LPNVPF",
                            "CMD": "CONTROL",
                            "value": "SET_ATCNVSID",
                            "ckValue": marvinConversationId
                        });
            lastResponseCode = jsonObj.responseCode;
			lastIntendId = jsonObj.intentId;

            for (messageKey in messages) {
                var msgValue = messages[messageKey];
                $.each(msgValue, function(index, value) {

                    if (index == "unstructured") {
                        if (value != null && jsonObj.intentId!="chatend" ) {
                            //logger.debug("unstructured reply-->" + value.reply);
                            finalAnsHtml = finalAnsHtml + value.reply + '<br/><br/>';
                        }
                    } else if (index == "structured") {
                        if (value != null) {
                           // logger.debug("structured questionId:" + value.questionId);
                           // logger.debug("structured questionText:" + value.questionText);

                            var choices = value.attributes.choices;
                            var questionType = value.questionType;
                            if (questionType == "url") {
                                finalAnsHtml = finalAnsHtml + '<a class="refreshLinks" href="' + value.attributes.href + '" onclick="refreshParent(this,event)">' + value.attributes.title + '</a><br/>';
                            } else {
                                finalAnsHtml = finalAnsHtml + '<div id="' + value.questionId + '">' + value.questionText + '</div>';
                                for (key in choices) {
                                    var choice = choices[key];
                                   // logger.debug(choice.choiceId + ':' + choice.choiceText);
                                    if (questionType == "relatedanswers") {
                                        finalAnsHtml = finalAnsHtml + '<div class="choicelinks" onclick="sendMarvinLinkResponse1(this)" id="' + choice.choiceIntent + '">' + choice.choiceText + '</div>';
                                    } else if (questionType == "multichoice" || questionType == "defer") {
                                        finalAnsHtml = finalAnsHtml + '<div class="choicelinks" onclick="sendMarvinMCQResponse1(this,' + value.questionId + ',\''+questionType+'\')" id="' + choice.choiceId + '">' + choice.choiceText + '</div>';
                                    } else if (questionType == "cardselect") {
                                        var cardData = choice.choiceText.split("ending");
                                        var cardDesc = cardData[0];
                                        var cardNum;
                                        if(cardData.length>0){
                                           cardNum = 'ending '+cardData[1];
                                        }
                                        if(typeof choice.choiceCardArt != "undefined"){
                                          if(choice.choiceCardArt == null || choice.choiceCardArt == "null"){
                                             choice.choiceCardArt = "https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/defaultcard.png";
                                          }
                                          finalAnsHtml = finalAnsHtml + '<div class="choicelinks" onclick="sendMarvinCSResponse1(this,' + value.questionId + ',\''+choice.choiceText+'\')" id="' + choice.choiceId + '">' + '<div class="cardWrapper"><span class="cardArt"><img src="'+choice.choiceCardArt+'"></span>'+'<span class="cardInfo"><div class="cardDesc">'+cardDesc+'</div><div class="cardNum">'+cardNum+'</div> </span></div>' + '</div>';
                                        }else{
                                          finalAnsHtml = finalAnsHtml + '<div class="choicelinks" onclick="sendMarvinCSResponse1(this,' + value.questionId + ',\''+choice.choiceText+'\')" id="' + choice.choiceId + '">' + '<div class="cardDesc">'+choice.choiceText+'</div>' + '</div>';
                                        }
                                    }
                                }
                            }
                           // logger.debug(finalAnsHtml);
                        }
                    } else if (index == "escalation") {
                        if (value == "CCP") {
                            isEscalted = true;
							if(isFirstMarvincall && !botresponsegreaterthan2){
								strcompare="to better assist you, please wait a moment while I bring in a Customer Care Professional";
								if((finalAnsHtml.toLowerCase()).indexOf(strcompare.toLowerCase()) > -1){
									finalAnsHtml ="";
								}	
							}
                        }
                    }
                });
            }
        }
		if(!isFirstMarvincall){
			if(!isSecondMarvincall && !botresponsegreaterthan2){
				strcompare="to better assist you, please wait a moment while I bring in a Customer Care Professional";
				if((finalAnsHtml.toLowerCase()).indexOf(strcompare.toLowerCase()) > -1){
					finalAnsHtml ="";
				}
				if(!isEscalted && lastIntendId!="chatend"){
					vaInteractiveChat = true;
					sessionMgr.setvaInteractive(vaInteractiveChat);
				}
				isSecondMarvincall=true;
			}
		}
       // logger.debug(finalAnsHtml);
        marvinResp = true;
        if (isPrechatsubmitted && isEscalted) {
            isPreChatEscalated = true;
			lppreChatAnswer=prechatquery;
        } else {
            isPreChatEscalated = false;
        }

        if (isPrechatsubmitted && !isEscalted) {
           // displayNinaChatWindowMsgs(false);
           // logger.debug('transferChat After prechat esclated');
        }



       /* if (!isPreChatEscalated && prechatquery != "") {
           //ninaBindEvents(false);
            var d1 = new Date();
var t1 = d1.getTime();
var d = new Date(t1);
var dateStr = monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear();		
$('#lpChatMessagesSection').append('<div class="conversationDate">' + dateStr + '</div>');

            var line = createLine({
                by: 'You',
                text: prechatquery,
                source: 'visitor',
                time: new Date().toString()
            });

            addLineToDom(line, false,"Visitor");
            scrollToBottom();
            lpChatWinNotifyFlashingStart();

        }*/
		var tmpisFirstMarvincall = isFirstMarvincall;
		 printMessage=false;
		   if(tmpisFirstMarvincall){
			   printMessage=true;
		   }else{
			   if(lastIntendId!="greeting"){printMessage=true;}
		   }
		   
		   printMessage=true; //Display all messages 		   
		   if(tmpisFirstMarvincall && nodata){
			   printMessage=false;
		   }
		  
		var timeoutvalue=2000;
		if(marvinlinkresponse || isEscalted || !printMessage){
			timeoutvalue=10;
		}	
		
        setTimeout(function() {
           // ninaBindEvents(false);
		  
		   if(printMessage){
            var linesarr = finalAnsHtml.split("<br/><br/>");
            for (i = 0; i < linesarr.length; i++) {
                if (linesarr[i] !== "") {
					msource = 'nina';
					if(lastIntendId == "greeting"){
						if($(".greetm").length==0){
							msource='ninagreet';
						}
					}
                    var line = createLine({
                        by: 'Virtual Assistant',
                        text: linesarr[i],
                        source: msource,
                        time: new Date().toString()
                    });

                   // if (!isPreChatEscalated) {
                        addLineToDom(line, true,"Agent",isPrechatsubmitted);
                        
                        lpChatWinNotifyFlashingStart();
                    //}
                }
            }
			scrollToBottom();
		} 
            if (isEscalted) {
                //logger.debug('transferChat::');
                transferChatBtnClicktoLE();
            } else {
                $(jqe(lpChatID_lpChatInputTextField)).removeAttr('disabled');
                if(deviceBucket === "Small" || (deviceBucket === "Medium" && getWindowOrientation() === "landscape")){ // Small device portrait & landscape
                    if(!keepSoftKeys) {
                        $(jqe(lpChatID_lpChatInputTextField)).blur();
                        if(isAndroid) {
                            $('#lpChatInputTextFieldProxy').blur();
                        }
                    } else {
                        if(isIPhone || (isAndroid && getWindowOrientation() === "portrait")){ // Allow focus in android in portrait mode
                            $(jqe(lpChatID_lpChatInputTextField)).focus();
                        }
                        keepSoftKeys = false;
                    }
                } else {
                    $(jqe(lpChatID_lpChatInputTextField)).focus();
                    keepSoftKeys = false;
                }
                $(jqe("LpSendDataButton")).removeAttr('disabled');
            }
			marvinlinkresponse=false;
        }, timeoutvalue);
		if(isFirstMarvincall && !isEscalted){
			isFirstMarvincall = false;
			myChatWiz.loadWebServiceChat("");
		}

    }

    /*After pre chat do below */
    function displayNinaChatWindowMsgs() {
        $(jqe(lpChatID_lpPreChatMessagesSection)).hide();
        $(jqe(lpChatID_lpPreChatMessagesSection)).remove();
        $("#lpNinaTransferChatBtn").css("display", "block");
        //$("#lpPrivacyStmntBtn").addClass("addFloatleft");
        $("#lpNinaTransferChatBtn").addClass("addFloatright");
        lpChatShowView(lpCWAssist.lpChatMakeMessageSection(isAudioOn));
        $(".lpSystemMessageDiv").html('<div id="ninaSystemMessage"><div><br/>This chat may be recorded and monitored. For your  <br/>security, click "End Chat" before leaving your computer <br/>unattended or when the chat is complete.</div> <div class="ninaHdrspace">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right corner</div></div>');
        $(".lpSystemMessageDiv").addClass("ninaSystemDiv");
		currentTranscript='<div class="lpSystemMessageDiv ninaSystemDiv" id="ninaSystemMessage"><div><br/>This chat may be recorded and monitored. For your  <br/>security, click "End Chat" before leaving your computer <br/>unattended or when the chat is complete.</div> <div class="ninaHdrspace">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right corner</div></div>';
        isNinaChat = true;
        sessionMgr.setMarvinChatEscalated(false);
		sendPostMessage({
                            "lpEmbChatWiz": "LPNVPF",
                            "CMD": "CONTROL",
                            "value": "SET_ATCHTESC",
                            "ckValue": "false"
                        });
    }

   function leAutomationdisplay(){
   /* $(".lpSystemMessageDiv").html('<div id="ninaSystemMessage"><div><br/>This chat may be recorded and monitored. For your  <br/>security, click "End Chat" before leaving your computer <br/>unattended or when the chat is complete.</div> <div class="ninaHdrspace">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right corner</div></div>');
        $(".lpSystemMessageDiv").addClass("ninaSystemDiv");
		currentTranscript='<div class="lpSystemMessageDiv ninaSystemDiv" id="ninaSystemMessage"><div><br/>This chat may be recorded and monitored. For your  <br/>security, click "End Chat" before leaving your computer <br/>unattended or when the chat is complete.</div> <div class="ninaHdrspace">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right corner</div></div>';*/
		$(".lpSystemMessageDiv").css("display", "none");
        isNinaChat = true;
        //isFirstMarvincall=true; 
        sessionMgr.setMarvinChatEscalated(false);
		sendPostMessage({
                            "lpEmbChatWiz": "LPNVPF",
                            "CMD": "CONTROL",
                            "value": "SET_ATCHTESC",
                            "ckValue": "false"
                        });
   }

    function ninaBindEvents(isInitial) {
        if (isPreChatEscalated) {
            $(jqe(lpChatID_lpPreChatMessagesSection)).hide();
            $(jqe(lpChatID_lpPreChatMessagesSection)).remove();
            $("#lpNinaTransferChatBtn").css("display", "block");

            lpChatShowView(lpCWAssist.lpChatMakeMessageSection(isAudioOn));
            $("#lpNinaTransferChatBtn").hide();
            if(isAndroid) {
                $('#lpChatInputTextFieldProxy').focus();
            }
            ($("#lpChatInputTextField")).attr("disabled", true);
            $("#lpPrivacyStmntBtn").show();
            $("#lpPrivacyStmntBtn").removeClass("addFloatleft");
        }

        bindAllButtonEvents();
        bindChatInputTextFieldEvent();
    }

    myChatWiz.refreshparent = function(pageurl) {
       // logger.debug('refresh mycapage' + pageurl);
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "REFRESH",
            "value": pageurl
        });
    }

    myChatWiz.sendMarvinLinkResponse = function(thiselem) {
        $(jqe(lpChatID_lpChatInputTextField)).attr('disabled', true);
        $(jqe("LpSendDataButton")).attr('disabled', true);
        //logger.debug(thiselem.id);
        thiselem.style.color = 'gray';
        if (marvinConversationId == "N") marvinConversationId = "";
        var inpStr = '{ "userId" : "' + bbCookieOverride + '", "conversationId" : "' + marvinConversationId + '", "intentId" : "' + thiselem.id + '", "exp":"'+expansionFlag+'", "messageId" : "2", "unstructured" : { "utterance" : "' + thiselem.innerHTML + '" }, "channel" : "livechat" }';
        //logger.debug(inpStr);
        if (marvinResp) {
            myChatWiz.callMarvinLinkResponse(inpStr);
        } else {
            setTimeout(function() {
                myChatWiz.callMarvinLinkResponse(inpStr)
            }, 5000);
        }
    }

    myChatWiz.callMarvinLinkResponse = function(inpStr) {
        marvinResp = false;
        $.ajax({
           url: 'https://apigateway.americanexpress.com/servicing/v1/cmchat/livechat',
            headers: {
				'Accept': 'application/json',
                'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e'
            },
            type: "POST",
            contentType: "application/json",
            crossDomain: true,
            data: inpStr,
			xhrFields: {
				withCredentials: true
			},
            success: function(data) {
                //alert('success::'+data);
				marvinlinkresponse=true;	
                keepSoftKeys = false;
                myChatWiz.sendMarvinresponse(data, false, '','links');
            },
            async: true,
            timeout: 5000,
            error: function(req, status, err) {
				invokeUILog("Marvin: " + marvinConversationId, "ERROR", "GUID: " + bbCookieOverride + " - callMarvinLinkResponse - Unable to send message - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);	
                logger.debug('something went wrong', status, err);
                keepSoftKeys = false;
                myChatWiz.sendMarvinresponse('', false, '','links');
                if (req.status == 0) {
                    lastResponseCode = '016';
                    //logger.debug('CCP Escalation, reason=', "Marvin request timed out");
                } else if (req.status > 399 && req.status < 500) {
                    lastResponseCode = '014';
                    //logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                } else {
                    lastResponseCode = '015';
                    //logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                }

            }
        });
    };

    myChatWiz.sendMarvinMCQResponse = function(thiselem, qId,qType) {
		MCQClicked= true;
        $(jqe(lpChatID_lpChatInputTextField)).attr('disabled', true);
        $(jqe("LpSendDataButton")).attr('disabled', true);
        if (marvinConversationId == "N") marvinConversationId = "";
        thiselem.style.color = 'gray';
        thiselem.style.pointerEvents = 'none'
		var inpStr='';
		if(qType=="multichoice"){
			inpStr = '{ "userId" : "' + bbCookieOverride + '", "conversationId" : "' + marvinConversationId + '", "intentId" : "", "exp":"'+expansionFlag+'", "messageId" : "2", "structured" : { "isBpm" : false, "questionId" : ' + qId + ', "choiceIds" : [' + thiselem.id + '], "choiceText": "' + thiselem.innerHTML + '" }, "channel" : "livechat"}';
		}else{
			 inpStr = '{ "userId" : "' + bbCookieOverride + '", "conversationId" : "' + marvinConversationId + '", "intentId" : "", "exp":"'+expansionFlag+'", "messageId" : "2", "structured" : { "isBpm" : false, "questionId" : ' + qId + ', "questionType" : "' + qType + '", "choiceIds" : [' + thiselem.id + '], "choiceText": "' + thiselem.innerHTML + '" }, "channel" : "livechat"}';
		}
        if (marvinResp) {
            myChatWiz.callMarvinMCQResponse(inpStr);
        } else {
            setTimeout(function() {
                myChatWiz.callMarvinMCQResponse(inpStr)
            }, 5000);
        }
    }

    myChatWiz.callMarvinMCQResponse = function(inpStr) {
        marvinResp = false;
        $.ajax({
            url: 'https://apigateway.americanexpress.com/servicing/v1/cmchat/livechat',
            headers: {
				'Accept': 'application/json',
                'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e'
            },
            type: "POST",
            contentType: "application/json",
            crossDomain: true,
            data: inpStr,
			xhrFields: {
				withCredentials: true
			},
            success: function(data) {
				marvinlinkresponse=true;
                keepSoftKeys = false;
                myChatWiz.sendMarvinresponse(data, false, '','MCQ');
            },
            async: true,
            timeout: 5000,
            error: function(req, status, err) {
				invokeUILog("Marvin: " + marvinConversationId, "ERROR", "GUID: " + bbCookieOverride + " - callMarvinMCQResponse - Unable to send message - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);	
                logger.debug('something went wrong', status, err);
                keepSoftKeys = false;
                myChatWiz.sendMarvinresponse('', false, '','MCQ');
                if (req.status == 0) {
                    lastResponseCode = '016';
                    //logger.debug('CCP Escalation, reason=', "Marvin request timed out");
                } else if (req.status > 399 && req.status < 500) {
                    lastResponseCode = '014';
                    //logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                } else {
                    lastResponseCode = '015';
                   // logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                }

            }
        });
    }

    myChatWiz.sendMarvinCSResponse = function(thiselem, qId, choiceText) {
		MCQClicked=true;
        $(jqe(lpChatID_lpChatInputTextField)).attr('disabled', true);
        $(jqe("LpSendDataButton")).attr('disabled', true);
        if (marvinConversationId == "N") marvinConversationId = "";
        thiselem.style.color = 'gray';
        var inpStr = '{ "userId" : "' + bbCookieOverride + '", "conversationId" : "' + marvinConversationId + '", "intentId" : "",  "exp":"'+expansionFlag+'", "messageId" : "2", "structured" : { "isBpm" : false, "questionId" : ' + qId + ',"questionType":"cardselect", "choiceIds" : [' + thiselem.id + '], "choiceText": "' + choiceText + '" }, "channel" : "livechat"}';
        if (marvinResp) {
            myChatWiz.callMarvinCSResponse(inpStr);
        } else {
            setTimeout(function() {
                myChatWiz.callMarvinCSResponse(inpStr)
            }, 5000);
        }
    }

    myChatWiz.callMarvinCSResponse = function(inpStr) {
        marvinResp = false;
        $.ajax({
           url: 'https://apigateway.americanexpress.com/servicing/v1/cmchat/livechat',
            headers: {
				'Accept': 'application/json',
                'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e'
            },
            type: "POST",
            contentType: "application/json",
            crossDomain: true,
            data: inpStr,
			xhrFields: {
				withCredentials: true
			},
            success: function(data) {
                //alert('success::'+data);	
				marvinlinkresponse=true;	
                keepSoftKeys = false;
                myChatWiz.sendMarvinresponse(data, false, '','CS');
            },
            async: true,
            timeout: 5000,
            error: function(req, status, err) {
				invokeUILog("Marvin: " + marvinConversationId, "ERROR", "GUID: " + bbCookieOverride + " - callMarvinCSResponse - Unable to send message - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);	
                logger.debug('something went wrong', status, err);
                keepSoftKeys = false;
                myChatWiz.sendMarvinresponse('', false, '','CS');
                if (req.status == 0) {
                    lastResponseCode = '016';
                    //logger.debug('CCP Escalation, reason=', "Marvin request timed out");
                } else if (req.status > 399 && req.status < 500) {
                    lastResponseCode = '014';
                    //logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                } else {
                    lastResponseCode = '015';
                    //logger.debug('CCP Escalation, reason=', "Marvin request failed with HTTP Status Code " + req.status);
                }

            }
        });
    }

    myChatWiz.sendErrorAlert = function(errorCode, errorMsg) {

        if (errorMsg == undefined) {
            errorMsg = "";
        } else {
            errorMsg = "_" + errorMsg;
        }
		var chatDataString = "skill:"+skill+";buttonName:"+errlpChatWizButtonName+";siteContainer:"+lpSiteContainer+";visitorSessionId:"+lpVisitorSessionId+";sessionUID:"+lpSUID+";errlpCustVar:"+errlpCustVar;
		errlpCustVar="";
        if (errorCode == "ccpunavailable")
            sendPostMessage({
                "lpEmbChatWiz": "LPNVPF",
                "CMD": "UIDESIGN",
                "value": "CCPUNAVAILABLE",
                "ckValue": errorMsg,
				"chatObj":chatDataString,
				"context":myChatWiz
            });
        else if (errorCode == "cantconnect")
            sendPostMessage({
                "lpEmbChatWiz": "LPNVPF",
                "CMD": "UIDESIGN",
                "value": "CANTCONNECT",
                "ckValue": errorMsg,
				"chatObj":chatDataString,
				"context":myChatWiz
            });
		else if(errorCode == "Survey")
			sendPostMessage({
                "lpEmbChatWiz": "LPNVPF",
                "CMD": "UIDESIGN",
                "value": "SURVEY",
                "ckValue": errorMsg
            });	
		else if(errorCode == "Timestamp")
			sendPostMessage({
                "lpEmbChatWiz": "LPNVPF",
                "CMD": "UIDESIGN",
                "value": "TIMESTAMP",
                "ckValue": errorMsg
            });
    }

    myChatWiz.sendPostmessageInternal = function(jsonElem) {
        sendPostMessage(jsonElem);
    }

    myChatWiz.init = function() {
        logger.info("initializing...");
        chat = null;
        windowState = windowStateType.READY;
        notificationDialog = new lpCWTag.LPChatWidgetNotification();
        sessionMgr = new lpCWTag.LPChatWidgetSessionManager(window);
        $("#lpChatFooterMsg").html('<a id="lpPrivacyStmntBtn" class="lpChatFooterCyan">Privacy Statement</a>' + '<a id="lpNinaTransferChatBtn" class="lpChatFooterCyan" tabindex="0" style="cursor: pointer;display:none;">Chat with a Customer Care Professional</a>');
        $("#lpPrivacyStmntBtn").attr("tabindex", "0");
        unregisterEventHandler("lpPrivacyStmntBtn", "click", lpCWAssist.openPrivacyStmnt);
        registerEventHandler("lpPrivacyStmntBtn", "click", lpCWAssist.openPrivacyStmnt);
        unregisterEventHandler("lpNinaTransferChatBtn", "click", function() {
            makeMarvinQuery('', true);
        });
        registerEventHandler("lpNinaTransferChatBtn", "click", function() {
            makeMarvinQuery('', true);
        });
        unregisterEventHandler("lpPrivacyStmntBtn", "keydown", function() {
            lpCWAssist.openPrivacyStmntAcss(event);
        });
        registerEventHandler("lpPrivacyStmntBtn", "keydown", function() {
            lpCWAssist.openPrivacyStmntAcss(event);
        });
        /*unregisterEventHandler("lpFocusContent", "keydown", function() { focusclosebutton(event); });
        registerEventHandler("lpFocusContent", "keydown", function() { focusclosebutton(event); });*/
        $(jqe("lpPrivacyStmntBtn")).hover(function() {
            $(this).css('cursor', 'pointer');
        });
    }

    myChatWiz.lpEndChatRequest = function() {
        logger.debug("lpEndChatRequest: ", "method invoke");
       // lpChatCloseChatBtnClick();
    }

    // get the ChatWizContainer element
    myChatWiz.getChatWizContainerElement = function() {
        return window.parent.$(jqe(lpChatID_lpChatWizContainer));
    }

    // get the iFrameElment object on the parent page. Return JS object
    myChatWiz.getiFrameElement = function() {
        return window.parent.$(jqe(lpChatID_lpChatiFrame))[0];
    }

    /*
     * get the ChatWizContainer element object on the paret page. return
     * jQuery object
     */
    myChatWiz.getChatWizFrameContainerElement = function() {
        return window.parent.$(jqe(lpChatID_lpChatWizFrameContainer));
    }

    /**
     * show offline survey screen
     */
    myChatWiz.showOverrideOfflineScreen = function(data) {
    	sendErrorAlert("Survey", "showOverrideOfflineScreen:In showOverrideOfflineScreen");
        logger.debug("showOverrideOfflineScreen", data);
        //sessionMgr.setLPvisitorID(chat.getSessionKey().split("K")[1]);
        //logger.debug("showOverrideOfflineScreen visitorSessionId chatget------>", chat.getSessionKey().split("K")[1]);
        loadLPomn();
        lpChatShowView(lpCWAssist.lpChatMakeOfflineSurveySection(data), true);
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "UIDESIGN",
            "value": "SHOWCLOSEBTN"
        });
        bindCloseButtonEvent();
		try{
			sendErrorAlert("Survey", "showOverrideOfflineScreen:survey questions:"+data.survey.questions);
		}catch(e){
			logger.debug("Error in sendErrorAlert");
		}
        if (data.survey.questions != null) {
            // build html survey container
            makeQuestionsHtml(data);
            $(jqe(lpChatID_lpChatSurveyId)).val(data.survey.id);
			try{
				sendErrorAlert("Survey", "showOverrideOfflineScreen:survey questions length:"+data.survey.questions.question.length);
			}catch(e){
				logger.debug("Error in sendErrorAlert");
			}
            $(jqe(lpChatID_lpChatSurveyQuestionNum)).val(data.survey.questions ? data.survey.questions.question.length : 0);

            unregisterEventHandler("lpOfflineSurveySubmitBtn", "click", function() {
                offlineSurveyBtnClick(data)
            });
            registerEventHandler("lpOfflineSurveySubmitBtn", "click", function() {
                offlineSurveyBtnClick(data)
            });

        }
        //stop the sessionMgr to stop polling
        sessionMgr.stop();
        clearOnClose();
        showChatWizContainer();
    }

    /**
     * go straight to estable chat if no prechat survey found
     */
    myChatWiz.noPreChatSurvey = function() {
        logger.debug("noPreChatSurvey", "...");
        //if no survey, make a new chat request, bind events, and show chat window
			lpChatShowView(lpCWAssist.lpChatMakeMessageSection(isAudioOn), true);
        createCollaborationInstance();
        establishRequestChat(null);
        bindAllButtonEvents();

    }

       

    /* show pre chat survey questions */
    myChatWiz.showPreChatSurvey = function(data) {
	//	sendPostMessage({"lpEmbChatWiz": "LPNVPF","CMD": "CONTROL","value": "SET_PRECHATACTIVECOOKIE" });
		// sessionMgr.start();
        //loadLPomn();
        isContinueClicked = false;
        logger.debug("showPreChatSurvey", data);
        $("#lpNinaTransferChatBtn").hide();
        $("#lpPrivacyStmntBtn").removeClass("addFloatleft");

        lpNumErrorMessage = false;
        screenState = screenStateType.PRECHATSURVEY;
        sessionMgr.setScreen(screenState);
        //lpChatShowView(lpCWAssist.lpChatMakeSurveyContainerHtml(false), true);
        lpChatShowView(lpCWAssist.lpChatMakeSurveyContainerHtmlNew(), true);
        animateLpContent();
        $("#lpTextBlinking").css('display', 'none');
        // build html survey container 

        makeQuestionsHtml(data);
        $("#lpPrivacyStmntBtn").attr("tabindex", "0");
        $(jqe(lpChatID_lpPreChatMessagesSection)).find(lpChatClass_lpChatSurveySectionText).html(data.survey.header);
        $(jqe(lpChatID_lpChatSurveyId)).val(data.survey.id);
        $(jqe(lpChatID_lpChatSurveyQuestionNum)).val(data.survey.questions ? data.survey.questions.question.length : 0);
        logger.debug("showPreChatSurvey", "before bind close button event");
        bindCloseButtonEvent();
        logger.debug("showPreChatSurvey", "after bind close button event");
        registerEventHandler("lpNinaPreChatSurveySubmitBtn", "click", function() {
            prechatNinaSurveyBtnClick(data);
        });
        registerEventHandler("lpContinueSubmitBtn", "click", function() {
            prechatContinueBtnClick(data);
        });

        unregisterEventHandler("lpPreChatSurveySubmitBtn", "click", function() { prechatSurveyBtnClick(data); });
        registerEventHandler("lpPreChatSurveySubmitBtn", "click", function() {
            prechatSurveyBtnClick(data);
        });

        unregisterEventHandler("lpPreChatSurveySubmitBtn", "keyup", function(event) {
            preSurveySubmitOnEnterKey(data, event);
        });
        registerEventHandler("lpPreChatSurveySubmitBtn", "keyup", function(event) {
            preSurveySubmitOnEnterKey(data, event);
        });
        var lpmousehoverafterClick = false;

        if (nuanceFlowFlagOverrride == "P1" || nuanceFlowFlagOverrride.toUpperCase() == "AUTOMATION") {
            $("#lpNinaPreChatSurveySubmitBtn").hide();
            $("#lpPreChatSurveySubmitBtn").hide();
        } else if (nuanceFlowFlagOverrride == "P2") {
            $("#lpContinueSubmitBtn").hide();
        } else if (nuanceFlowFlagOverrride == "BAU" || nuanceFlowFlagOverrride == "PIT" || window.location.search.indexOf("lpctrycd=US")== -1) {
            $("#lpContinueSubmitBtn").hide();
            $("#lpNinaPreChatSurveySubmitBtn").hide();
        } else {
            $("#lpContinueSubmitBtn").hide();
            $("#lpNinaPreChatSurveySubmitBtn").hide();
        }


        showChatWizContainer();
        if (document.getElementsByClassName("lpSelectAnchCls") != "undefined" && document.getElementsByClassName("lpSelectAnchCls") != "" && document.getElementsByClassName("lpSelectAnchCls").length > 0) {
            var anchorTagSelectOptLi = document.getElementsByClassName("lpSelectAnchCls");
            for (i = 0; i < anchorTagSelectOptLi.length; i++) {
                var anchorTagIdOptLi = anchorTagSelectOptLi[i].getAttribute('id');
                var anchorTarget = anchorTagSelectOptLi[i].parentNode;
                //unregisterEventHandler(anchorTagIdOptLi, "click", lpSelectOptionsList);
                //registerEventHandler(anchorTagIdOptLi, "click", lpSelectOptionsList);
                unregisterEventHandler(anchorTagIdOptLi, "click", function() {
                    lpGetValueOfAnchOnClick(this);
                });
                registerEventHandler(anchorTagIdOptLi, "click", function() {
                    lpGetValueOfAnchOnClick(this);
                });
                unregisterEventHandler(anchorTagIdOptLi, "keydown", lpSelectOptionsListOnKeyEvent);
                registerEventHandler(anchorTagIdOptLi, "keydown", lpSelectOptionsListOnKeyEvent);
                //unregisterEventHandler(anchorTagIdOptLi, "mouseleave", function(){lpHoverRemoveHighLight(this);});
                //registerEventHandler(anchorTagIdOptLi, "mouseleave", function(){lpHoverRemoveHighLight(this);});	
            }
        }
        $(".lpSelectAnchCls").hover(function() {
            //			if(!lpmousehoverafterClick){
            //				$('.lpSelectAnchCls').removeClass('lpLiBgColor');
            //			}else{
            //				lpmousehoverafterClick = false;
            //			}				
            $('.lpSelectAnchCls').removeClass('lpLiBgColor');
            $(this).addClass('lpLiBgColor');
            //if(!lpmousehoverafterClick){
            //$('.lpSelectAnchCls').removeClass('lpLiBgColor');
            //}else{
            lpmousehoverafterClick = false;
            //}
        });
        unregisterEventHandler("lpPreChatMessagesSection", "click", lpHideOptionsListOnClick);
        registerEventHandler("lpPreChatMessagesSection", "click", lpHideOptionsListOnClick);

        if (document.getElementsByClassName("lpSelectedOption") != "undefined" && document.getElementsByClassName("lpSelectedOption") != "" && document.getElementsByClassName("lpSelectedOption").length > 0) {
            var anchorTagSelect = document.getElementsByClassName("lpSelectedOption");
            for (i = 0; i < anchorTagSelect.length; i++) {
                var anchorTagId = anchorTagSelect[i].getAttribute('id');
                unregisterEventHandler(anchorTagId, "click", lpShowOptionsList);
                registerEventHandler(anchorTagId, "click", lpShowOptionsList);
            }
        }

        if (document.getElementsByTagName("textarea") != "undefined" && document.getElementsByTagName("textarea") != "" && document.getElementsByTagName("textarea").length > 0) {
            var textareaTag = document.getElementsByTagName("textarea");
            for (i = 0; i < textareaTag.length; i++) {
                var id = textareaTag[i].getAttribute('id');
                if (nuanceFlowFlagOverrride.toUpperCase() == "AUTOMATION")
                    textareaTag[i].setAttribute('placeholder', 'Type here and hit <enter> to Continue');
                else
                    textareaTag[i].setAttribute('placeholder', 'Type here and hit <enter> to start a Live Chat');
                unregisterEventHandler(id, "keyup", function(event) {
                    preSurveySubmitOnEnterKey(data, event);
                });
                registerEventHandler(id, "keyup", function(event) {
                    preSurveySubmitOnEnterKey(data, event);
                });
            }
        }
        if (document.getElementsByClassName("lpTextBoxType") != "undefined" && document.getElementsByClassName("lpTextBoxType") != "" && document.getElementsByClassName("lpTextBoxType").length > 0) {
            var inputTxtTag = document.getElementsByClassName("lpTextBoxType");
            for (i = 0; i < inputTxtTag.length; i++) {
                var inputTxtId = inputTxtTag[i].getAttribute('id');
                if (nuanceFlowFlagOverrride.toUpperCase() == "AUTOMATION")
                    inputTxtTag[i].setAttribute('placeholder', 'Type here and hit <enter> to Continue');
                else
                    inputTxtTag[i].setAttribute('placeholder', 'Type here and hit <enter> to start a Live Chat');
                unregisterEventHandler(inputTxtId, "keyup", function(event) {
                    preSurveySubmitOnEnterKey(data, event);
                });
                registerEventHandler(inputTxtId, "keyup", function(event) {
                    preSurveySubmitOnEnterKey(data, event);
                });
            }
        }
        if (document.getElementsByClassName("lpNumberInputType") != "undefined" && document.getElementsByClassName("lpNumberInputType") != "" && document.getElementsByClassName("lpNumberInputType").length > 0) {
            var inputNumberTag = document.getElementsByClassName("lpNumberInputType");
            for (i = 0; i < inputNumberTag.length; i++) {
                var inputNumId = inputNumberTag[i].getAttribute('id');
                if (nuanceFlowFlagOverrride.toUpperCase() == "AUTOMATION")
                    inputNumberTag[i].setAttribute('placeholder', 'Type here and hit <enter> to Continue');
                else
                    inputNumberTag[i].setAttribute('placeholder', 'Type here and hit <enter> to start a Live Chat');
                unregisterEventHandler(inputNumId, "keypress", function(event) {
                    preSurveySubmitNumberOnEnterKey(data, event);
                });
                registerEventHandler(inputNumId, "keypress", function(event) {
                    preSurveySubmitNumberOnEnterKey(data, event);
                });
            }
        }
        try {
            omn_rmassistaction("View", "LiveChat_PreChatSurvey");
        } catch (e) {
            logger.debug("omn error LiveChat_PreChatSurvey");
        }
       sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "IN_PRECHAT_SCREEN"
        });
    }

    /**
     * dismiss the embedded window if no exit survey found
     */
    myChatWiz.noPostChatSurvey = function() {
        logger.debug("noPostChatSurvey", "...");
        disposeEndChat(); // if no survey, end chat
    }

    /**
     * Handler to resize the height of the survey container if the window height changes.
     */
    myChatWiz.surveyContainerResizeHandler = function() {
        logger.debug("surveyContainerResizeHandler", "...");
        // Note: window.innerHeight gives the height of the iframe, and functionality already exists to change the height of the iframe if parent window.height changes for small devices
        $(".lpHeight398").css("height", window.innerHeight + "px");
    }

    /* load post chat survey questions */
    myChatWiz.showPostChatSurvey = function(data) {
         starRating = 0;
         sliderValue = 0;
         yesNoValue = '';
        logger.debug("showPostChatSurvey", data);
		convEndTime = new Date().getTime();
        var recentAgentName = "";
        try{
          recentAgentName = leagentMap[lastAgentId];
        }catch(e){}
		//console.log('recentAgentName : ',recentAgentName);
        chatWinCloseable = true; //allow usr to click one more x/close to dismiss the chat window
        screenState = screenStateType.EXITSURVEY;
        sessionMgr.setScreen(screenState);
		sessionMgr.stop();
		
        $(jqe("lpChatLoadingSection")).remove(); //remove loading screen

            lpChatShowView(lpCWAssist.leChatMakeSurveyContainerHtml(true), true);
            if(skill !== null || skill == "") {
				var cen_survey_html = '<div class="survey-container">'+
				'<div class="star-rating-ques">'+
				'<div class="star-rating-label">'+
				'<span class="label-top">Rate <span id="latestAgentName">the agent</span>\'s service</span>'+
				'</div>'+
				'<div>'+
                    '<div class="star-rating"><span class="rate-star" id="rate-1" tabindex="0">&#x2606;</span><span class="rate-star" id="rate-2" tabindex="0">&#x2606;</span><span class="rate-star" id="rate-3" tabindex="0">&#x2606;</span><span class="rate-star" id="rate-4" tabindex="0">&#x2606;</span><span class="rate-star" id="rate-5" tabindex="0">&#x2606;</span></div><div class="rating-value" style="display:none"></div>'+
                    '</div>'+
                    '<div class="selectstar-rating-label">'+
                    '< Select Stars to Rate ></div>'+
				'</div>'+

				'<div class="did-resolve-ques">'+
				'<div class="did-resolve-label">Did we resolve your request?</div>'+
				'<div>'+
				'<button class="yesno-btn" id="no" value="no">NO</button>'+
				'<button class="yesno-btn" id="yes" value="yes">YES</button>'+
				'</div>'+
				'</div>'+
				'<div class="recommend-ques">'+
				'<div class="recommend-label">Based on this recent service experience, how likely are you to recommend Amex to your friend or colleague?</div>'+
    '<div>'+
    '<div class="select form-control"   data-toggle="select">'+
    '<select id="egSelect"  select class="leave_response">'+
    '<option >Select Likelihood</option>'+
    '<option value="10">10 - Extremely Likely</option>'+
    '<option value="9">9</option>'+
    '<option value="8">8</option>'+
    '<option value="7">7</option>'+
    '<option value="6">6</option>'+
    '<option value="5">5</option>'+
    '<option value="4">4</option>'+
    '<option value="3">3</option>'+
    '<option value="2">2</option>'+
    '<option value="1">1 -Extremely Unlikely</option>'+
    '</select>'+
				'</div>'+
				'</div>'+
				'<div id="selectQuest"  Style= "padding-bottom: 10px; padding-top: 17px;"></div'+
				'<div class="feedbackQdesc">'+
				'Do you have any other comments or feedback?</div>'+
				'<textarea type="text" id="feedbackAnsLE" rows="4" cols="40" placeholder="Type here...(Optional)" maxlength="4000"></textarea>'+
				'<div id="checkLength">Character Limit Reached</div>'+
				'</div>'+
                    ' <div class="error-message-lable">'+
                    'Please answer the required question(s) above</div>'+
                    '</div>'+
				'<div id="lpPostChatSurveySectionBtn" class="lpTextCenter">'+
				'<div id="lpPostChatSurveySubmitBtn" class="lpGrayButton lpPointer" tabindex="0">Submit</div>'+
				'<input type="hidden" value="" id="lpSurveyID"><input type="hidden" value="" id="lpSurveyTotalQuestNum">'+
				'</div>'
				'</div>';
				$(jqe(lpChatID_lpChatSurveyQuestionsContainer)).append(cen_survey_html);
				$("#latestAgentName").html(recentAgentName);
			}
            //Set the height of the lpYscroll div/survey container to window height for samll devices
            if(deviceBucket === "Small") {
                $(".lpHeight398").css("height", window.innerHeight + "px");
            }
            unregisterEventHandler("lpPreChatSurveySubmitBtn", "click", function() {
                exitSurveyBtnClick(data);
            });
            registerEventHandler("lpPreChatSurveySubmitBtn", "click", function() {
                exitSurveyBtnClick(data);
            });
            unregisterEventHandler("lpPostChatSurveySubmitBtn", "click", function() {
                submitStandardSurveyData(data,recentAgentName);

            });
            registerEventHandler("lpPostChatSurveySubmitBtn", "click", function() {
                submitStandardSurveyData(data,recentAgentName);
            });	
			unregisterEventHandler("lpPreChatSurveySubmitBtn", "keydown", function(event) {
                sendControlToClose(event, 'preChat');
            });
			registerEventHandler("lpPreChatSurveySubmitBtn", "keydown", function(event ) {
                sendControlToClose(event, 'preChat');
            });
            unregisterEventHandler("lpPostChatSurveySubmitBtn", "keydown", function(event) {
                sendControlToClose(event, 'postChat');
            });
            registerEventHandler("lpPostChatSurveySubmitBtn", "keydown", function(event) {
                sendControlToClose(event, 'postChat');
            });
        // US1537511 - start    
        unregisterEventHandler("feedbackAnsLE", "keyup", function() {
            handleFeedBackLength("feedbackAnsLE");
        });
        registerEventHandler("feedbackAnsLE", "keyup", function() {
            handleFeedBackLength("feedbackAnsLE");
        });
        // US1537511 - end
        if(deviceBucket === "Small"){
            // add handler to resize the survey container as the height of the window changes - for small devices
            $(window).off('resize', myChatWiz.surveyContainerResizeHandler);	 
            $(window).on('resize', myChatWiz.surveyContainerResizeHandler);	 
            //handleFeedBackClick   
            unregisterEventHandler("feedbackAnsLE", "click", handleFeedBackClick);
            registerEventHandler("feedbackAnsLE", "click", handleFeedBackClick);
        }
            /* unregisterEventHandler("lpPreChatSurveySubmitBtn", "keydown", sendControlToClose);
            registerEventHandler("lpPreChatSurveySubmitBtn", "keydown", sendControlToClose);
            unregisterEventHandler("lpPostChatSurveySubmitBtn", "keydown", sendControlToClose);
            registerEventHandler("lpPostChatSurveySubmitBtn", "keydown", sendControlToClose); */
            
            if(skill !== null || skill == "") {
				$('.leave_response').on('change', function() {
    				var  responseId = $(this).val();
					sliderValue = responseId;
    				//console.log(sliderValue);
					updateStandardSurveyQuestions(starRating, yesNoValue, recentAgentName);
				});
				var handle = $( ".survey-slider-container .ui-slider .ui-slider-track .ui-slider-handle");
				handle.html('?');
				handle.css('left','50%');
				handle.attr('title','?');

				/** Yes-No buttons logic */
				$('.rate-star').off('click');
				$(".rate-star").keyup(function(event){
					var key = 0;
					if (window.event) {
						key = window.event.keyCode;
					} else if (event) {
						key = event.keyCode;
					}
					if (key == 13) { 
						$(this).trigger('click');
					} 
				});			
				$(".yesno-btn").click(function(e){
					$('.yesno-btn').removeClass('yesno-btn-active');
					$(this).addClass('yesno-btn-active');
					yesNoValue = $(this).val();
					updateStandardSurveyQuestions(starRating, yesNoValue, recentAgentName);
				});
				/** Yes-No buttons logic : End */

				/** Star rating logic */
				$('.rate-star').off('click');
				$(".rate-star").click(function(e){
					var count = 0;
					$('.rate-star').removeClass('rate-star-active');
					var starSelected = $(this);
					$('.rate-star').each(function(index,star) {
						count++;
						$(star).addClass('rate-star-active');
						if(starSelected.is(star)){
							return false;
						}
					});
					starRating = count;
					//console.log('Star rating selected: ',starRating);
					$('.rating-value').html(starRatingVals[starRating]);
					$('.rating-value').show();
                    $('.selectstar-rating-label').hide();
					updateStandardSurveyQuestions(starRating, yesNoValue, recentAgentName);
				});
				$('.rate-star').off('mouseover');
				$(".rate-star").mouseover(function(e) {
					$('.rate-star').removeClass("rate-star-hovered");
					var starHovered = $(this);
					$('.rate-star').each(function(index,star) {
						$(star).addClass("rate-star-hovered");
						if(starHovered.is(star)) {
							return false;
						}
					});
				});
				$('.rate-star').off('mouseout');
				$(".rate-star").mouseout(function(e) {
					$('.rate-star').removeClass("rate-star-hovered");
				});
				/** Star rating logic : End */
			}
      
        try {
            omn_rmassistaction("View", "LiveChat_PreChatSurvey");
        } catch (e) {
            logger.debug("omn error LiveChat_PreChatSurvey");
        }
       
    }

/*US660762*/
    myChatWiz.showPostChatSurveyForAutomation = function() {
        logger.debug("showPostChatSurvey Automation");
		
		if(ninaCurrentTranscript!="")
		{
			ninaCurrentTranscript='<div class="lpSystemMessageDiv ninaSystemDiv" id="ninaSystemMessage"><div><br/>This chat may be recorded and monitored. For your  <br/>security, click "End Chat" before leaving your computer <br/>unattended or when the chat is complete.</div> <div class="ninaHdrspace">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right corner</div></div>'+ninaCurrentTranscript;
			currentTranscript=ninaCurrentTranscript+currentTranscript;
		}
		
        //sessionMgr.stop();  //Automation escalation
        chatWinCloseable = true; //allow usr to click one more x/close to dismiss the chat window				
        screenState = screenStateType.EXITSURVEY;
        sessionMgr.setScreen(screenState);
        $(jqe("lpChatLoadingSection")).remove(); //remove loading screen

	 if(!vaInteractiveChat){
           chatWinCloseable = true; //allow usr to click one more x/close to dismiss the chat window				
	    screenState = screenStateType.EXITSURVEY;
      sessionMgr.setScreen(screenState);
	      sessionMgr.deleteChatSessionStorage();
           disposeEndChat();
        }else{           
       $(".lpAutomationsurvey").each(function( index ) {
          //console.log( "in lpAutomationsurvey loop",index, $(this));
          $(this).remove();
        }); 
        lpChatShowView(lpCWAssist.lpChatMakeSurveyContainerHtml(true), false);
        $(jqe("lpPreChatSurveySubmitBtn")).text(lpCWTagConst.lpBtn_Submit);
        $(jqe("lpPreChatSurveySectionTitle")).addClass("lpPostChatTitleHeader");
        $("#lpNinaTransferChatBtn").hide();
        $("#lpPrivacyStmntBtn").removeClass("addFloatleft");
        $("#lpSurveyQuestionsContainer").addClass("automationSurvey");



   $(jqe(lpChatID_lpChatSurveyQuestionsContainer)).append('<div class="automation-survey-container">'+
				'<div class="astar-rating-ques">'+
				'<div class="astar-rating-label">'+
				'<span class="label-top">Rate the service during this conversation</span>'+
				'</div>'+
				'<div>'+
                    '<div class="astar-rating"><span class="arate-star" id="rate-1" tabindex="0">&#x2606;</span><span class="arate-star" id="rate-2" tabindex="0">&#x2606;</span><span class="arate-star" id="rate-3" tabindex="0">&#x2606;</span><span class="arate-star" id="rate-4" tabindex="0">&#x2606;</span><span class="arate-star" id="rate-5" tabindex="0">&#x2606;</span></div><div class="arating-value" style="display:none"></div>'+				'</div>'+
                    '<div class="aselectstar-rating-label">'+
                    '< Select Stars to Rate ></div>'+
                    '</div>'+
				'<div class="adid-resolve-ques">'+
				'<div class="adid-resolve-label">Did we resolve your request?</div>'+
				'<div>'+
				'<button class="ayesno-btn" id="no" value="no">NO</button>'+
				'<button class="ayesno-btn" id="yes" value="yes">YES</button>'+
				'</div>'+
				'</div>'+
				'<div id="selectQuest"  Style= "padding-bottom: 10px; padding-top: 17px;"></div'+
				'<div class="feedbackQdesc">'+
				'Do you have any other comments or feedback?</div>'+
				'<textarea type="text" id="feedbackAns" rows="4" cols="40" placeholder="Type here...(Optional)" maxlength="4000"></textarea>'+
				'<div id="checkLength">Character Limit Reached</div>'+
				'</div>'+
                ' <div class="error-message-lable">'+
                'Please answer the required question(s) above</div>'+
                '</div>'+
                 '</div>');
                
                //Set the height of the lpYscroll div/survey container to window height for small devices
                if(deviceBucket === "Small") {
                    $(".lpHeight398").css("height", window.innerHeight + "px");
                }
                 /** Yes-No buttons logic */
				$('.arate-star').off('click');
				$(".ayesno-btn").click(function(e){
					$('.ayesno-btn').removeClass('ayesno-btn-active');
					$(this).addClass('ayesno-btn-active');
					yesNoValue = $(this).val();
                    if(yesNoValue != null && yesNoValue !== ""){
                        $('.adid-resolve-label').css('color', '');
                        $('.ayesno-btn').css('border', "");
                        $('.ayesno-btn').css('color', "");
                    }
                    /** Dynamic freeform Question For Automation survey  logic */
                    if ((starRating == 5 || starRating === "Excellent") && yesNoValue == "yes") {
                        $("#selectQuest").html("Do you have any other comments or feedback?");
                    } else if ((starRating == 5 || starRating === "Excellent")  && yesNoValue === "no") {
						$("#selectQuest").html("Let us know what would have helped resolve your request. You can also try chatting with a Live Customer Care Professional.");
                    } else if (((starRating < 5 && starRating > 0) ||starRating === "Excellent" || starRating === "Very Good" || starRating === "Good" || starRating === "Fair" || starRating === "Poor") && yesNoValue === "yes") {
                        $("#selectQuest").html("What would have made the service excellent?");
                    } else if (((starRating < 5 && starRating > 0) ||starRating === "Excellent" || starRating === "Very Good" || starRating === "Good" || starRating === "Fair" || starRating === "Poor") && yesNoValue === "no" ) {
						$("#selectQuest").html("Please let us know how we can improve. You can also try chatting with a Live Customer Care Professional.");
                    }
                    /** Gray to Blue  Button Logic */
                    if (starRating != "0" && (yesNoValue != null && yesNoValue !== "") ) {
                        $('#lpPreChatSurveySubmitBtn').removeClass("lpGrayButton lpPointer");
						if (yesNoValue === "yes") {
							$('#lpPreChatSurveySubmitBtn').removeClass("lpWhiteButton lpPointer");
							$('#lpPreChatSurveySubmitBtn').addClass("lpBlueButton lpPointer");
							$('#lpPreChatSurveySubmitBtn').text(lpCWTagConst.lpBtn_Submit);
							$('#lpPreChatSurveySubmitBtn').css("width", "170px");
							$('#chatWithCCPButton').css("display", "none");
						} else {
							$('#lpPreChatSurveySubmitBtn').removeClass("lpBlueButton lpPointer");
							$('#lpPreChatSurveySubmitBtn').addClass("lpWhiteButton lpPointer");
							$('#lpPreChatSurveySubmitBtn').text(lpCWTagConst.lpBtn_SubmitAndClose);
							$('#lpPreChatSurveySubmitBtn').css("width", "270px");
							$('#chatWithCCPButton').css("display", "inline-block");
						}
                        $('.error-message-lable').hide();
                    }
				});
				/** Yes-No buttons logic : End */

				/** Star rating logic */
				$('.arate-star').off('click');
				$(".arate-star").keyup(function(event){
					var key = 0;
					if (window.event) {
						key = window.event.keyCode;
					} else if (event) {
						key = event.keyCode;
					}
					if (key == 13) { 
						$(this).trigger('click');
					} 
				});
				$(".arate-star").click(function(e){
					var count = 0;
					$('.arate-star').removeClass('arate-star-active');
					var starSelected = $(this);
					$('.arate-star').each(function(index,star) {
						count++;
						$(star).addClass('arate-star-active');
						if(starSelected.is(star)){
							return false;
						}
					});
					starRating = count;
					//console.log('Star rating selected: ',starRating);
					$('.arating-value').html(starRatingVals[starRating]);
                    if(starRating != 0 ){
                        $('.astar-rating-label').css('color', '');
                        $('.arate-star').css('color', '');
                    }

                    if (starRating != "0" && (yesNoValue != null && yesNoValue !== "") ) {
                        $('#lpPreChatSurveySubmitBtn').removeClass("lpGrayButton lpPointer");
						if (yesNoValue === "yes") {
							$('#lpPreChatSurveySubmitBtn').removeClass("lpWhiteButton lpPointer");
							$('#lpPreChatSurveySubmitBtn').addClass("lpBlueButton lpPointer");
							$('#lpPreChatSurveySubmitBtn').text(lpCWTagConst.lpBtn_Submit);
							$('#lpPreChatSurveySubmitBtn').css("width", "170px");
							$('#chatWithCCPButton').css("display", "none");
						} else {
							$('#lpPreChatSurveySubmitBtn').removeClass("lpBlueButton lpPointer");
							$('#lpPreChatSurveySubmitBtn').addClass("lpWhiteButton lpPointer");
							$('#lpPreChatSurveySubmitBtn').text(lpCWTagConst.lpBtn_SubmitAndClose);
							$('#lpPreChatSurveySubmitBtn').css("width", "270px");
							$('#chatWithCCPButton').css("display", "inline-block");
						}
                        $('.error-message-lable').hide();
                    }
					$('.arating-value').show();
                    starRating = $('.arating-value').text();
                    $('.aselectstar-rating-label').hide();
                    /** Dynamic freeform Question For Automation survey  logic */
                    if ((starRating == 5 || starRating === "Excellent") && yesNoValue == "yes") {
                        $("#selectQuest").html("Do you have any other comments or feedback?");
                    } else if ((starRating == 5 || starRating === "Excellent")  && yesNoValue === "no") {
						$("#selectQuest").html("Let us know what would have helped resolve your request. You can also try chatting with a Live Customer Care Professional.");
                    } else if (((starRating < 5 && starRating > 0) ||starRating === "Excellent" || starRating === "Very Good" || starRating === "Good" || starRating === "Fair" || starRating === "Poor") && yesNoValue === "yes") {
                        $("#selectQuest").html("What would have made the service excellent?");
                    } else if (((starRating < 5 && starRating > 0) ||starRating === "Excellent" || starRating === "Very Good" || starRating === "Good" || starRating === "Fair" || starRating === "Poor") && yesNoValue === "no" ) {
						$("#selectQuest").html("Please let us know how we can improve. You can also try chatting with a Live Customer Care Professional.");
                    }
				});
				$('.arate-star').off('mouseover');
				$(".arate-star").mouseover(function(e) {

					$('.arate-star').removeClass("arate-star-hovered");
					var starHovered = $(this);
					$('.arate-star').each(function(index,star) {
						$(star).addClass("arate-star-hovered");
						if(starHovered.is(star)) {
							return false;
						}
					});
				});
				$('.arate-star').off('mouseout');
				$(".arate-star").mouseout(function(e) {
					$('.arate-star').removeClass("arate-star-hovered");
				});

       // $(jqe(lpChatID_lpPreChatMessagesSection)).find(".lpChatSurveySectionTextPost").html('<span style="font-size:13px;line-height:11px;text-align:left;display:block;margin-top: 20px;">We would like to hear about your experience</span>');
		
		 $(jqe(lpChatID_lpPreChatMessagesSection)).find(".lpChatSurveySectionTextPost").html('<span style="font-size:11px;line-height:14px;text-align:left;display:block;"><div id="postchatheader">Thank you for chatting today</div><div id="postchatheaderbody">Please take a moment to review your Chat and tell us how we did in the survey below.</div></span>');

		 unregisterEventHandler("lpChatTranscript", "click", function() {
                showChatTranscript();
            });
            registerEventHandler("lpChatTranscript", "click", function() {
               showChatTranscript();
            });
		 
        $("#lpChatSurveySectionQ1Err").hide();
        $("#lpChatSurveySectionQ2Err").hide();

		
		unregisterEventHandler("lpPreChatSurveySubmitBtn", "keydown", function(event) {
			sendControlToClose(event, 'preChat');
		});
		registerEventHandler("lpPreChatSurveySubmitBtn", "keydown", function(event ) {
			sendControlToClose(event, 'preChat');
		});
		unregisterEventHandler("feedbackAns", "keyup", function() {
	 	//for US1537511 
            handleFeedBackLength("feedbackAns");
        });
        registerEventHandler("feedbackAns", "keyup", function() {
	    //for US1537511 
            handleFeedBackLength("feedbackAns");
        });
        unregisterEventHandler("lpPreChatSurveySubmitBtn", "click", function() {
            exitSurveyBtnClickAutomation(true);
        });
        registerEventHandler("lpPreChatSurveySubmitBtn", "click", function() {
            exitSurveyBtnClickAutomation(true);
        });
        
        unregisterEventHandler("chatWithCCPButton", "click", function() {
            showChatTranscriptAgain();
        });
        registerEventHandler("chatWithCCPButton", "click", function() {
            showChatTranscriptAgain();
        });

        unregisterEventHandler("marvinRadioPostChat1", "click", function() {
            showRatingText(this);
        });
        registerEventHandler("marvinRadioPostChat1", "click", function() {
            showRatingText(this);
        });
        /*unregisterEventHandler("lpSurveyQuestionAns1", "change", function() {
            validatePCSelect();
        });
        registerEventHandler("lpSurveyQuestionAns1", "change", function() {
            validatePCSelect();
        });*/
        unregisterEventHandler("marvinRadioPostChat2", "click", function() {
            showRatingText(this);
        });
        registerEventHandler("marvinRadioPostChat2", "click", function() {
            showRatingText(this);
        });
		unregisterEventHandler("marvinRadioPostChat3", "click", function() {
            showRatingText(this);
        });
        registerEventHandler("marvinRadioPostChat3", "click", function() {
            showRatingText(this);
        });
		unregisterEventHandler("marvinRadioPostChat4", "click", function() {
            showRatingText(this);
        });
        registerEventHandler("marvinRadioPostChat4", "click", function() {
            showRatingText(this);
        });
		unregisterEventHandler("marvinRadioPostChat5", "click", function() {
            showRatingText(this);
        });
        registerEventHandler("marvinRadioPostChat5", "click", function() {
            showRatingText(this);
        });
		unregisterEventHandler("marvinRadioPostChat6", "click", function() {
            highlightQ1Btn();
        });
        registerEventHandler("marvinRadioPostChat6", "click", function() {
            highlightQ1Btn();
        });
		unregisterEventHandler("marvinRadioPostChat7", "click", function() {
            highlightQ1Btn();
        });
        registerEventHandler("marvinRadioPostChat7", "click", function() {
            highlightQ1Btn();
        });
            if(deviceBucket === "Small"){
                // add handler to resize the survey container as the height of the window changes - for small devices
                $(window).off('resize',myChatWiz.surveyContainerResizeHandler);	 
                $(window).on('resize',myChatWiz.surveyContainerResizeHandler);
                unregisterEventHandler("feedbackAns", "click", handleFeedBackClick);
                registerEventHandler("feedbackAns", "click", handleFeedBackClick);
            }
        }
        try {
            omn_rmassistaction("View", "LiveChat_PreChatSurvey");
        } catch (e) {
            logger.debug("omn error LiveChat_PreChatSurvey");
        }
    }

    myChatWiz.sendAddlinesForLE = function(tflg) {
        //Incrementing messageCount when we receive message from CCP if chat window is in minimized state and setting it to zero if chat is in maximize state
        if(lpChatWinMinimized){
           try {
            messageCount++;
			var readMessagesCount = sessionMgr.getReadMessagesCount();
			if ((messageCount >= readMessagesCount) && !tflg) {
				messageCount = messageCount - readMessagesCount;
			} else if (tflg && (typeof readMessagesCount === "undefined" || readMessagesCount == null || readMessagesCount <= 0)) {
				messageCount = 0;
				minimizedMessageCount++;
                        }
	        } catch (e) {
				console.log("==> " + e);
			}
        } else {
            messageCount = 0;
			minimizedMessageCount = 0;
			if (tflg) {
				var tempReadMessagesCount = parseInt(sessionMgr.getReadMessagesCount()) + 1;
				sessionMgr.setReadMessagesCount(tempReadMessagesCount);
			}
        }
		if(tflg){
		 if(sessionMgr.getlestate() == "chatting"){	
			sessionMgr.setchatIdle(new Date());
			clearTimeout(idlesessionVar);
			idlesessionVar = setTimeout(function() {
				lpChatCloseChatBtnClick();
			}, 600000);
		 }	
		}
    sendPostMessage({
                "lpEmbChatWiz": "LPNVPF",
                "CMD": "UIDESIGN",
                "value": "ADDLINES",
                "msgCount": messageCount
            });
   }   

   myChatWiz.addInfoMessageToChatMessagesforLE = function() {
	var infoMsgLine = lpCWAssist.lpChatMakeInfoNotificationMessage("Info", lpCWTagConst.lpMsg_CreditCardPatternDetected_InChat, lpChatFontSize);
       $(jqe(lpChatID_lpChatCurrMessagesSection)).append(infoMsgLine); //US1137693
        currentTranscript=currentTranscript+infoMsgLine;
        scrollToBottom();
   } 

   myChatWiz.ccMaskingForLE = function(text) {
      return ccMasking(text);  
   } 

   myChatWiz.lpChatWinNotifyFlashingStartforLE= function(){
       lpChatWinNotifyFlashingStart();
   }
   myChatWiz.setagentMapForLE = function(agentMap) {
      sessionMgr.setagentMap(agentMap);
    
   } 

   myChatWiz.getagentMapForLE = function() {
	var agentMap = sessionMgr.getagentMap(); 
       return agentMap;   
   } 
   
    myChatWiz.setSMMapForLE = function(SMMap) {
      sessionMgr.setSMMap(SMMap);
    
   } 
   
   myChatWiz.getlastSeqForLE = function() {
	var lastSeq = sessionMgr.getlastSeq(); 
       return lastSeq;   
   } 
   
    myChatWiz.setlastSeqForLE = function(lastSeq) {
      sessionMgr.setlastSeq(lastSeq);    
   }

   myChatWiz.getSMMapForLE = function() {
	var SMMap = sessionMgr.getSMMap(); 
       return SMMap;   
   } 

    myChatWiz.setlastSysMgforLE= function(lastSysMg) {
      sessionMgr.setlastSysMg(lastSysMg);
    
   } 

   myChatWiz.getsetlastSysMgForLE = function() {
	return sessionMgr.getlastSysMg(); 
   }
    myChatWiz.setlastAgentforLE= function(lastAgent) {
      sessionMgr.setlastAgent(lastAgent);
      sendPostMessage({
                            "lpEmbChatWiz": "LPNVPF",
                            "CMD": "CONTROL",
                            "value": "SET_lastAgent",
                            "ckValue": lastAgent
                        });
   } 
   myChatWiz.setlpInteractiveforLE= function(lpInteractive) {
      sessionMgr.setlpInteractive(lpInteractive);    
   }
   myChatWiz.showPostSurvey = function(postchaturl ){
	logger.debug("showing postchaturl survey...");
	$.ajax({
        url: postchaturl,
        dataType: 'jsonp',
        jsonpCallback: 'postSurvey',
        jsonp: false,
    });
   }
   
   myChatWiz.showPostChatSurveyForLEmessaging = function() {
            
	   var lepostchatsurvey;
       //if (sessionMgr.getMarvinChatEscalated())
      chatWinCloseable = true; //allow usr to click one more x/close to dismiss the chat window				
      screenState = screenStateType.EXITSURVEY;
      sessionMgr.setScreen(screenState);
      

      if(!vaInteractiveChat && !lpInteractiveChat){
           lpChatShowView(lpCWAssist.lpChatMakeEndChatSection(chatPriority),true);
           sessionMgr.stop();
      }else if(vaInteractiveChat && !lpInteractiveChat){
      if(!submittedVASurvey){  
        myChatWiz.showPostChatSurveyForAutomation();
      }else{
        lpChatShowView(lpCWAssist.lpChatMakeEndChatSection(chatPriority),true);
        sessionMgr.stop();
      }
            //var surRes='{"csat":"0","rtfscore":"0"}';
			var surRes='{"csat":"0","rtfscore":"0","fcrscore":"0"}';
            $('#sendofflinemsg').trigger( "click",surRes);
      }else{
      sessionMgr.stop();        
      if(expansionFlag=="credit")
             lepostchatsurvey = lpCWTagConst.leGCAPostchatsurveyJson;
       else       
            lepostchatsurvey = lpCWTagConst.lePostchatsurveyJson;

          myChatWiz.showPostChatSurvey(lepostchatsurvey);
       }
	 //  myChatWiz.showPostSurvey("https://lpdww554.trcw.us.aexp.com:2095/api/axpi/lecode/js/postSurvey.json");
	   
     /*   logger.debug("showPostChatSurvey Automation");
		
		if(ninaCurrentTranscript!="")
		{
			ninaCurrentTranscript='<div class="lpSystemMessageDiv ninaSystemDiv" id="ninaSystemMessage"><div><br/>This chat may be recorded and monitored. For your  <br/>security, click "End Chat" before leaving your computer <br/>unattended or when the chat is complete.</div> <div class="ninaHdrspace">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right corner</div></div>'+ninaCurrentTranscript;
			currentTranscript=ninaCurrentTranscript+currentTranscript;
		}
		
        sessionMgr.stop();
        chatWinCloseable = true; //allow usr to click one more x/close to dismiss the chat window				
        screenState = screenStateType.EXITSURVEY;
        $(jqe("lpChatLoadingSection")).remove(); //remove loading screen


        lpChatShowView(lpCWAssist.lpChatMakeSurveyContainerHtml(true), true);
        $(jqe("lpPreChatSurveySubmitBtn")).text(lpCWTagConst.lpBtn_Submit);
        $(jqe("lpPreChatSurveySectionTitle")).addClass("lpPostChatTitleHeader");
        $("#lpNinaTransferChatBtn").hide();
        $("#lpPrivacyStmntBtn").removeClass("addFloatleft");
        $("#lpSurveyQuestionsContainer").addClass("automationSurvey");
        
		
		
        $(jqe(lpChatID_lpChatSurveyQuestionsContainer)).append('<div id="lpChatSurveySectionQ0" class="lpChatSurveySectionQ"><div class="lpChatSurveySectionQdesc" tabindex="0"><div class="lpQuestionNumber">1.</div><div class="lpQuestionText">Overall, how would you rate the service you received during this contact with American Express?<span class="lpQuestionRequired"> *</span></div><span class="lpRequiredTxt">&nbsp;*</span><input type="hidden" id="lpSurveyQuestionID0" name="lpSurveyQuestionID0" value="1853379"></div><div class="lpAnswerOptions lpRadioBtnOptions " id="lpSurveyQuestionAns0"><label class="lpRadioBtnType"><input type="radio" id="marvinRadioPostChat1" class="lpAnserOptionsRadio" name="lpSurveyQuestionAns0" value="5"><div class="lpAnserOptionsDesc">Excellent</div><div style="clear:both;"></div></label><label class="lpRadioBtnType"><input type="radio" id="marvinRadioPostChat2" class="lpAnserOptionsRadio" name="lpSurveyQuestionAns0" value="4"><div class="lpAnserOptionsDesc">Very Good</div><div style="clear:both;"></div></label><label class="lpRadioBtnType"><input type="radio" id="marvinRadioPostChat3" class="lpAnserOptionsRadio" name="lpSurveyQuestionAns0" value="3"><div class="lpAnserOptionsDesc">Good</div><div style="clear:both;"></div></label><label class="lpRadioBtnType"><input type="radio" id="marvinRadioPostChat4" class="lpAnserOptionsRadio" name="lpSurveyQuestionAns0" value="2"><div class="lpAnserOptionsDesc">Fair</div><div style="clear:both;"></div></label><label class="lpRadioBtnType"><input type="radio" id="marvinRadioPostChat5" class="lpAnserOptionsRadio" name="lpSurveyQuestionAns0" value="1"><div class="lpAnserOptionsDesc">Poor</div><div style="clear:both;"></div></label></div></div><div id="lpChatSurveySectionQ1Err"><div class="lpErrorExclamation"><span></span></div><div id="lpChatSurveySectionQErrorA0" class="lpErrorMessage" tabindex="0">Complete the required field</div></div><div id="lpChatSurveySectionQ5" class="lpChatSurveySectionQ" ><div class="lpChatSurveySectionQdesc" tabindex="0"><div id="lpChatSurveySectionQ5Text" class="lpSubAnswerText">What could have been done to make this an excellent experience?</div><input type="hidden" id="lpSurveyQuestionID5" name="lpSurveyQuestionID5"></div><div class="lpAnswerOptions"><textarea type="text" id="lpSurveyQuestionAns5" cols="40"></textarea></div></div><div id="lpChatSurveySectionQ1" class="lpChatSurveySectionQ"><div class="lpChatSurveySectionQdesc" tabindex="0"><div class="lpQuestionNumber">2.</div><div class="lpQuestionText">Was the Virtual Assistant able to help you complete your transaction or address your inquiry?  <span class="lpQuestionRequired"> *</span></div><span class="lpRequiredTxt">&nbsp;*</span><input type="hidden" id="lpSurveyQuestionID0" name="lpSurveyQuestionID0"></div><div class="lpAnswerOptions  lpRadioBtnOptions " id="lpSurveyQuestionAns1"><label class="lpRadioBtnType"><input type="radio" id="marvinRadioPostChat6" class="lpAnserOptionsRadio" name="lpSurveyQuestionAns1" value="Yes"><div class="lpAnserOptionsDesc">Yes</div><div style="clear:both;"></div></label><label class="lpRadioBtnType"><input type="radio" id="marvinRadioPostChat7" class="lpAnserOptionsRadio" name="lpSurveyQuestionAns1" value="No"><div class="lpAnserOptionsDesc">No</div><div style="clear:both;"></div></label></div></div><div id="lpChatSurveySectionQ2Err"><div class="lpErrorExclamation"><span></span></div><div id="lpChatSurveySectionQErrorA1" class="lpErrorMessage" tabindex="0">Complete the required field</div></div><div id="lpChatSurveySectionQ6" class="lpChatSurveySectionQ"><div class="lpChatSurveySectionQdesc" tabindex="0"><div id="lpChatSurveySectionQ6Text" class="lpSubAnswerText">What would have improved this experience or helped you?</div><input type="hidden" id="lpSurveyQuestionID6" name="lpSurveyQuestionID6"></div><div class="lpAnswerOptions"><textarea type="text" id="lpSurveyQuestionAns6" cols="40"></textarea></div></div>');

       // $(jqe(lpChatID_lpPreChatMessagesSection)).find(".lpChatSurveySectionTextPost").html('<span style="font-size:13px;line-height:11px;text-align:left;display:block;margin-top: 20px;">We would like to hear about your experience</span>');
		
		 $(jqe(lpChatID_lpPreChatMessagesSection)).find(".lpChatSurveySectionTextPost").html('<span style="font-size:11px;line-height:14px;text-align:left;display:block;"><div id="postchatheader">Thank you for chatting today</div><div id="postchatheaderbody">Please take a moment to review your Chat and tell us how we did in the survey below.</div></span>');

		 unregisterEventHandler("lpChatTranscript", "click", function() {
                showChatTranscript();
            });
            registerEventHandler("lpChatTranscript", "click", function() {
               showChatTranscript();
            });
		 
        $("#lpChatSurveySectionQ1Err").hide();
        $("#lpChatSurveySectionQ2Err").hide();


        unregisterEventHandler("lpPreChatSurveySubmitBtn", "click", function() {
            exitSurveyBtnClickLE();
        });
        registerEventHandler("lpPreChatSurveySubmitBtn", "click", function() {
            exitSurveyBtnClickLE();
        });

    

        try {
            omn_rmassistaction("View", "LiveChat_PreChatSurvey");
        } catch (e) {
            logger.debug("omn error LiveChat_PreChatSurvey");
        }  */
    }

	myChatWiz.lesetjwtValue= function(jwtValue) {
	 sessionMgr.setjwtValue(jwtValue);  
	/*sendPostMessage({
	"lpEmbChatWiz": "LPNVPF",
	"CMD": "CONTROL",
	"value": "SET_JWTCOOKIE",
	"ckValue": jwtValue
	});*/	
    }
	myChatWiz.lesethistjwtValue= function(jwtValue) {
sessionMgr.sethistjwtValue(jwtValue);  
    }

	myChatWiz.lesetscType= function(scType) {
		sessionMgr.setcTypeValue(scType);
    }	
   myChatWiz.leChatCloseChatBtnClick= function() {
	lpChatCloseChatBtnClick();
   }

    myChatWiz.leChatCloseChatBtnClickConfirmed = function(){
		sendPostMessage({
					"lpEmbChatWiz": "LPNVPF",
					"CMD": "CONTROL",
					"value": "HIDE_END_CHAT_LAYER"
				});	
      lpChatCloseChatBtnClickConfirmed()
   } 
	myChatWiz.adjustMsgHeight= function() {
	adjustlpMsgHeight();
  }
  myChatWiz.getLatestSkill= function() {
	getLatestSkill();
  }  
  myChatWiz.scrollToBottomLE= function() {
	  
	if($("#recordedmsg").length > 0 && $("#recordedmsg").css("display") != "block"){
		$("#recordedmsg").show();
		scrollStatus = false;
		changeScrollStatus();
		adjustlpMsgHeight();
	}
	scrollToBottom(true);
   }
   
    myChatWiz.setWaitingLE= function() {
	  if($("#lpChatBodySection").html()!==""){
		  if(sessionMgr.getlestate()!="chatting"){
			sessionMgr.setlestate("waiting");
			setLestateCk("waiting");
		  }	
			  var refCtr = sessionMgr.getrefCtr();
			  sendPostMessage({
					"lpEmbChatWiz": "LPNVPF",
					"CMD": "CONTROL",
					"value": "SET_RFRSHWAIT",										
					"REFCTR":refCtr
			}); 
	  }
   }
   
   myChatWiz.invokeLErequestApi = function(pgreload){
    if(expansionFlag=="credit" && chatPriority ){
       if(transcriptData.length == 0){
        getMarvinChatHistory(false);
       } 
        invokeLErequestApi(pgreload);
	  }
   }
   
   myChatWiz.invokeLEevent = function(serviceId){
	if(sessionMgr.getlestate()=="chatting"){   
   var firstCardName = ""; 
   try{ 
   var tmpCobrowsexcut = sessionMgr.getXcut();
   if(typeof tmpCobrowsexcut!= "undefined" && tmpCobrowsexcut != null){
   var parsedCobrowsexcut = JSON.parse(tmpCobrowsexcut); 
   var xcutType = getCrossCutType(parsedCobrowsexcut); 
   var accountsList = getDataFromCrossCut(xcutobj, "accounts");
   
   if(accountsList != null && accountsList.length > 0){
     firstCardName = getDataFromAccounts(accountList, xcutType, "embossedName", 0)
   }
   }
   }catch(e){     
   }   
	
    var offerMsg='{"message":"sysmsg2__I have invited you to join a CoBrowse session"}'; 
    setTimeout(function() { 
       if(sessionMgr.getCobrowsesharing()!="true"){
      sendPostMessage({
					"lpEmbChatWiz": "LPNVPF",
					"CMD": "CONTROL",
					"value": "COBROWSE_INVITE",
					"serviceId" : lastServiceId,
					"agentId" : lastAgentId,
          "cmName" :  firstCardName             
				}); 
    }
    if(sessionMgr.getCobrowsestate()!= "open" && sessionMgr.getCobrowsesharing()!="true"){
		   $('#sendOffermsg').trigger( "click",offerMsg);
       sessionMgr.setCobrowsestate("open"); 
    }    
    }, 3000);     
  }		

   }
   
  myChatWiz.setofflinemessage = function(offlinemessages){			
    sessionMgr.setofflinemessage(offlinemessages);
   }
   
   myChatWiz.getofflinemessage = function(){			
    return sessionMgr.getofflinemessage();	   
   }
  myChatWiz.invokeLEAcceptevent = function(serviceId){			
    sessionMgr.setCobrowsesharing("true");	   
   }
   
   myChatWiz.invokeLECloseevent = function(serviceId){
	   sendPostMessage({
					"lpEmbChatWiz": "LPNVPF",
					"CMD": "CONTROL",
					"value": "COBROWSE_CANCEL"
				});	
   if(sessionMgr.getCobrowsesharing()=="true"){
     var offerMsg='{"message":"sysmsg2__CoBrowse session has ended"}';
		 $('#sendOffermsg').trigger( "click",offerMsg);
     sessionMgr.setCobrowsesharing("");	
   }     
	if(cob_widgetOpenStatus){			
	  var offerMsg='{"message":"sysmsg2__CoBrowse invitation canceled"}';
		$('#sendOffermsg').trigger( "click",offerMsg);
		sessionMgr.setCobrowsestate("close");	
    cob_widgetOpenStatus = false;
	}else{
		if(sessionMgr.getCobrowsestate()=="open"){			
			var lereadyTimer = setInterval(function(){
				   if(setLEready){
				    var offerMsg='{"message":"sysmsg2__CoBrowse invitation canceled"}';
                    $('#sendOffermsg').trigger( "click",offerMsg);	
					sessionMgr.setCobrowsestate("close");
					clearInterval(lereadyTimer); 
				   }
               }, 1000); 		    		
		}
	}
	
   }
   
    myChatWiz.rmRecmsgOnFirstMsg = function(){
		if($("#recordedmsg").length > 0){
			isRecordMsgExist = false;
			sessionMgr.setRecordMsgVal(isRecordMsgExist);
			setRecMonitorCk(isRecordMsgExist);
			$("#recordedmsg").remove();
			unregisterEventHandler(lpChatID_lpChatMessagesSection, "scroll", recordedMsgStatus);
            if(!isIPhone){
                unregisterEventHandler(lpChatID_lpChatMessagesSection, 'mousewheel DOMMouseScroll', mouseWheelEvent);
            }
			adjustlpMsgHeight();
		}
	}
   
    myChatWiz.getlpChatFontSize= function() {
		return lpChatFontSize;
   }
   
myChatWiz.playSoundType= function(playSoundFrom) {
	playAudio(playSoundFrom);
   }


 myChatWiz.leagentTyping= function(isTyping) {
       if(isTyping)
             $(jqe(lpChatID_lpChatAgentType)).css("visibility", "visible");       
	else
	      $(jqe(lpChatID_lpChatAgentType)).css("visibility", "hidden");
    }
 
   myChatWiz.leExitsurvey = function(ans1,ans2){
	sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "LEEXITSURVEY",
	     "ans1":ans1,
            "ans2":ans2 	
        });
   }
   
    myChatWiz.leReloadXCUT = function(){
	sendPostMessage({"lpEmbChatWiz": "LPNVPF", "CMD" : "UIDESIGN", "value" : "FORXCUTRELOAD"});
   }
   /*Send Marvin ID to LE on escalation*/
    myChatWiz.sendMarvinIDtoLE = function(){
     var marvinID = ""; 
     if(!isPreChatEscalated && marvinConversationId!=="" && marvinConversationId !="N"){ 
        //sendPostMessage({"lpEmbChatWiz": "LPNVPF", "CMD" : "CONTROL", "value" : "MARVINIDTOLE","mconvID":marvinConversationId});
        marvinID =  marvinConversationId;
     }
     return marvinID;
   }
    myChatWiz.getscreenState = function(){
        return screenState;
    }
  function exitSurveyBtnClickLE(surveydata) {

       /*  $("#lpChatSurveySectionQ0").removeClass("lpQuestionErrorBorder");
         $("#lpChatSurveySectionQ1").removeClass("lpQuestionErrorBorder");           
 
        var ans1 = $('input[name="lpSurveyQuestionAns0"]:checked').val();
        var ans2 = $('input[name="lpSurveyQuestionAns1"]:checked').val();

        $("#lpChatSurveySectionQ1Err").hide();
        $("#lpChatSurveySectionQ2Err").hide();
        validData = true;
        if (typeof ans1 == "undefined") {
            $("#lpChatSurveySectionQ1Err").show();
            $("#lpChatSurveySectionQErrorA0").show();
            $("#lpChatSurveySectionQ0").addClass("lpQuestionErrorBorder");
            validData = false;
        }
		var ans3 = $("#lpSurveyQuestionAns5").val();
		var ans4 = $("#lpSurveyQuestionAns6").val();
        if (typeof ans2 == "undefined") {
            $("#lpChatSurveySectionQ2Err").show();
            $("#lpChatSurveySectionQErrorA1").show();
            $("#lpChatSurveySectionQ1").addClass("lpQuestionErrorBorder");
            validData = false;
        }
         var jObj='{"rate": "'+ans1+'", "resolved":"'+ans2+'"}';
        if(validData) {
           $( "#sendexitsurvey" ).trigger( "click",JSON.parse(jObj) );
        }*/

	$( "#sendexitsurvey" ).trigger( "click",JSON.parse(surveydata) );

    }

 
        myChatWiz.disposeEndChatLE= function(ans1,ans2){
        logger.info("dispose end chat LE", "...");
       insideChatCreation = false;
		//console.log("Conversation ID: " + latestConvID);
		//console.log("Agent ID: " + lastAgentId);

		var agentName="";
		var agentEmpID="";
		if(typeof leagentMap != "undefined" && leagentMap != null) {
			agentName = leagentMap[lastAgentId];
			agentEmpID = leagentMap['Emp-'+lastAgentId];
		}
		if ((null == agentName || "" === agentName) && (null != leAgentEmpName && "" !== leAgentEmpName)) {
			agentName = leAgentEmpName;
		}
		if ((null == agentEmpID || "" === agentEmpID) && (null != leAgentEmpId && "" !== leAgentEmpId)) {
			agentEmpID = leAgentEmpId;
		}
	   // console.log('Agent Emp ID:'+agentEmpID);
		var question = ans1;
	
		 if(expansionFlag=="credit"){
		   if(question[1].answer=="Other (please specify)")
		   {
			   	csatresp=question[3].answer;
				question[3].answer= convertCCPRating(csatresp);
		   }else{	
				csatresp=question[2].answer;
				question[2].answer= convertCCPRating(csatresp);	
		   }
		}else{
			csatresp=question[0].answer; 
			question[0].answer= convertCCPRating(csatresp);
		}
		 
		
		if(expansionFlag=="credit"){
			 if(question[1].answer=="Other (please specify)"){
				 rtfscore = question[5].answer;		
				 question[5].answer = rtfscore.split(" ")[0];
			 }else{
				rtfscore = question[4].answer;	
				question[4].answer = rtfscore.split(" ")[0];				
			 }
		}else{
			rtfscore = question[2].answer;
			question[2].answer = rtfscore.split(" ")[0];	
		}
		
		if(expansionFlag=="credit"){
           fcrscore = question[0].answer;	
			question[0].answer = convertToFCR(fcrscore);
		}else{
			fcrscore = question[11].answer;
			question[11].answer = convertToFCR(fcrscore);
		}
		
		if(expansionFlag!="credit"){
			bfValue = question[6].answer;
			question[6].answer = convertCCPRating(bfValue);
			
			bfValue = question[7].answer;
			question[7].answer = convertCCPRating(bfValue);
			
			bfValue = question[8].answer;
			question[8].answer = convertCCPRating(bfValue);
			
			bfValue = question[9].answer;
			question[9].answer = convertCCPRating(bfValue);
			
			bfValue = question[10].answer;
			question[10].answer = convertCCPRating(bfValue);
		}
		
		var surveyType="Standard";
		if(expansionFlag == "credit") {
			surveyType="GCA";
		}

		invokeUILog(latestConvID, "INFO", "GUID: " + bbCookieOverride + ", survey_type: " + surveyType + ", agent_name: " + agentName + ", agent_ecn: " + agentEmpID + ", start_time: " + startEscalationTime + ", parent_page_url: " + parentpageurl);

		// submitQualtricsSurvey(question, latestConvID, agentName, agentEmpID, lastAgentId, surveyType, startEscalationTime);
		submitQualtricsNewSurvey(question, latestConvID, agentName, agentEmpID, lastAgentId, surveyType, startEscalationTime);
        sendPostMessage({
            "lpEmbChatWiz": "LPNVPF",
            "CMD": "CONTROL",
            "value": "LE_END_CHAT",
            "ans1":ans1,
			"qualtrics":question,
            "convID":latestConvID,
			"agentName":agentName,
			"agentEmpID":agentEmpID,
			"surveyType":surveyType,
			"startEscalationTime":startEscalationTime	
        });
        clearOnClose();
        lpChatShowView(lpCWAssist.lpChatScreenPostSurveySubmission(),true);
        resetAll();
    }

    /**
     * This method is used to submit survey data to DB.
     * 
     * @param {*} question
     * @param {*} latestConvID
     * @param {*} agentName
     * @param {*} agentEmpID
     * @param {*} agentPID
     * @param {*} surveyType
     * @param {*} startEscalationTime
     */
	function submitQualtricsNewSurvey(question, latestConvID, agentName, agentEmpID, agentPID, surveyType, startEscalationTime) {
		try {
			var qMap = sqMap;
			var bbPublicCookie = null;
			var xcutJSON = null;
			var surveyData = {};
			surveyData["conversationId"] = latestConvID;
			surveyData["agentName"] = agentName;
			surveyData["agentECN"] = agentEmpID;
			surveyData["agentPID"] = agentPID;
			surveyData["startDate"] = startEscalationTime;
			if (typeof convEndTime === "undefined" || null == convEndTime) {
				convEndTime = new Date().getTime();
			}
			surveyData["endDate"] = convEndTime;
			if (typeof startEscalationTime === "undefined" || null == startEscalationTime) {
				surveyData["startDate"] = convEndTime;
			}

			if (surveyType === "GCA") {
				surveyData["surveyType"] = "credit";
			} else {
				surveyData["surveyType"] = "standard";
			}

			if(cobrowseAcceptedOvr != "" && cobrowseAcceptedOvr == "yes") {
				surveyData["coBrowse"] = "Y";
			} else {
				surveyData["coBrowse"] = "N";	
			}
				
			if (typeof qMap === "undefined" || null == qMap) {
				if (typeof sessionMgr !== "undefined" && null != sessionMgr && typeof sessionMgr.getqMap !== "undefined" && null != sessionMgr.getqMap()) {
					qMap = sessionMgr.getqMap();
				}
			}

			try {
				if(typeof qMap['bbPublic'] != "undefined") {
					surveyData["guid"] = qMap['bbPublic'];
					bbPublicCookie = qMap['bbPublic'];
				} else if (typeof bbCookieOverride !== "undefined" && null != bbCookieOverride && "" !== bbCookieOverride) {
					surveyData["guid"] = bbCookieOverride;
					bbPublicCookie = bbCookieOverride;
				} else {
					surveyData["guid"] = '';
				}
			} catch (e) {
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while extracting GUID value from qMap.");
			}

			try {
				if(typeof qMap['sToken'] != "undefined") {
					surveyData["stoken"] = qMap['sToken'];
				} else {
					surveyData["stoken"] = '';
				}
			} catch (e) {
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while extracting stoken value from qMap.");
			}

			var surveyScores = {};
			var sObj1 = question;
			for(var i = 0; i < sObj1.length; i++) {
				try {
					var str = sObj1[i].answer;
					if (typeof str !== "undefined" && null !== str && "" !== str) {
						str = str.replace(/(?:\r\n|\r|\n){1,}/g, '|');
						str = str.replace(/[\u00A0-\u9999<>\&]/gim, function(i) {
							return '&#'+i.charCodeAt(0)+';';
						});
						surveyScores["q" + (i+1)] = str;
					}
				} catch (e) {
					invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while replacing special characters in answers. Error details: " + e.message);
				}
			}
			
			try {
				if (surveyType === "GCA") {
					surveyData["fcrRating"] = surveyScores['q1'];
					surveyData["osatRating"] = surveyScores['q3'];
					surveyData["osatVerbatim"] = surveyScores['q4'];
					surveyData["rtfRating"] = surveyScores['q5'];
				} else {
					surveyData["fcrRating"] = surveyScores['q12'];
					surveyData["osatRating"] = surveyScores['q1'];
					surveyData["osatVerbatim"] = surveyScores['q2'];
					surveyData["rtfRating"] = surveyScores['q3'];
					surveyData["chatReason"] = surveyScores['q5'];
				}
			} catch (e) {
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while extracting values from survey scores. Error details: " + e.message);
			}

			try {
				surveyData["skill"] = scType;
			} catch (e) {
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while setting skill from scType. Error details: " + e.message);
			}

			var tmplecardType = "";
			try {
				if(typeof qMap['cardType'] != "undefined") {
					tmplecardType = qMap['cardType'];
					tmplecardType = tmplecardType.replace(/[\u00A0-\u9999<>\&]/gim, function(i) {
						return '&#'+i.charCodeAt(0)+';';
					});
					surveyData["cardDescription"] = tmplecardType;
				} else {
					surveyData["cardDescription"] = '';
				}
			} catch (e) {
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while replacing special characters from card product description. Error details: " + e.message);
			}

			var tmpleproduct = "";
			try {
				if(typeof qMap['Product'] != "undefined") {
					tmpleproduct =  qMap['Product'];
					tmpleproduct = tmpleproduct.replace(/[\u00A0-\u9999<>\&]/gim, function(i) {
						return '&#'+i.charCodeAt(0)+';';
					});
					surveyData["cardType"] = tmpleproduct;
				} else {
					surveyData["cardType"] = '';
				}
			} catch (e) {
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while replacing special characters from card type. Error details: " + e.message);
			}
			surveyData["deviceType"] = getDeviceType();

			isValidJSON(surveyData, latestConvID, bbPublicCookie);
			sendSurveyNEW(surveyData, 0, latestConvID, bbPublicCookie);
		} catch (e) {
			logSurveyData(surveyData, latestConvID, bbPublicCookie);
			invokeUILog(latestConvID, "ERROR", "GUID: " + bbCookieOverride + " - Error while sending survey data to NEW Qualtrics. Error details: " + e.message);
		}
	}

    /**
     * This method is used to submit survey data to DB.
     * 
     * @param {*} surveyData
     * @param {*} counter
     * @param {*} latestConvID
     * @param {*} bbPublicCookie
     */
    function sendSurveyNEW(surveyData, counter, latestConvID, bbPublicCookie) {
		try {
            var startTime = new Date();
			surveyData['cmRetryCount'] = '' + counter;
			var qUrl = "https://clicktochat.americanexpress.com/chat/survey/save";
			/** Appending current time to URL to avoid cache issues */
			if (counter > 0) {
				qUrl = qUrl + "?t=" + startTime.getTime();
			}
			$.ajax({
				url: qUrl,
				type: "POST",
				contentType: "application/json; charset=utf-8",
				data: JSON.stringify(surveyData),
				crossDomain: true,
				cache: false,
                dataType: 'json',
                timeout: 60000,
				success: function(data) {
					// invokeUILog(latestConvID, "INFO", "GUID: " + bbPublicCookie + " - NEW Survey submitted to Qualtrics. Counter: " + counter + " - Time took: " + (new Date() - startTime) + "ms");
				},
				error: function(res, status, err) {
					logSurveyData(surveyData, latestConvID, bbPublicCookie);
					if (typeof res !== "undefined" && res != null) {
						invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while sending NEW survey data to Qualtrics. Counter: " + counter + " - Time took: " + (new Date() - startTime) + "ms - Response status: " + res.status + " - " + res.statusText + " - Response ready state: " + res.readyState + " - Status: " + status);
					}
					if(counter < 2) {
						counter++;
						sendSurveyNEW(surveyData, counter, latestConvID, bbPublicCookie);
					} else {
						sendSurveyAsXHR(surveyData, counter, latestConvID, bbPublicCookie);
					}
				}
			});
		} catch(e) {
			logSurveyData(surveyData, latestConvID, bbPublicCookie);
			invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Exception while sending NEW survey data to Qualtrics. Counter: " + counter + " - Error: " + e.message);
		}
	}

	/**
	 * This method is used to submit survey data to Qualtrics using XHR.
	 * 
	 * @param {*} surveyData
	 * @param {*} counter
	 * @param {*} latestConvID
	 * @param {*} bbPublicCookie
	 */
	function sendSurveyAsXHR(surveyData, counter, latestConvID, bbPublicCookie) {
		try {
			var startTime = new Date();
			var xhr = null;
			if (window.XMLHttpRequest) {
				xhr = new XMLHttpRequest();
			} else if (window.XDomainRequest) {
				/** IE 8 */
				xhr = new XDomainRequest();
			} else if (window.ActiveXObject) {
				try {
					xhr = new ActiveXObject("Msxml2.XMLHTTP")
				} catch (e) {
					try {
						xhr = new ActiveXObject("Microsoft.XMLHTTP")
					} catch (e) {
					}
				}
			}
			if (xhr != null) {
				xhr.open("POST", "https://clicktochat.americanexpress.com/chat/survey/save");
				xhr.setRequestHeader("Content-type", "application/json; charset=utf-8");
				xhr.timeout = 60000;
				xhr.send(JSON.stringify(surveyData));
				xhr.onreadystatechange = function() {
					/** XMLHttpRequest.DONE == 4 */
					if (xhr.readyState == XMLHttpRequest.DONE) {
						if (xhr.status == 200) {
							invokeUILog(latestConvID, "INFO", "GUID: " + bbPublicCookie + " - NEW XHR Survey submitted to Qualtrics. Counter: " + counter + " - Time took: " + (new Date() - startTime) + "ms");
						} else {
							invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while sending NEW survey data as XHR to Qualtrics. Counter: " + counter + " - Time took: " + (new Date() - startTime) + "ms - Response status: " + xhr.status + " - " + xhr.responseText + " - Response ready state: " + xhr.readyState);
							logSurveyData(surveyData, latestConvID, bbPublicCookie);
						}
					}
				};
				xhr.ontimeout = function () {
					invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Request timeout while sending NEW survey data as XHR to Qualtrics. Counter: " + counter + " - Time took: " + (new Date() - startTime) + "ms - Response status: " + xhr.status + " - " + xhr.responseText + " - Response ready state: " + xhr.readyState);
					logSurveyData(surveyData, latestConvID, bbPublicCookie);
				}
			}
		} catch(e) {}
	}

	/**
	 * This method is used to log an event in case survey data didn't make to server.
	 * 
	 * @param {*} surveyData
	 * @param {*} latestConvID
	 * @param {*} bbPublicCookie
	 */
	function logSurveyData(surveyData, latestConvID, bbPublicCookie) {
		try {
			if (window.btoa && window.JSON) {
				invokeUILog(latestConvID, "INFO", "GUID: " + bbPublicCookie + " - Survey - Encoded payload: " + btoa(JSON.stringify(surveyData)));
			} else if (window.JSON) {
				invokeUILog(latestConvID, "INFO", "GUID: " + bbPublicCookie + " - Survey - JSON payload: " + JSON.stringify(surveyData));
			} else {
				invokeUILog(latestConvID, "INFO", "GUID: " + bbPublicCookie + " - Survey - window.btoa and window.JSON methods are not available.");
			}
		} catch (e) {
			invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while logging survey data in logSurveyData method.");
		}
	}

	function submitQualtricsSurvey(question, latestConvID, agentName, agentEmpID, agentPID, surveyType, startEscalationTime) {
		// console.log("Qualtrics - Conversation ID: " + latestConvID);
		try {
			var qMap = sqMap;
			var bbPublicCookie = null;
			var xcutJSON = null;
			var surveyDetails = {};
			surveyDetails ["convID"] = latestConvID;
			surveyDetails ["agentName"] = agentName;
			surveyDetails ["agentEmpID"] = agentEmpID;
			surveyDetails ["agent_pid"] = agentPID;
			surveyDetails ["surveyType"] = surveyType;
			surveyDetails ["StartDate"] = startEscalationTime;
			if (typeof convEndTime === "undefined" || null == convEndTime) {
				convEndTime = new Date().getTime();
			}
			surveyDetails ["EndDate"] = convEndTime;
			if(cobrowseAcceptedOvr != "" && cobrowseAcceptedOvr=="yes"){
				surveyDetails ["cobrowse"] = "Y";
			}else{
				surveyDetails ["cobrowse"] = "N";	
			}
				
			if (typeof qMap === "undefined" || null == qMap) {
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbCookieOverride + " - qMap or sqMap is undefined or null.");
				if (typeof sessionMgr !== "undefined" && null != sessionMgr && typeof sessionMgr.getqMap !== "undefined" && null != sessionMgr.getqMap()) {
					qMap = sessionMgr.getqMap();
				}
			}

			if(typeof qMap['bbPublic'] != "undefined") {
				surveyDetails ["GUID"] = qMap['bbPublic'];
				bbPublicCookie = qMap['bbPublic'];
			} else if (typeof bbCookieOverride !== "undefined" && null != bbCookieOverride && "" !== bbCookieOverride) {
				surveyDetails ["GUID"] = bbCookieOverride;
				bbPublicCookie = bbCookieOverride;
			} else {
				surveyDetails ["GUID"] =  '';
			}
			
			if(typeof qMap['sToken'] != "undefined") {
				surveyDetails ["stoken"] = qMap['sToken'];
			} else {
				surveyDetails ["stoken"] = '';
			}

			var sObj1 = question;
			for(var i = 0; i < sObj1.length; i++) {
				try {
					str = sObj1[i].answer;
					if (typeof str != "undefined" && null != str) {
						str = str.replace(/(?:\r\n|\r|\n){1,}/g, '|');
						str = str.replace(/[\u00A0-\u9999<>\&]/gim, function(i) {
							return '&#'+i.charCodeAt(0)+';';
						});
						surveyDetails ["q"+(i+1)] = str;	
					}
				} catch (e) {
					//console.log("=> Qualtrics - Survey error - Error while replacing special characters in answers. Error details: " + e);
					invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while replacing special characters in answers. Error details: " + e.message);
				}
			}

			try {
				surveyDetails ["skill"] = scType;
			} catch (e) {
				//console.log("=> Qualtrics - Survey error - Error while extracting skill value from lpTag. Error details: " + e);
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while extracting skill value from lpTag. Error details: " + e.message);
			}
			var tmplecardType = "";
			try {
				if(typeof  qMap['cardType'] != "undefined") {
					tmplecardType = qMap['cardType'];
					tmplecardType = tmplecardType.replace(/[\u00A0-\u9999<>\&]/gim, function(i) {
						return '&#'+i.charCodeAt(0)+';';
					});
					surveyDetails ["cardtype"] = tmplecardType;
				} else {
					surveyDetails ["cardtype"] = '';
				}
			} catch (e) {
				//console.log("=> Qualtrics - Survey error - Error while replacing special characters from card product description. Error details: " + e);
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while replacing special characters from card product description. Error details: " + e.message);
			}

			var tmpleproduct = "";
			try {
				if(typeof  qMap['Product'] != "undefined") {
					tmpleproduct =  qMap['Product'];
					tmpleproduct = tmpleproduct.replace(/[\u00A0-\u9999<>\&]/gim, function(i) {
						return '&#'+i.charCodeAt(0)+';';
					});
					surveyDetails ["Product"] = tmpleproduct;
				} else {
					surveyDetails ["Product"] = '';
				}
			} catch (e) {
				//console.log("=> Qualtrics - Survey error - Error while replacing special characters from card type. Error details: " + e);
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while replacing special characters from card type. Error details: " + e.message);
			}
			surveyDetails ["deviceType"] = getDeviceType();
      
			isValidJSON(surveyDetails, latestConvID, bbPublicCookie);
			sendSurvey(surveyDetails, 0, latestConvID, bbPublicCookie);
		} catch (e) {
			//console.log("=> Qualtrics - Survey error: " + e);
			invokeUILog(latestConvID, "ERROR", "GUID: " + bbCookieOverride + " - Error while sending survey data to Qualtrics. Error details: " + e.message);
		}
	}

    /**
     * This method is used to submit survey data to Qualtrics.
     * 
     * @param {*} surveyDetails 
     * @param {*} cnt 
     * @param {*} latestConvID 
     * @param {*} bbPublicCookie 
     */
    function sendSurvey(surveyDetails, cnt, latestConvID, bbPublicCookie) {
		try {
            var startTime = new Date();
            var withCredentialsValue = (cnt == 0) ? true : false;
			surveyDetails ['cm_retry_count'] = '' + cnt;
			var qUrl = "https://clicktochat.americanexpress.com/chat/sendsurvey";
			$.ajax({
				url: qUrl,
				type: "POST",
				contentType: "application/json; charset=utf-8",
				data: JSON.stringify(surveyDetails),
				crossDomain: true,
                dataType: 'json',
                timeout: 60000,
				success: function(data) {
					// invokeUILog(latestConvID, "INFO", "GUID: " + bbPublicCookie + " - Survey submitted to Qualtrics. Counter: " + cnt + " - Time took: " + (new Date() - startTime) + "ms");
				},
				error: function(res, status, err) {
					invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while sending survey data to Qualtrics. Counter: " + cnt + " - Time took: " + (new Date() - startTime) + "ms - Response status: " + res.status + " - " + res.statusText + " - Response ready state: " + res.readyState + " - Status: " + status);
					if(cnt < 2) {
						cnt++;
						sendSurvey(surveyDetails, cnt, latestConvID, bbPublicCookie);
					}
				}
			});
		} catch(e) {
			invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Exception while sending survey data to Qualtrics. Counter: " + cnt + " - Error: " + e.message);
		}
	}

    /**
     * This method is used to validate JSON object.
     * 
     * @param {*} surveyDetails 
     * @param {*} latestConvID 
     * @param {*} bbPublicCookie 
     */
    function isValidJSON(surveyDetails, latestConvID, bbPublicCookie) {
        try {
            JSON.stringify(surveyDetails);
        } catch (e) {
			invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - JSON is Invalid. Error details: " + e.message);
        }
    }	

    //Commenting temporarily, has to be deleted after checking with business
    /*function validatePCRadio() {
        $("#lpChatSurveySectionQ0").removeClass("lpQuestionErrorBorder");
        $("#lpChatSurveySectionQ1Err").hide();
		
		var ans1 = $('input[name="lpSurveyQuestionAns0"]:checked').val();
		if(ans1!="Excellent"){
			//$("#lpChatSurveySectionQ5Text").html("What could have been done to make this an excellent customer experience?");
			$("#lpChatSurveySectionQ5Text").html("What could have been done to make this an excellent experience?");
		}else{
			$("#lpChatSurveySectionQ5Text").html("What specifically made the service you received excellent?");
		}
		$("#lpChatSurveySectionQ5").show();
    }*/
        /* function to show rating of selected(clicked) stars and also to show additional question text area, submit button  */
        function showRatingText(clickedElement){
                $('#ratingText').html(clickedElement.value);
                // logic to show additional comment section & submit button
                if ($(".selectedBtnStyle").length > 0){
                    // $('#feedbackQWrapper').show();
                    // $('#lpChatSurveySectionBtn').show();
                    $('#lpPreChatSurveySubmitBtn').removeClass("lpGrayButton lpPointer");
                    $('#lpPreChatSurveySubmitBtn').addClass("lpBlueButton lpPointer");
                }
        }
        /* function to highlight clicked yes & no buttons and also to show additional question text area, submit button  */
        function highlightQ1Btn(){
            $("#lpSurveyQuestionAns1").on("click", ".lpAnserOptionsRadio", function(){
                issueResolutionBtnValue = $(this).val();
                var $siblings = $(this).siblings();
                var cssClass = ($(this).val() === "Yes") ? 'selectedBtnStyle' : 'selectedBtnStyle';
                $siblings.removeClass("selectedBtnStyle");
                $(this).addClass(cssClass);
                // logic to show additional comment section & submit button
                if($('#ratingText').html()) {
                    // $('#feedbackQWrapper').show();
                    // $('#lpChatSurveySectionBtn').show();
                    $('#lpPreChatSurveySubmitBtn').removeClass("lpGrayButton lpPointer");
                    $('#lpPreChatSurveySubmitBtn').addClass("lpBlueButton lpPointer");
                }
            });
        }

        //Commenting temporarily, has to be deleted after checking with business
	/*function validatePC2Radio() {
        $("#lpChatSurveySectionQ1").removeClass("lpQuestionErrorBorder");
        $("#lpChatSurveySectionQ2Err").hide();
		var ans1 = $('input[name="lpSurveyQuestionAns1"]:checked').val();
		if(ans1=="No"){
			$("#lpChatSurveySectionQ6").show();
		}else{
			$("#lpChatSurveySectionQ6").hide();
		}	
    }*/

    // Survey FeedBack Click handler for text area to appear on top in small devices when clicked on it.
    function handleFeedBackClick() {
        //scroll down to the top position of the text area when click on in in small devices
        var pos = $(this).position();
        setTimeout(function(){
            $( "div.lpYscroll" ).scrollTop( pos.top );
        },1000);
    }
	function handleFeedBackLength(aText4Id){ //for US1537511 
		var aText4 = $("#"+aText4Id).val(); //for US1537511 
		aText4 = aText4.replace(/(?:\r\n|\r|\n){1,}/g, ' ');		
		if(aText4.length>3999){
			$("#checkLength").show();
		}else{
			$("#checkLength").hide();
		}
	}
	
    function validatePCSelect() {
        $("#lpChatSurveySectionQ1").removeClass("lpQuestionErrorBorder");
        $("#lpChatSurveySectionQ2Err").hide();
    }

	/* function to show free form question and submit button functionality  */
	function updateStandardSurveyQuestions(starRating, yesNoValue, recentAgentName) {
		if (starRating != "0" && (yesNoValue != null && yesNoValue !== "") && (sliderValue > "0" && sliderValue != "Select Likelihood")) {
			$('#lpPostChatSurveySubmitBtn').removeClass("lpGrayButton lpPointer");
			$('#lpPostChatSurveySubmitBtn').addClass("lpBlueButton lpPointer");
		}
        if(starRating != 0 ){
            $('.star-rating-label').css('color', '');
            $('.rate-star').css('color', '');
        }
        if(yesNoValue != null && yesNoValue !== ""){
            $('.did-resolve-label').css('color', '');
            $('.yesno-btn').css('border', "");
            $('.yesno-btn').css('color', "");
        }
        if(sliderValue > "0" && sliderValue != "Select Likelihood"){
            $('.recommend-label').css('color', '');
            $('#egSelect').css('color', '');
            $('.leave_response').css('border', "");
        }
        if(starRating != 0 && (yesNoValue != null && yesNoValue !== "") && sliderValue > "0"){

            $('.error-message-lable').hide();
        }

        if (starRating == 5 && yesNoValue == "yes" && sliderValue >= 7 ) {
            $("#selectQuest").html("Do you have any other comments or feedback?");
        } else if (starRating === 5 && yesNoValue === "yes" && (sliderValue <= 6 && sliderValue > 0 )) {
            $("#selectQuest").html('What would make you more likely to recommend us to a friend based on the service you just received?');
        } else if (starRating === 5 && yesNoValue === "no" && sliderValue >= 7) {
            $("#selectQuest").html("What would have helped resolve your request?");
        } else if (starRating === 5 && yesNoValue === "no" && (sliderValue <= 6 && sliderValue > 0)) {
            $("#selectQuest").html("What would have helped resolve your request?");
        } else if ((starRating <=4 && starRating > 0 ) && yesNoValue === "yes" && sliderValue >= 7) {
            if(typeof recentAgentName === "undefined" || recentAgentName == null || recentAgentName === "") {
                $("#selectQuest").html("What would have made the agent's service excellent?");
            } else {
                $("#selectQuest").html("What would have made " + recentAgentName + "'s service excellent?");
            }
        } else if ((starRating <=4 && starRating > 0 ) && yesNoValue === "yes" && (sliderValue <= 6 && sliderValue > 0)) {
            if(typeof recentAgentName === "undefined" || recentAgentName == null || recentAgentName === "") {
                $("#selectQuest").html("What would have made the agent's service excellent?");
            } else {
            $("#selectQuest").html("What would have made " + recentAgentName + "'s service excellent?");
            }
        } else if ((starRating <=4 && starRating > 0 ) && yesNoValue === "no" && sliderValue >= 7) {
            $("#selectQuest").html('We apologize for the experience you just had, what could we have done differently?');
        } else if ((starRating <=4 && starRating > 0 ) && yesNoValue === "no" && (sliderValue <= 6 && sliderValue > 0) ){
            $("#selectQuest").html('We apologize for the experience you just had, what could we have done differently?');
        }
	}

    /**
     * This method is used to submit survey data to LE and DB.
     * 
     * @param {*} data
     * @param {*} recentAgentName
     */
	function submitStandardSurveyData(data, recentAgentName) {
		try {
        var fcrScore = "0";
        var bbPublicCookie = null;
        var submitButtonClass = $('#lpPostChatSurveySubmitBtn').attr("class");
        if (typeof sqMap !== "undefined" && null != sqMap) {
            bbPublicCookie = sqMap['bbPublic'];
        }
        if((expansionFlag=="credit" && skill === "") || (skill === "US-GCA-en-GCA" || skill === "GCA") || (skill === "Transfer-US-GCA-en" || skill === "Transfer") || (skill === "US-GCA-Escalation" || skill === "Escalation") || (skill === "Transfer-US-GCA-en-SpecialHandling" || skill === "SpecialHandling")) {
			if (starRating != "0" && (yesNoValue != null && yesNoValue !== "") && (sliderValue > "0" && sliderValue != "Select Likelihood")) {
				var surveyData= new Array();
                if (typeof yesNoValue !== "undefined" && null != yesNoValue && yesNoValue === "yes") {
                    fcrScore = "1";
                } else {
                    fcrScore = "2";
                }
                surveyData[0] = {question: $('.did-resolve-label').text(), answer: fcrScore};
                surveyData[1] = {question: "", answer: ""};
                surveyData[2] = {question: $(".label-top").text(), answer: "" + starRating};
                surveyData[3] = {question: $("#selectQuest").text(), answer: $("#feedbackAnsLE").val()};
                surveyData[4] = {question: $(".recommend-label").text(), answer: "" + sliderValue};
                surveyData[5] = {question: "", answer: ""};
                surveyData[6] = {question: "", answer: ""};
                surveyData[7] = {question: "", answer: ""};
                surveyData[8] = {question: "", answer: ""};
                surveyData[9] = {question: "", answer: ""};
                surveyData[10] = {question: "", answer: ""};
                surveyData[11] = {question: "", answer: ""};
                surveyData[12] = {question: "", answer: ""};
                surveyData[13] = {question: "", answer: ""};
                surveyData[14] = {question: "", answer: ""};

				/** Send click event to messagingapi.js, which will set survey filling status in LP - Web Socket. */
                var rtfScoreReq = '{ "csat" : "' + starRating + '", "rtfscore" : "' + sliderValue + '", "fcrscore" : "' + fcrScore + '"}';
                $('#sendofflinemsg').trigger("click", rtfScoreReq);

                var agentName = "";
                var agentEmpID = "";
                if (typeof leagentMap != "undefined" && leagentMap != null) {
                    agentName = leagentMap[lastAgentId];
                    agentEmpID = leagentMap['Emp-' + lastAgentId];
                }
                if ((null == agentName || "" === agentName) && (null != leAgentEmpName && "" !== leAgentEmpName)) {
                    agentName = leAgentEmpName;
                }
                if ((null == agentEmpID || "" === agentEmpID) && (null != leAgentEmpId && "" !== leAgentEmpId)) {
                    agentEmpID = leAgentEmpId;
                }

                var surveyType = "Standard";
                if (expansionFlag == "credit") {
                    surveyType = "GCA";
                }
				try {
					invokeUILog(latestConvID, "INFO", "GUID: " + bbCookieOverride + ", survey_type: " + surveyType + ", agent_name: " + agentName + ", agent_ecn: " + agentEmpID + ", start_time: " + startEscalationTime);
				} catch (e) {}

                // submitQualtricsSurvey(surveyData, latestConvID, agentName, agentEmpID, lastAgentId, surveyType, startEscalationTime);
				submitQualtricsNewSurvey(surveyData, latestConvID, agentName, agentEmpID, lastAgentId, surveyType, startEscalationTime);

                sendPostMessage({
                    "lpEmbChatWiz": "LPNVPF",
                    "CMD": "CONTROL",
                    "value": "LE_END_CHAT",
                    "ans1": surveyData,
                    "qualtrics": surveyData,
                    "convID": latestConvID,
                    "agentName": agentName,
                    "agentEmpID": agentEmpID,
                    "surveyType": surveyType,
                    "startEscalationTime": startEscalationTime
                });

                clearOnClose();
                if (sliderValue >= 9) {
                    lpChatShowView(lpCWAssist.lpChatScreenPostSurveySubmission(), true);
                    $('#referFriendBanner').show();
                }
                else {
                    lpChatShowView(lpCWAssist.lpChatScreenPostSurveySubmission(), true);
                }
                // invokeUILog(latestConvID, "INFO", "GUID: " + bbPublicCookie + " - CM try to submit survey after answering all questions. Class: " + submitButtonClass + " - Star rating: " + starRating + " - Yes or No button: " + yesNoValue + " - Slider rating: " + sliderValue);
                resetAll();
            }
            if(starRating == "0" ) {
                $('.star-rating-label').css({"color":"#b42c01"});
                $('.rate-star').css({"color":"#b42c01"});
            }
            if(yesNoValue == "" || yesNoValue == null ) {
                $('.did-resolve-label').css({"color":"#b42c01"});
                $('.yesno-btn').css("border","1px solid #b42c01");
                $('.yesno-btn').css("color","#b42c01");
            }
            if(sliderValue == 0 || sliderValue =="Select Likelihood" ) {
                $('.recommend-label').css({"color":"#b42c01"});
                $('#egSelect').css({"color":"#b42c01"});
                $('.leave_response').css("border","1px solid #b42c01");
            }
            if(starRating == 0 || (yesNoValue == null || yesNoValue == "") || sliderValue == 0 ){
                $('.error-message-lable').show();
            }
        }
		else if (starRating != "0" && (yesNoValue != null && yesNoValue !== "") && (sliderValue > "0" && sliderValue != "Select Likelihood")) {
            var surveyData = new Array();
            surveyData[0] = { question : $(".label-top").text(), answer : "" + starRating };
            surveyData[1] = { question : $("#selectQuest").text(), answer : $("#feedbackAnsLE").val() };
            surveyData[2] = { question : $(".recommend-label").text(), answer : "" + sliderValue };
            surveyData[3] = { question : "", answer : "" };
            surveyData[4] = { question : "", answer : "" };
            surveyData[5] = { question : "", answer : "" };
            surveyData[6] = { question : "", answer : "" };
            surveyData[7] = { question : "", answer : "" };
            surveyData[8] = { question : "", answer : "" };
            surveyData[9] = { question : "", answer : "" };
            surveyData[10] = { question : "", answer : "" };
            if (typeof yesNoValue !== "undefined" && null != yesNoValue && yesNoValue === "yes") {
                fcrScore = "1";
            } else {
                fcrScore = "2";
            }
            surveyData[11] = { question : $('.did-resolve-label').text(), answer : fcrScore };
            surveyData[12] = { question : "", answer : "" };
            surveyData[13] = { question : "", answer : "" };
            surveyData[14] = { question : "", answer : "" };

			/** Send click event to messagingapi.js, which will set survey filling status in LP - Web Socket. */
            var rtfScoreReq = '{ "csat" : "' + starRating + '", "rtfscore" : "' + sliderValue + '", "fcrscore" : "' + fcrScore + '"}';
            $('#sendofflinemsg').trigger( "click", rtfScoreReq);

            var agentName = "";
            var agentEmpID = "";
            if(typeof leagentMap != "undefined" && leagentMap != null) {
                agentName = leagentMap[lastAgentId];
                agentEmpID = leagentMap['Emp-'+lastAgentId];
            }
			if ((null == agentName || "" === agentName) && (null != leAgentEmpName && "" !== leAgentEmpName)) {
				agentName = leAgentEmpName;
			}
			if ((null == agentEmpID || "" === agentEmpID) && (null != leAgentEmpId && "" !== leAgentEmpId)) {
				agentEmpID = leAgentEmpId;
			}

            var surveyType="Standard";
            if(expansionFlag == "credit") {
                surveyType="GCA";
            }

			try {
				invokeUILog(latestConvID, "INFO", "GUID: " + bbCookieOverride + ", survey_type: " + surveyType + ", agent_name: " + agentName + ", agent_ecn: " + agentEmpID + ", start_time: " + startEscalationTime);
			} catch (e) {}

            // submitQualtricsSurvey(surveyData, latestConvID, agentName, agentEmpID, lastAgentId, surveyType, startEscalationTime);
			submitQualtricsNewSurvey(surveyData, latestConvID, agentName, agentEmpID, lastAgentId, surveyType, startEscalationTime);

            sendPostMessage({
                "lpEmbChatWiz" : "LPNVPF",
                "CMD" : "CONTROL",
                "value" : "LE_END_CHAT",
                "ans1" : surveyData,
                "qualtrics" : surveyData,
                "convID" : latestConvID,
                "agentName" : agentName,
                "agentEmpID" : agentEmpID,
                "surveyType" : surveyType,
                "startEscalationTime" : startEscalationTime
            });


            clearOnClose();
            if(sliderValue >= 9) {
            lpChatShowView(lpCWAssist.lpChatScreenPostSurveySubmission(),true);
                $('#referFriendBanner').show();
            }
            else{
                lpChatShowView(lpCWAssist.lpChatScreenPostSurveySubmission(),true);
            }
            // invokeUILog(latestConvID, "INFO", "GUID: " + bbPublicCookie + " - CM try to submit survey after answering all questions. Class: " + submitButtonClass + " - Star rating: " + starRating + " - Yes or No button: " + yesNoValue + " - Slider rating: " + sliderValue);
            resetAll();
        } else {
            // invokeUILog(latestConvID, "WARN", "GUID: " + bbPublicCookie + " - CM try to submit survey without answering all questions. Class: " + submitButtonClass + " - Star rating: " + starRating + " - Yes or No button: " + yesNoValue + " - Slider rating: " + sliderValue);
            if(starRating == "0" ){
                $('.star-rating-label').css({"color":"#b42c01"});
                $('.rate-star').css({"color":"#b42c01"});
            }
            if(yesNoValue == "" || yesNoValue == null ){
                $('.did-resolve-label').css({"color":"#b42c01"});
                $('.yesno-btn').css("border","1px solid #b42c01");
                $('.yesno-btn').css("color","#b42c01");
            }
            if(sliderValue == 0 || sliderValue =="Select Likelihood" ){
                $('.recommend-label').css({"color":"#b42c01"});
                $('#egSelect').css({"color":"#b42c01"});
                $('.leave_response').css("border","1px solid #b42c01");
            }
            if(starRating == 0 || (yesNoValue == null || yesNoValue == "") || sliderValue == 0 ){
                $('.error-message-lable').show();
            }
        }
		} catch (e) {
			if (typeof latestConvID != "undefined" && null != latestConvID && typeof bbCookieOverride != "undefined" && null != bbCookieOverride) {
				invokeUILog(latestConvID, "ERROR", "GUID: " + bbCookieOverride + " - Exception while extracting survey data in submitStandardSurveyData. Error: " + e.message);
			} else {
				invokeUILog("NA", "ERROR", "GUID: NA - Exception while extracting survey data in submitStandardSurveyData. Error: " + e.message);
			}
		}
	}

	/*Differentiate the flows whether the cm has ended the VA chat directly or has escalated to LE from the survey screen*/
    function exitSurveyBtnClickAutomation(directExit) {
      submittedVASurvey = true;
      sessionMgr.setSubmittedVASurvey(true);
      sessionMgr.setCMcomments($("#feedbackAns").val());
       if(directExit){
        clearOnClose();
        sessionMgr.deleteSMMapFromSessionStorage(); 
       }
        var ans1 = starRating;
        var ans2 = yesNoValue;
        validData = true;
        if (typeof ans1 == "undefined" || ans1 == 0 || ans1 == "") {
            validData = false;
        }
        var ans4 = $("#feedbackAns").val();
        if (typeof yesNoValue == "undefined" || yesNoValue === null || yesNoValue === "") {
            validData = false;
        }
        if(starRating == "0" ){

            $('.astar-rating-label').css({"color":"#b42c01"});
            $('.arate-star').css({"color":"#b42c01"});
        }
        if(yesNoValue == "" || yesNoValue == null ){

            $('.adid-resolve-label').css({"color":"#b42c01"});
            $('.ayesno-btn').css("border","1px solid #b42c01");
            $('.ayesno-btn').css("color","#b42c01");
        }

        if(starRating == 0 || (yesNoValue == null || yesNoValue == "") ){

            $('.error-message-lable').show();
        }
        if (validData) {
            makeMarvinexitsurvey(ans1, ans2, ans4,directExit);
			starRating = 0;
			sliderValue = 0;
			yesNoValue = '';
        }
    }

    function makeMarvinexitsurvey(aText1, aText2, aText4,directExit) {
	
		var Marvin_PostchatQuestion1="Rate the service during this conversation";
		var Marvin_PostchatQuestion2="Did we resolve your request?";
		/*if(aText3!=""){
			aText1=aText1+"_"+aText3;
		}
		if(aText4!=""){
			aText2=aText2+"_"+aText4;
		}*/
		aText4 = aText4.replace(/(?:\r\n|\r|\n){1,}/g, ' ');
		aText4  = aText4.replace(/\\/g, "\\\\");
		aText4 = aText4.replace(/"/g, '\\"');
		
        if (marvinConversationId == "N") marvinConversationId = "";
        inpStr = '{"userId": "' + bbCookieOverride + '","conversationId": "' + marvinConversationId + '", "messageType": "postchatsurvey", "intentId": "","exp":"'+expansionFlag+'",	"messageId": "1",	"structured": {		"questionId": 1,		"questionType": "postchatsurvey",	"answers": [{	"questionId": 1,	"questionText": "' + Marvin_PostchatQuestion1 + '",	"answer": "' + aText1 + '"	}, {	"questionId": 2,		"questionText": "' + Marvin_PostchatQuestion2 + '" ,	"answer": "' + aText2 + '",	"feedback": "' + aText4 + '"}]},"channel": "livechat"}';
        //inpStr ='{"userId" : "'+bbCookieOverride+'",  "conversationId" : "'+marvinConversationId+'",  "intentId" : "",  "messageId" : "1",  "structured" : { "questionType" : "escalate" }, "channel" : "livechat"}';
        //logger.debug('inpStr:' + inpStr);

        $.ajax({
           url: 'https://apigateway.americanexpress.com/servicing/v1/cmchat/livechat',
            headers: {
				'Accept': 'application/json',
                'X-AMEX-API-KEY': 'e9868517-4f07-46c2-a31e-6c01651fab1e'
            },
            type: "POST",
            contentType: "application/json",
            crossDomain: true,
            //data: JSON.stringify(inpStr),
            data: inpStr,
			xhrFields: {
				withCredentials: true
			},
            success: function(data) {
                //alert('success::'+data);				
                //disposeEndChat();
                if(directExit)
                    lpChatShowView(lpCWAssist.lpChatScreenPostSurveySubmission(),true);
            },
            async: true,
            timeout: 5000,
            error: function(req, status, err) {
				invokeUILog("Marvin: " + marvinConversationId, "ERROR", "GUID: " + bbCookieOverride + " - Unable to post survey results - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);	
                logger.debug('something went wrong', ':' + status + ':', err, req.status);
                if(directExit)
                  disposeEndChat();
            }
        });

    }

        function showRatingTextforCENSurvey(clickedElement){
            $('#ratingTextCEN').html(clickedElement.value);
        }
/*US660762*/
    /**
     * dynamically create questions screen
     */
    function makeQuestionsHtml(data) {
        logger.debug("makeQuestionsHtml", "...");
        $('#lpChatSurveySectionBtn').show();
        var surveyContainer = ""; // 
        var surveyLogicInstance = new lpTag.taglets.SurveyLogic({
            survey: data
        });
        var activeQuestions = surveyLogicInstance.getActiveQuestionsIds();


        var surveyHeaderDesc = "";
        if (screenState == screenStateType.PRECHATSURVEY) {
            if (data.survey.header != 'undefined' && data.survey.header != null && data.survey.header != '') {
                surveyHeaderDesc = '<div class="lpChatSurveyHeaderdesc" tabindex="0">'
                surveyHeaderDesc += data.survey.header;
                surveyHeaderDesc += "</div>";
            } else {
                surveyHeaderDesc += "";
            }
        }
        if (surveyHeaderDesc != 'undefined' && surveyHeaderDesc != null && surveyHeaderDesc != '') {
            $(jqe(lpChatID_lpChatSurveyQuestionsContainer)).append(surveyHeaderDesc);
        }
        if (data.survey.questions) {
            var activeQuestionTemp = new Array();
            for (i = 0; i < data.survey.questions.question.length; i++) {
                question = data.survey.questions.question[i];
                if (activeQuestions.indexOf(question.id) > -1) {
                    //create DOM for active question
                    activeQuestionTemp.push(question.id);
                    makeQuestionWithLogicHtml(data, question, true);
                }
            }
            logger.debug("Active Questions ID List", activeQuestionTemp);
        }
    }

    /**
     * dynamically create questions with logic survey
     */
    function makeQuestionWithLogicHtml(data, question, visibleFlag) {
        logger.debug("makeQuestionWithLogicHtml", "...");
        var questionList = data.survey.questions;
        var questionDivID = "lpChatSurveySectionQ" + question.order;
        var questionErrorDivID = "lpChatSurveySectionQError" + question.order;
        var surveyContainer = '<div id="' + questionDivID + '" class="lpChatSurveySectionQ">';

        var surveyQuestionDesc = '<div class="lpChatSurveySectionQdesc" tabindex="0">'
        if (lpCWTagConst.lpUseAutoGenNumberOnSurvey) {
            surveyQuestionDesc += (questionIndex++) + '. ';
        }
        surveyQuestionDesc += question.label;
        if (question.mandatory) {
            surveyQuestionDesc += '<span class="lpRequiredTxt">&nbsp;*</span>'
        }
        surveyQuestionDesc += lpCWAssist.makeHiddenInput("lpSurveyQuestionID" + question.order, question.id);
        surveyQuestionDesc += "</div>";

        surveyContainer += surveyQuestionDesc;

        // add the input button
        surveyContainer += lpCWAssist.makeInputSection(dataTypes, question, question.order);
        surveyContainer += '</div>';

        //add error section
        surveyContainer += '<div id="' + questionErrorDivID + '" class="lpErrorMessage" tabindex="0"></div>';

        // inject into the existing DOM & register the onClickEvent
        $(jqe(lpChatID_lpChatSurveyQuestionsContainer)).append(surveyContainer);
        if (visibleFlag)
            $(jqe(questionDivID)).show();
        else
            $(jqe(questionDivID)).hide();

        //if survey logic found
        if (question.entry && question.entry.length) {
            //for each entries in the question, check for logic survey
            for (var j in question.entry) {
                var questOption = question.entry[j];
                if (questOption.logic && questOption.logic.showLogicId) {
                    var surveyLogicIdList = questOption.logic.showLogicId;
                    for (var x in surveyLogicIdList) {
                        var showLogicId = surveyLogicIdList[x];
                        var showQuestion = getQuestionByLogicId(data, showLogicId);
                        if (showQuestion) {
                            makeQuestionWithLogicHtml(data, showQuestion, false);
                        }
                    }
                }
            } //for
            if ($("#lpChatContent").length != 0 && question.type == dataTypes.DROPDOWN) {
                executeLogicEventForPreChat(data, question);
            } else {
                executeLogicEvent(data, question)
            }
        }

        onChangeQuestionHandler(data, question);
    }

    /**
     * get question data by logic id
     */
    function getQuestionByLogicId(data, logicId) {
        for (var i in data.survey.questions.question) {
            var question = data.survey.questions.question[i];
            if (question.logicId == logicId)
                return question
        }
        return;
    }

    /**
     * get question data by logic id for prechat survey
     */
    function executeLogicEventForPreChat(data, question) {
        if (question) {
            var elemId = "#lpSurveyQuestionAns" + question.order;
            $(elemId).click(function() {
                onChangeQuestionHandlerForLogic(data, question.id);
            });
        }
    }


    /**
     * execute when there is a question with logic attached
     */
    function executeLogicEvent(data, question) {
        if (question) {
            var elemId = "#lpSurveyQuestionAns" + question.order;
            $(elemId).change(function() {
                onChangeQuestionHandlerForLogic(data, question.id);
            });
        }
    }

    /**
     * perforance credit card pattern detecting and notify 
     */
    function checkAndNotifyCCMasking(data, question, fieldVal) {
        if (fieldVal != "" && question && question.type == dataTypes.TEXT || question.type == dataTypes.TEXT_AREA) {
            var valAfterCCMasking = ccMasking(fieldVal);
            if (valAfterCCMasking != fieldVal) {
                notificationDialog.open(lpCWTagConst.lpMsg_CreditCardPatternDetected_InSurvey, true);
            }
        }
    }

    /**
     * When dropdown question on value change, do the validation
     */
    function onChangeQuestionHandler(data, question) {
        /*logger.debug("question.validationType------>", question.validationType);
				if (question && (question.type == dataTypes.TEXT && question.validationType != "numeric")  || question.type == dataTypes.TEXT_AREA){
					logger.debug("question.validationType------>", "In if-------");
					var elemId = "#lpSurveyQuestionAns"+question.order;
					$(elemId).blur(function(){
								var val = $(elemId).val();
								if(val.trim() != ""){
									checkAndNotifyCCMasking(data, question, val.trim());
              		lpCWAssist.surveyQuestionHideRequired(dataTypes, question, false);
								}else{
									lpCWAssist.surveyQuestionShowRequired(dataTypes, question);
								}
						});
				}else{*/

        onChangeQuestionHandlerForLogic(data, question);
        //}
    }

    /**
     * When dropdown question on value change, do the validation with logic attached 
     */
    function onChangeQuestionHandlerForLogic(data, id) {
        logger.debug("onChangeQuestionHandlerForLogic", "-------");
        //logger.debug("onChangeQuestionHandlerForLogic", "id="+id);
        var surveyLogicInstance = new lpTag.taglets.SurveyLogic({
            survey: data
        });

        //retrieve question object & its answers
        var question = surveyLogicInstance.getQuestionById(id);
        var selectedValues = lpChatGetAnswer(question, question.order);
        //logger.debug("onChangeQuestionHandlerForLogic selectedValues=", selectedValues);
        if (typeof selectedValues != "object") {
            selectedValues = [];
            selectedValues[0] = lpChatGetAnswer(question, question.order);
        }

        if (selectedValues.length > 0 && selectedValues[0] == "") {
            lpCWAssist.surveyQuestionShowRequired(dataTypes, question);
        } else {
            //logger.debug("onChangeQuestionHandlerForLogic", "need to hide");
            lpCWAssist.surveyQuestionHideRequired(dataTypes, question, false);
        }

        for (var k in selectedValues) {
            var selectedValue = selectedValues[k];
            //logger.debug("onChangeQuestionHandlerForLogic k="+k+", selectedValue=", selectedValue);
            for (var j in question.entry) {
                var option = question.entry[j];
				try{
					var ordno = surveyLogicInstance.getQuestionByLogicId(option.logic.showLogicId[0]).order;
					$("#lpChatSurveySectionQError" + ordno).hide();
				}catch(e){
					logger.debug(e);
				}
                if (selectedValue == option.value) {
                    if (option.logic && option.logic.showLogicId) {
                        for (var m = option.logic.showLogicId.length - 1; m >= 0; m--) {
                            var logicQuestion = surveyLogicInstance.getQuestionByLogicId(option.logic.showLogicId[m]);
                            if (!jQuery.isEmptyObject(logicQuestion)) {
                                //logger.debug("onChangeQuestionHandlerForLogic show m="+m, logicQuestion.order);
								$("#lpChatSurveySectionQ" + logicQuestion.order).find(".lpQuestionErrorBorder").removeClass("lpQuestionErrorBorder");
                                $("#lpChatSurveySectionQ" + logicQuestion.order).show();
                            }
                        }
                    }
                }
            }
        }

        //hide all subsequent questions of survey logic questions
        surveyQuestionHideSurveyLogic(dataTypes, data, question);
    }

    /**
     * hide the require question and sub questions
     */
    function surveyQuestionHideSurveyLogic(dataTypes, data, question) {
        //logger.debug("****surveyQuestionHideSurveyLogic questions", question); 
        var surveyLogicInstance = new lpTag.taglets.SurveyLogic({
            survey: data
        });

        //retrieve question object & its answers
        var selectedValues = lpChatGetAnswer(question, question.order);

        for (var j in question.entry) {
            var option = question.entry[j];
            if ((selectedValues !== option.value)  && option.logic && option.logic.showLogicId) {
                for (var m = 0; m < option.logic.showLogicId.length; m++) {
                    var logicQuestion = surveyLogicInstance.getQuestionByLogicId(option.logic.showLogicId[m]);
                    if (!jQuery.isEmptyObject(logicQuestion)) {
                        //logger.debug("onChangeQuestionHandlerForLogic hiding..", logicQuestion);
                        lpCWAssist.surveyQuestionHideRequired(dataTypes, logicQuestion, true);
                        lpCWAssist.surveyQuestionHideReqRedBorder(dataTypes, logicQuestion, true);
                        surveyQuestionHideSurveyLogic(dataTypes, data, logicQuestion);
                    }
                }
            }
        }
    }

    /**
     * check agent availability
     */
    function checkAgentAvailability() {
        if (onInitTimerflag) {
            clearTimeout(onInitTimer);
            onInitTimerflag = false;
        }
        $(jqe(lpChatID_lpChatSlideOutContainer)).hide();

        var successCallback = function(data) {
            logger.debug("getAgentAvailabilty ", data);
			sendErrorAlert("Timestamp", "after agent availability success response -" + new Date());
            if (data.availability) {
                logger.debug("getAvailabilty", "true");
                checkForPreChatSurvey();
            } else {
                logger.debug("getAvailabilty", "false");
                sendErrorAlert("ccpunavailable", "NoAvailableAgents");
                if (offlineSurveyNameOverride != "")
                    showOfflineScreenBySurveyName(offlineSurveyNameOverride);
                else
                    showOfflineScreenBySkill(skill);
            }
        }

        var errorCallback = function(data) {
			sendErrorAlert("Timestamp", "after agent availability error response -" + new Date());
            logger.debug("getAgentAvailabilty.error", data);
			sendErrorAlert("cantconnect", "getAvailabilty call failed");
            if (offlineSurveyNameOverride != "")
                checkOfflineBySurveyName(offlineSurveyNameOverride);
            else
                checkOfflineBySkill(skill);
        }
		sendErrorAlert("Timestamp", "before agent availability-" + new Date());
        var failedRequest = chat.getAvailabilty({
            skill: skill,
            success: successCallback,
            error: errorCallback,
            context: myChatWiz
        });

        if (failedRequest && failedRequest.error) {
			sendErrorAlert("Timestamp", "after agent availability failed request -" + new Date());
            logger.debug("getAgentAvailabilty.error2", failedRequest.error);
			sendErrorAlert("cantconnect", "getAvailabilty call failed");
            if (offlineSurveyNameOverride != "")
                checkOfflineBySurveyName(offlineSurveyNameOverride);
            else
                checkOfflineBySkill(skill);
        }
    }

    /* loading the webservice screen prior moving to prechat survey screen */
    myChatWiz.loadWebServiceChat = function(pageurl) {
        logger.debug("loadWebServiceChat", " starting...");

       
            loadLPomn();
           // lpChatShowView(lpCWAssist.lpChatMakeSurveyContainerHtmlNew());        
            //$("#lpTextBlinking").css('display', 'block');
            //lpLoadingTextBlinking();
            /*lpChatShowView(lpCWAssist.lpChatMakeMessageSection(isAudioOn),true);
            showChatWizContainer();
			$(jqe(lpChatID_lpChatBodySection)).prepend(lpCWAssist.lpChatMakeRecordedMessgae());
            bindCloseButtonEvent(); 
            bindAllButtonEvents();
			adjustlpMsgHeight();*/
            if(nuanceFlowFlagOverrride.toUpperCase() == "AUTOMATION")
            {
                ninaBindEvents(false);  
                leAutomationdisplay();
            }   
	     //prechaturl = myChatWiz.framePreSurveyUrl(pageurl);	 
	     //myChatWiz.showPreSurvey(prechaturl );	          
        
    }
	
	/*function pushagentIdstoMap(agentId){
		agentIdset.add(agentId);
	}*/
	
	
	//Ajax function to get agent name in chathistory scenario
	function getAgentNm(agentId){
		
		$.ajax({
			url: "https://accdn.lpsnmedia.net/api/account/14106077/configuration/le-users/users/" + agentId,
			contentType: "application/json; charset=utf-8",
			jsonp: "cb",
			dataType: "jsonp",
			cache:false,
			success: function(data) {
				var agentNameLE;
				logger.debug("success::" + data.nickname);
			    agentNameLE = data.nickname;
				var agentMap = sessionMgr.getagentMap();
				logger.debug('callback agentName :' + agentNameLE);
				//console.log(agentId+":"+this.url+":"+agentNameLE);
				agentId = this.url.substring(this.url.lastIndexOf("/")+1, this.url.indexOf("?"));
				agentMap[agentId] = agentNameLE;
				var agentEmpID='Emp-'+agentId;
				agentMap[agentEmpID]=data.employeeId;
				sessionMgr.setagentMap(agentMap);
				leagentMap=agentMap;
				$("."+agentId).html(agentNameLE);
				leAgentEmpName = agentNameLE;
				if (typeof data.employeeId !== "undefined" && null != data.employeeId && "" !== data.employeeId) {
					leAgentEmpId = data.employeeId;
				}
			},
			error: function(req, status, err) {
				invokeUILog("LE Agent ID: " + agentId, "ERROR", "GUID: " + bbCookieOverride + " - Error while consuming LE users API. Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);
			}
		});
		
	}
	//Append chathistory to message body
	function appendHistoryMsg(role,originatorid,serverTimestamp,message,convid){
		var appendStr = "";
		try{
var messageOwnerTimestamp = "";
var agentNameLE = "";
appendStr = "";
var appendDate = "";
var d = new Date(serverTimestamp);
        var timeinampm = formatAMPM(d);
/*var monthNow = d.getMonth();
var dateNow = d.getDate();
var messageTimestamp = "" + monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear();
if(monthNow != monthhist){
appendDate = '<div class="conversationDate">'+messageTimestamp+'</div>';
}else if(dateNow != datehist){
appendDate = '<div class="conversationDate">'+messageTimestamp+'</div>';
}
monthhist = monthNow;
datehist = dateNow;
if(appendDate != ""){
$('#'+convid).append(appendDate);
}*/
message = message.replace(/&lt;/g, '<');
message = message.replace(/&gt;/g, '>');
message = message.replace(new RegExp('(\n){3,}', 'gim') , '\n\n');
message = message.replace(/(?:\r\n|\r|\n)/g,"</br>");

if(role == "CONSUMER"){
if(message.startsWith("Virtual Assistant :")){
//US1654868  
//messageOwnerTimestamp = "Virtual Assistant - " + monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + timeinampm;
messageOwnerTimestamp = "Virtual Assistant - " +  timeinampm;
var n = message.indexOf(":");
message = message.substring(n+1);
if(message.length > 0){
		var ignoreMsg = "to better assist you, please wait a moment while I bring in a Customer Care Professional";
		
		if(!(convid in vaMessages)){
			if(message.toLowerCase().indexOf(ignoreMsg.toLowerCase())>-1){				
				message = "";
			}else{
				vaMessages[convid] = 1;
			}
		}else{
			if(vaMessages[convid] == 1 && message.toLowerCase().indexOf(ignoreMsg.toLowerCase())>-1){
				delete vaMessages[convid];
				message = "";
			}else{
				vaMessages[convid] = vaMessages[convid]+1;
			}
		}		
	}
if(message.indexOf(" responseCode=") != -1){
		message = "";
	}	
if(message.length > 0){
if(message.indexOf("MChoice-")>-1){
	 message = message.replace("MChoice- ","");
	 var optionList = message.split("McOption: ");
appendStr = appendStr + '<div class="lpMessage" ><div class="lpPurpleBg lpLeftBubble lpPosRel lpBubble" onclick="togglelabel(this)"><div class="lpChatMsg" style="font-size:' + lpChatFontSize + 'px">';	 
	 appendStr =appendStr+'<div>'+optionList[0]+'</div>';
     for(i=1;i<optionList.length;i++){
     var option_img =  optionList[i];
     var option_img_arr = option_img.split("||");     
     if(option_img_arr.length > 1){       
       var imgsrc = option_img_arr[1].replace("</br>","");       
       if(imgsrc=="null"){
         imgsrc="https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/defaultcard.png";
       }
       appendStr = appendStr + '<div class="choicelinks" style="color: #666666;cursor: text;"><div class="cardWrapper"><span class="cardArt"><img src="'+imgsrc+'"></span><span class="cardInfo"><div class="cardDesc">'+option_img_arr[0]+'</div></span></div></div>';
     }else{       
		appendStr = appendStr + '<div class="choicelinks" style="color: #666666;cursor: text;">' + optionList[i] + '</div>';
     }    
	 }
appendStr = appendStr + '</div></div><div class="messageOwner">' + messageOwnerTimestamp + '</div></div>';	 
}else{	
	appendStr = '<div class="lpMessage" ><div class="lpPurpleBg lpLeftBubble lpPosRel lpBubble" onclick="togglelabel(this)"><div class="lpChatMsg" style="font-size:' + lpChatFontSize + 'px">' + message + '</div></div><div class="messageOwner">' + messageOwnerTimestamp + '</div></div>';
}
}else{
appendStr = '';
}
}else if(message.startsWith("Proactive Chat")){
  message = message.replace("Proactive Chat: ","");
  appendStr ='<div class="lpMessage">' +  '<div class="lpBlueBg lpLeftBubble lpPosRel lpBubble lpProactive lehistory" onclick="togglelabel(this)">'
            + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize  + 'px">' + message + '</div>' + '</div></div>';
}else if(message.startsWith("sysmsg")){
				var msgarray = message.split("_");
				if(msgarray.length == 3 && msgarray[1].length > 0 && msgarray[2].length > 0){
					appendStr = '<div class="lpTransferSystemMessageDiv"><span class="'+msgarray[1]+'"></span><span>'+ msgarray[1]+''+msgarray[2]+'</span></div>';
				}else if(msgarray.length == 3 && msgarray[1].length == 0 && msgarray[2].length > 0){
					appendStr = '<div class="lpTransferSystemMessageDiv"><span>'+ msgarray[2]+'</span></div>';
				}else if(msgarray.length == 2 && msgarray[1]=="Survey Completed"){
					appendStr = '<div class="lpTransferSystemMessageDiv"><span>'+ msgarray[1]+'</span></div>';
				}else{
					appendStr = '';
				}
				
			}
			else if(message.startsWith("*** Unable")){
					appendStr = '';		
			}else{
if(message.startsWith("CM :")){
var n = message.indexOf(":");
message = message.substring(n+1);
if(message.indexOf("Selected_Choice") != -1){
		message = message.replace("Selected_Choice","");
	}
}
//US1654868
//messageOwnerTimestamp = "You - " + monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + timeinampm;
messageOwnerTimestamp = "You - " + timeinampm;
if(message.length > 0){
appendStr = '<div class="lpMessage lpTextRight"><div class="lpGreenBg lpPosRel lpBubble lpRightBubble"  onclick="togglelabel(this)"><div class="lpChatMsg" style="font-size:' + lpChatFontSize + 'px">' + message + '</div></div><div class="messageOwner" >' + messageOwnerTimestamp + '</div></div>';
}else{
appendStr = '';
}
}
}else{
var agentMap = sessionMgr.getagentMap();
            var agentName = agentMap[originatorid]; 
            if (agentName == undefined) {
                agentIdLE = originatorid;
				if(originatorid!="NA")
					getAgentNm(originatorid);
				//pushagentIdstoMap(originatorid);
//US1654868        
//messageOwnerTimestamp = "<span class='"+agentIdLE+"'></span>" + " - " + monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + timeinampm;
messageOwnerTimestamp = "<span class='"+agentIdLE+"'></span>" + " - " + timeinampm;
            } else {
                logger.debug("Got from session");
                agentNameLE = agentName;
//US1654868                
//messageOwnerTimestamp = agentNameLE + " - " + monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear() + " " + timeinampm;
messageOwnerTimestamp = agentNameLE + " - " + timeinampm;
            }
message = checkForLinks(message);			
appendStr = '<div class="lpMessage" ><div class="lpBlueBg lpLeftBubble lpPosRel lpBubble" onclick="togglelabel(this)"><div class="lpChatMsg" style="font-size:' + lpChatFontSize + 'px">' + message + '</div></div><div class="messageOwner">' + messageOwnerTimestamp + '</div></div>';
}

if (appendStr != '')
            $('#'+convid).append(appendStr);
$(".messageOwner").addClass("addZeroSize");
if($(".messageOwner").last().attr("class").indexOf("greetm") ==-1 && $(".messageOwner").last().attr("class").indexOf("vamsg") ==-1){
        $(".messageOwner").last().removeClass("addZeroSize");
}

		}catch(e){
			//console.log("exception"+e);
			//console.log("appendStr:"+appendStr);
		}		
	//lpChatWidget.scrollToBottomLE();
	
}
	
	//function to show message section until chat history is loaded
	function hidemessageSection(){
		
		if(viewMoreHistoryFlag){
				$("#lpChatViewMoreHistory-img").show();
				$(chatHistoryDiv).hide();
		}else{
			if ($("#lpChatBodySection").length > 0) {
				$("#lpChatBodySection").hide();
			}
			if ($("#lpChatLoader").length > 0) {
				$("#lpChatLoader").show();
			}
		}
	}
	
	//function to show message section once chat history is loaded
	function showMessageSection(){
		//console.log("To open EW inside showmessage:"+viewMoreHistoryFlag);
		if(viewMoreHistoryFlag){
				$("#lpChatViewMoreHistory-img").hide();
				$(chatHistoryDiv).show();
				viewMoreHistoryFlag = false;
		}else{
			if ($("#lpChatLoader").length > 0) {
				$("#lpChatLoader").hide();
			}
			if ($("#lpPreChatMessagesSection").length > 0) {
				$("#lpPreChatMessagesSection").hide();
			}
			if ($("#lpChatBodySection").length > 0) {
				$("#lpChatBodySection").show();
			}
			lpChatWidget.scrollToBottomLE();
			adjustlpMsgHeight();
		}
		//displayViewMoreHistory(); 
    /* DE316244: SIT_CP1 Observations with Page Reload */
    try{
      if(chatPriority && expansionFlag == "credit"){
        if($("#chathistory .conversationDate:last").html() == $("#ninaChatMessageSection .conversationDate").html()){
          $("#ninaChatMessageSection .conversationDateWrapper").hide();
        }
      }
    }catch(e){}
		
	}
	function displayViewMoreHistory(){

		if(historytrailcount < 3){
			$("#lpChatViewMoreHistory").css("display","block");
			//console.log("View More History: see view more history ::: historytrailcount - "+historytrailcount);
			$("#lpChatViewMoreHistory a").off("click");
			$("#lpChatViewMoreHistory a").click(function(e){
				e.preventDefault();
				var jwtVal = sessionMgr.gethistjwtValue();
				//console.log("View More History: jwt val ::: "+jwtVal);
				if(jwtVal != "undefined" || jwtVal != null ){
					historytrailcount++;
					viewMoreHistoryFlag = true;
					$("#lpChatViewMoreHistory").css("display","none");
					//console.log("View More History: historytrailcount : "+historytrailcount+" Calling History APIs...");
					myChatWiz.historyRecords(jwtVal, historytrailcount, "");
				}else{
					//console.log("View More History: No jwt token in session");
				}
			});
		}else{
			//console.log("View More History: Three trials done ::: "+historytrailcount);
			$("#lpChatViewMoreHistory").css("display","none");
		}
	}
	//US1641394: Spike - Scroll history load - Desktop and Mobile Web
  function displayHistory(e){
     if (e.target.scrollTop === 0) {        
        if(!viewMoreHistoryFlag && historytrailcount < 3){
            $("#lpChatViewMoreHistory a").click();
        }        
    }
  }
	
	myChatWiz.historyRecords = function(historyjwttoken,trailcount,directchat,pagereload) {
		historytrailcount = (trailcount == 0) ? 1 : historytrailcount;
		sendPostMessage({"lpEmbChatWiz": "LPNVPF","CMD": "CONTROL","value": "HIST_TRAIL","count":historytrailcount});
		if(inhistoryrecords && historytrailcount == 1){
			return;
		}
		inhistoryrecords =true;
		if($("#lpChatMainMessageSection").length!=1){
			lpChatShowView(lpCWAssist.lpChatMakeMessageSection(isAudioOn),true);
		}	

		var isSmallDevice = deviceBucket === "Small" || (deviceBucket === "Medium" && getWindowOrientation() === "landscape");
		if(!xiconclicked && pagereload && isSmallDevice) {
			minimizeChatWizContainer();
		} else if (!xiconclicked) {
			showChatWizContainer("true");
		} else {
			return;
		}
		if(directchat && directchat!==""){
			if($("#recordedmsg").length!=1){
				$(jqe(lpChatID_lpChatBodySection)).prepend(lpCWAssist.lpChatMakeRecordedMessgae());
			}
		}
        bindCloseButtonEvent(); 
        bindAllButtonEvents();
		adjustlpMsgHeight();
		
	if(historyjwttoken=="error"){
		if(directchat){
			getMarvinReponse_prechat(""); 
		}else{
      //US1654868
      if(directchat !== ""){
          getMarvinChatHistory(true); 
      }     
    }
		historyLoaded=true;
		clearTimeout(showMessageSectionTO);
		setTimeout(showMessageSection,6);
		adjustlpMsgHeight();
		return;
	}	
	chatHistoryDiv = (historytrailcount == 3) ? '#chathistory3' : ((historytrailcount == 2) ? '#chathistory2' : '#chathistory');
hidemessageSection();
    var token = historyjwttoken;
    //call to first service to invoke Chat History api
    var d = new Date();
var endtime = d.getTime();
var endtimepgload = endtime;
var starttime;
if (trailcount == 2){
	starttime = endtime - (180 * 24 * 60 * 60 * 1000); //180 days
	endtime = (endtime - (90 * 24 * 60 * 60 * 1000)) -1;
}
else if (trailcount == 3){
	starttime = endtime - (360 * 24 * 60 * 60 * 1000); // 360 days 
	endtime = (endtime - (180 * 24 * 60 * 60 * 1000)) -1;
}
else{
	starttime = endtime - (90 * 24 * 60 * 60 * 1000); //90days
}
//console.log("historytrailcount in historyrecords"+historytrailcount);
if(pagereload){
	//console.log("historytrailcount in historyrecords pagreload"+historytrailcount);	
	if(historytrailcount==1)
		starttime = endtime - (90 * 24 * 60 * 60 * 1000);
	else if(historytrailcount==2)
		starttime = endtime - (180 * 24 * 60 * 60 * 1000);
	else if(historytrailcount==3)
		starttime = endtime - (360 * 24 * 60 * 60 * 1000); 
	
	endtime = endtimepgload;
}
	var url = "https://va.msghist.liveperson.net/messaging_history/api/account/14106077/conversations/consumer/metadata/search?state=close&startFrom="+starttime+"&startTo="+endtime+"&offset=0&limit=100&sort=start:desc";
	if(!xiconclicked){
    $.ajax({
        url: url,
        type: "GET",
        contentType: "application/json",
        dataType: "json",
        beforeSend: function(xhr, settings) {
            xhr.setRequestHeader('Authorization', 'Bearer ' + token);
			$.xhrPool.push(xhr);
        },
        success: function(data) {
            // calling the process function to prase the json response
            process(data,token,directchat);
        },
        error: function(req, status, err) {
            //console.log(err);
			invokeUILog("MessagingHisory: " + bbCookieOverride, "ERROR", "Messaging Hisory API failed - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);
			if(directchat){
				getMarvinReponse_prechat(""); 
			}else{
          //US1654868
          if(directchat !== ""){
            getMarvinChatHistory(true);
          }
        }
			historyLoaded=true;
			clearTimeout(showMessageSectionTO);
			setTimeout(showMessageSection,6);
			adjustlpMsgHeight();
			return;
        }
    });
	}
}


function getConvIDMessages(id2,get,token,directchat){
            // calling the second sevice to get the Chat history messages
			var url = 'https://va.msghist.liveperson.net/messaging_history/api/account/14106077/conversations/conversation/content/search?conversationId=' + id2;
            $.ajax({
                url: url,
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": 'Bearer ' + token
                },
                type: "get",
                crossDomain: true,
				beforeSend: function(jqXHR) {
					$.xhrPool.push(jqXHR);
				},
                success: function(data) {
                    //console.log(data);
                    var convdata = get[id2];
                    var records = data.messageEventRecords;
                    for (var n = 0; n < records.length; n++) {
                        if (records[n].event.type == "ContentEvent") {
							totalmsgs=totalmsgs+1;
                            var id = records[n].originatorId;
                            var message = records[n].event.message;
                            //US1706222: Handle LE messaging history with content type - forms/secure-invitation
                            try{
                              if (null != message && typeof message !== "object") {
                                  message = message.trim();
                              } else {
                                message = "";
                              }
                            }catch(e){
                              message = "";
                            }
                            var timestamp = records[n].serverTimestamp;
                            if (convdata.participants[id] == "CONSUMER") {
if(message.length > 0){
appendHistoryMsg("CONSUMER",id,timestamp,message,id2);
}
                            } else{// if (convdata.participants[id] == "ASSIGNED_AGENT") { //To append history for participant id "MANAGER" as well
if(message.length > 0){
appendHistoryMsg("ASSIGNED_AGENT",id,timestamp,message,id2);
}
                            }
                        }
                    } 
					
					noofconversationsprocessed=noofconversationsprocessed+1;
					
					if(noofconversations==noofconversationsprocessed){
						
						if(directchat){
							getMarvinReponse_prechat(""); 
						}else{
              //US1654868
              if(directchat !== ""){
                getMarvinChatHistory(true);
              }
            }
						clearTimeout(showMessageSectionTO);
						historyLoaded=true;						
						//setTimeout(showMessageSection,5000);
						//setTimeout(function(){ showMessageSection(); displayViewMoreHistory();},5000);
            //US1641394: Spike - Scroll history load - Desktop and Mobile Web
					setTimeout(function(){
            showMessageSection(); displayViewMoreHistory();
            var linkid = '#historylink'+historytrailcount;             
            $(linkid).focus();
          },5000); 
						
						adjustlpMsgHeight();
						//agentIdarr = setToArray(agentIdset);
						//myLoop(0);  
						
					}
                },
                error: function(req, status, err) {
                    //console.log(err);
					invokeUILog("HisoryConversation: " + bbCookieOverride, "ERROR", "Hisory Conversation API - Conversation API failed - Response status: " + req.status + " - " + req.statusText + " - Response ready state: " + req.readyState + " - Status: " + status);
					noofconversationsprocessed=noofconversationsprocessed+1;
					
					if(noofconversations==noofconversationsprocessed){
						
						if(directchat){
							getMarvinReponse_prechat(""); 
						}else{
              //US1654868
              if(directchat !== ""){
                getMarvinChatHistory(true);
              }
            }	
						clearTimeout(showMessageSectionTO);
						historyLoaded=true;
						
						//setTimeout(function(){ showMessageSection(); displayViewMoreHistory();},5000);
            //US1641394: Spike - Scroll history load - Desktop and Mobile Web
					setTimeout(function(){
            showMessageSection(); displayViewMoreHistory();
            var linkid = '#historylink'+historytrailcount;             
            $(linkid).focus();
          },5000); 
						adjustlpMsgHeight();
						//agentIdarr = setToArray(agentIdset);
						//myLoop(0); 
					}
                }

            });
}
    function process(input,token,directchat) {
        var conversationHistory = input.conversationHistoryMetadataRecords;
        //console.log(input);
        var length = conversationHistory.length;
		noofconversations=length;
		noofconversationsprocessed=0;
		if(length==0){
			historytrailcount=historytrailcount+1;
			if(historytrailcount < 4){
				myChatWiz.historyRecords(token,historytrailcount,directchat);
			}	
			else
			{		
			if(directchat){
				getMarvinReponse_prechat(""); 
			}else{
          //US1654868
          if(directchat !== ""){
            getMarvinChatHistory(true);
          }
        }
			historyLoaded=true;
			clearTimeout(showMessageSectionTO);
			setTimeout(showMessageSection,6);
			adjustlpMsgHeight();
			return;
				
			}
		}else{
			totalmsgsprocessed=0;
			totalmsgs=0;
		isconsolidated=false;
		var consolidatedconversationHistoryMetadataRecords = [];	
		consolidateRecords(input,consolidatedconversationHistoryMetadataRecords,token);
		var consTimer1 = setInterval(function(){
			if(isconsolidated){
		clearInterval(consTimer1);
		var finalRecords=[];
		for(var k=0;k<consolidatedconversationHistoryMetadataRecords.length;k++){
			finalRecords=finalRecords.concat(consolidatedconversationHistoryMetadataRecords[k]);
			
			//console.log(finalRecords);
		}
		conversationHistory=finalRecords;
		length=conversationHistory.length;
		noofconversations=length;
		noofconversationsprocessed=0;
        var messageRecord = [];
		lastconvId=conversationHistory[0].convId;
        for (var i = length - 1; i >= 0; i--) {
			if(!xiconclicked){
var part = {};
var get = [];
            var conv = conversationHistory[i].convId;
var serverTimestampconv = conversationHistory[i].startTs;
            var z = conversationHistory[i].participants;
            //console.log(z);
            var zlength = z.length;
            for (var k = 0; k < zlength; k++) {
                part[z[k].id] = z[k].role;
            }
            get[conv] = {
                'participants': part
            };
var appendDate = "";
var d = new Date(serverTimestampconv);
var timeinampm = formatAMPM(d);
var monthNow = d.getMonth();
var dateNow = d.getDate();
var messageTimestamp = "" + monthNames[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear();
           var noofdays = daysBetween(d,new Date());       //US1654868                         
           if(noofdays < 7){
              if(noofdays == 0)
                  messageTimestamp = "Today";                                 
              else if(noofdays == 1)
                  messageTimestamp = "Yesterday";
              else
                  messageTimestamp = getDayofWeek(d.getDay());
            }
					if(monthNow != monthhist){
            if($("#chathistory .conversationDate:last").html() !== messageTimestamp){
              appendDate = '<div class="conversationDateWrapper"><div class="conversationDate">'+messageTimestamp+'</div></div>';
            }
					}else if(dateNow != datehist){
            if($("#chathistory .conversationDate:last").html() !== messageTimestamp){
              appendDate = '<div class="conversationDateWrapper"><div class="conversationDate">'+messageTimestamp+'</div></div>';
            }
					}
monthhist = monthNow;
datehist = dateNow;
if(appendDate != ""){
$(chatHistoryDiv).append(appendDate);
}

if(conv != ""){	
$(chatHistoryDiv).append('<div id="'+conv+'"></div>');
getConvIDMessages(conv,get,token,directchat);
}else{
	noofconversationsprocessed=noofconversationsprocessed+1;
}
		}
        };
 var linkid = 'historylink'+historytrailcount;
 $(chatHistoryDiv).append('<a href="javascript:void(0)" id='+linkid+' style="color:white; font-size:2px; outline:none; ">Test Link</a>');        
}		
}, 500);		
//showMessageSectionTO=setTimeout(showMessageSection,25000);
//adjustlpMsgHeight();
	} 
    }

	
	function consolidateRecords(input,consolidatedconversationHistoryMetadataRecords,token)
	{//console.log(1);
		consolidatedconversationHistoryMetadataRecords.push(input.conversationHistoryMetadataRecords);
		if(typeof input._responseMetadata.next !="undefined" && typeof input._responseMetadata.next.href !="undefined"){	
		//console.log(2);
			nexturl = input._responseMetadata.next.href;
			if(!xiconclicked){
				
				$.ajax({
					url: nexturl,
					type: "GET",
					contentType: "application/json",
					dataType: "json",
					beforeSend: function(xhr, settings) {
						xhr.setRequestHeader('Authorization', 'Bearer ' + token);
					},
					success: function(data) {
						// calling the process function to prase the json response
						consolidateRecords(data,consolidatedconversationHistoryMetadataRecords,token)
					},
					error: function(data){
						isconsolidated=true;
					}
				});
			}else
			{
				return;
			}
			
	}else{
		isconsolidated=true;
	}
	}
	//function to load chat message section after marvin greeting
	myChatWiz.loadchatMessageSection = function() {
		      isRecordMsgExist = true;
			  sessionMgr.setRecordMsgVal(isRecordMsgExist);
			  setRecMonitorCk(isRecordMsgExist);
              screenState = screenStateType.CHATTING; 
              sessionMgr.setScreen(screenState);
			  isFirstMsgSent = false;
			  sessionMgr.setFirstMsgVal(isFirstMsgSent);
			  adjustlpMsgHeight();
		/*lpChatShowView(lpCWAssist.lpChatMakeMessageSection(isAudioOn),true);
        showChatWizContainer("true");
		$(jqe(lpChatID_lpChatBodySection)).prepend(lpCWAssist.lpChatMakeRecordedMessgae());
        bindCloseButtonEvent(); 
        bindAllButtonEvents();
		adjustlpMsgHeight();
		invokeleauthurl("","",true);*/
	}   
	

    myChatWiz.showPreSurvey = function(prechaturl ){
	logger.debug("showing prechat survey...");
	$.ajax({
        url: prechaturl,
        dataType: 'jsonp',
        jsonpCallback: 'preSurvey',
        jsonp: false,
    });
   }


    /*
     * fires when a start button clicked. Use to establish a new
     * connection
     */
    myChatWiz.loadChat = function(pageurl) {
        logger.debug("loadChat", "...");
        /* reset variables */
        chatState = null;
        //screenState = "";
        deleteAPI_instance();
   	insideChatCreation=true;
       // setTimeout(function(){myChatWiz.loadWebServiceChat(pageurl); }, 3000);
	   isFirstMarvincall = true;
	   isSecondMarvincall=false;
     botresponsegreaterthan2 = false;
	   isCommonTopicsFirstDisplayed = false;
	   	 marvinConversationId="N";
		 sessionMgr.setMarvinConversId(marvinConversationId);	
		 //console.log("invokeleauthurl 4");
		 invokeleauthurl("","",true);
	   //getMarvinReponse_prechat("");
    } 

    /*
     * each page will load this method to check for existing Chat
     * session.
     */
    myChatWiz.reEstChatConnection = function() {
        logger.debug("reEstablishChat", "...");
        var qstr = getQueryStrings();
        // var devBucket="";
        var rWidth="";
        if (typeof qstr["dB"] != "undefined")
            deviceBucket = qstr["dB"];             
        if (typeof qstr["rW"] != "undefined")
            rWidth = qstr["rW"]; 
        var tmpClass = document.getElementById("lpChatWizFrameContainer").className;
        tmpClass = tmpClass.replace(/\bres_.*?\b/g, '');
        if(deviceBucket!="")
          tmpClass = tmpClass + " res_"+deviceBucket;
        if(rWidth != "")
          tmpClass = tmpClass + " res_"+rWidth;
        document.getElementById("lpChatWizFrameContainer").className = tmpClass;
        if (typeof qstr["dH"] != "undefined")        
           deviceOrientationHeight = qstr["dH"];
        
        var allowchattransfer = false;
        if (window.location.search.indexOf("travelpage=true") != -1) {
            allowchattransfer = true;
        } else if (window.location.search.indexOf("userloggedin=true") == -1 && (window.location.search.indexOf("lpctrycd=US") != -1 || window.location.search.indexOf("lpctrycd=en-US") != -1)) {

            lpChatCloseChatBtnClick();
            return false;
        }
		sendPostMessage({"lpEmbChatWiz": "LPNVPF", "CMD" : "UIDESIGN", "value" : "FROMRESTABLISH"});
		var tmplpChatWizButtonName1='';
        if (lpCWAssist.isBrowserCompatible()) {
            windowState = windowStateType.READY;
            sessionMgr.reloadDataFromSessionStorage();
            //sendPostMessage({"lpEmbChatWiz": "LPNVPF", "CMD" : "CONTROL", "value" : "FROMRESTABLISH"});
            if ((window.location.search.indexOf("lpchatactive=true") != -1)) {
                if (!sessionMgr.isChatStarted()) {
                    logger.debug("Populate data from cookie");
					invokeUILog("Marvin: " + marvinConversationId, "INFO", "GUID: " + bbCookieOverride + "Populate data from cookie LEchat");
                    callResume = true;
                    var qs = getQueryStrings();
                    // reloadSessionfromCookiedata();
                    if (typeof qs["lpSUID"] != "undefined")
                        lpSUID = qs["lpSUID"];                    
                    if (typeof qs["skill"] != "undefined")
                        skill = qs["skill"];                    
                    if (typeof qs["lpVisitorSessionId"] != "undefined")
                        lpVisitorSessionId = qs["lpVisitorSessionId"];                  
				
					/*if (typeof qs["btnNameRef"] != "undefined")
                        tmplpChatWizButtonName1 = qs["btnNameRef"];
                    if (typeof qs["offlineSurveyNameOverride"] != "undefined")
                        offlineSurveyNameOverride = qs["offlineSurveyNameOverride"];
                    if (typeof qs["preChatSurveyNameOverride"] != "undefined")
                        preChatSurveyNameOverride = qs["preChatSurveyNameOverride"];
                    if (typeof qs["exitSurveyNameOverride"] != "undefined")
                        exitSurveyNameOverride = qs["exitSurveyNameOverride"];*/
                    if (typeof qs["lpupdate"] != "undefined")
                        lpupdate = qs["lpupdate"];
		    if (typeof qs["jwtValue"] != "undefined")
                        jwtValue = qs["jwtValue"];
					if (typeof qs["levisitorId"] != "undefined")
                        levisitorId = qs["levisitorId"];
					if (typeof qs["lesessionId"] != "undefined")
                        lesessionId = qs["lesessionId"];
					if (typeof qs["leinteractionContextId"] != "undefined")
                        leinteractionContextId = qs["leinteractionContextId"];
					if (typeof qs["lecid"] != "undefined")
                        lecid = qs["lecid"];
					if (typeof qs["leeid"] != "undefined")
                        leeid = qs["leeid"];
					if (typeof qs["lelastAgent"] != "undefined")
                        lelastAgent = qs["lelastAgent"];
					if (typeof qs["lprecmon"] != "undefined")
                        lprecmon = qs["lprecmon"];
					if (typeof qs["lpstate"] != "undefined")
                        lpstate = qs["lpstate"];
					if (typeof qs["lepriority"] != "undefined")
                        lepriority = qs["lepriority"];
                    /*if (typeof qs["smdatacore"] != "undefined")
                        smdatacore = qs["smdatacore"];
                    smdatacore = decodeURIComponent(smdatacore)*/
					
					
					
                    //added here for session
                    //lpsessionstorageval = getCookie_AA("smdatacore");
                    //logger.debug("smdatacore in core ->"+smdatacore);
                    //sessionMgr.saveLpValToStorageFromCookie(lpSUID, smdatacore);
                    sessionMgr.setChatWizParam(skill, lpSUID, lpVisitorSessionId);
                    //sessionMgr.setChatWizSurveyParam(preChatSurveyNameOverride, offlineSurveyNameOverride, exitSurveyNameOverride);
                    sessionMgr.saveChatLastUpdateToStorageFromCookie(lpupdate);
					//sessionMgr.saveChatLastUpdateToStorageFromCookie("true");
		    sessionMgr.setjwtValue(jwtValue); 
                    sessionMgr.setAudio(true);
                    sessionMgr.setFontSize("13px");		
					sessionMgr.setcidValue(lecid);
					sessionMgr.seteidValue(leeid);	
					sessionMgr.setlevisitorId(levisitorId);
					sessionMgr.setlesessionId(lesessionId);
					sessionMgr.setleinteractionContextId(leinteractionContextId); 
					sessionMgr.setlastSysMg(lelastAgent);	
					sessionMgr.setRecordMsgVal(lprecmon);
					sessionMgr.setlestate(lpstate);
					sessionMgr.setChatPriority(lepriority);
					//sessionMgr.setbtnNameRef(tmplpChatWizButtonName1);		
							
                }
            }

			if ((window.location.search.indexOf("marvinchatactive=true") != -1)) {
				 if (sessionMgr.getMarvinConversId()=="") {
					  logger.debug("Populate data from cookie marvin");
					  invokeUILog("Marvin: " + marvinConversationId, "INFO", "GUID: " + bbCookieOverride + "Populate data from cookie VAchat");
					 var qs = getQueryStrings();
					  if (typeof qs["setatbbv"] != "undefined")
                        setatbbv = qs["setatbbv"];
					
					 if (typeof qs["setatesc"] != "undefined")
                        setatesc = qs["setatesc"];
					
					 if (typeof qs["setatcnvsid"] != "undefined")
                        setatcnvsid = qs["setatcnvsid"];
					
					sessionMgr.setMarvinConversId(setatcnvsid);
					if(setatesc=="true")
						sessionMgr.setMarvinChatEscalated(true);
					else
						sessionMgr.setMarvinChatEscalated(false);
					sessionMgr.setblueboxValue(setatbbv);
					
					if (typeof qs["lpSUID"] != "undefined")
                        lpSUID = qs["lpSUID"];                    
                    if (typeof qs["skill"] != "undefined")
                        skill = qs["skill"];                    
                    if (typeof qs["lpVisitorSessionId"] != "undefined")
                        lpVisitorSessionId = qs["lpVisitorSessionId"];                  
					
					/*if (typeof qs["btnNameRef"] != "undefined")
                        tmplpChatWizButtonName1 = qs["btnNameRef"];
                    if (typeof qs["offlineSurveyNameOverride"] != "undefined")
                        offlineSurveyNameOverride = qs["offlineSurveyNameOverride"];
                    if (typeof qs["preChatSurveyNameOverride"] != "undefined")
                        preChatSurveyNameOverride = qs["preChatSurveyNameOverride"];
                    if (typeof qs["exitSurveyNameOverride"] != "undefined")
                        exitSurveyNameOverride = qs["exitSurveyNameOverride"];
                    if (typeof qs["lpupdate"] != "undefined")
                        lpupdate = qs["lpupdate"];*/
                    /*if (typeof qs["smdatacore"] != "undefined")
                        smdatacore = qs["smdatacore"];
                    smdatacore = decodeURIComponent(smdatacore)
			*/		
					if (typeof qs["jwtValue"] != "undefined")
                        jwtValue = qs["jwtValue"];
					if (typeof qs["expflag"] != "undefined")
                        expansionFlag= qs["expflag"];
					if (typeof qs["levisitorId"] != "undefined")
                        levisitorId = qs["levisitorId"];
					if (typeof qs["lesessionId"] != "undefined")
                        lesessionId = qs["lesessionId"];
					if (typeof qs["leinteractionContextId"] != "undefined")
                        leinteractionContextId = qs["leinteractionContextId"];
					if (typeof qs["lecid"] != "undefined")
                        lecid = qs["lecid"];
					if (typeof qs["leeid"] != "undefined")
                        leeid = qs["leeid"];
					
					if (typeof qs["lelastAgent"] != "undefined")
                        lelastAgent = qs["lelastAgent"];
					if (typeof qs["lprecmon"] != "undefined")
                        lprecmon = qs["lprecmon"];
					if (typeof qs["lpstate"] != "undefined")
                        lpstate = qs["lpstate"];
					if (typeof qs["lepriority"] != "undefined")
                        lepriority = qs["lepriority"];	
					
                    //added here for session
                    //lpsessionstorageval = getCookie_AA("smdatacore");
                    //logger.debug("smdatacore in core ->"+smdatacore);
                    //sessionMgr.saveLpValToStorageFromCookie(lpSUID, smdatacore);
					sessionMgr.setjwtValue(jwtValue);
					sessionMgr.setExpansionFlag(expansionFlag);	
                    sessionMgr.setChatWizParam(skill, lpSUID, lpVisitorSessionId);
                    //sessionMgr.setChatWizSurveyParam(preChatSurveyNameOverride, offlineSurveyNameOverride, exitSurveyNameOverride);                   
                    sessionMgr.setAudio(true);
                    sessionMgr.setFontSize("13px");	
					sessionMgr.setcidValue(lecid);
					sessionMgr.seteidValue(leeid);	
					sessionMgr.setlevisitorId(levisitorId);
					sessionMgr.setlesessionId(lesessionId);
					sessionMgr.setleinteractionContextId(leinteractionContextId); 
					sessionMgr.setlastSysMg(lelastAgent);
					sessionMgr.setRecordMsgVal(lprecmon);
					sessionMgr.setlestate(lpstate);
					sessionMgr.setChatPriority(lepriority);
					//sessionMgr.setbtnNameRef(tmplpChatWizButtonName1);
				 }
			}
			

            logger.debug("reEstablishChat", "isChatStarted=" + (sessionMgr.isChatStarted() ? "true" : "false") +
                ", isActiveChatSession" + (sessionMgr.isActiveChatSession() ? "true" : "false"));
            //logger.debug("isChatStarted=" + sessionMgr.isChatStarted());	
            //logger.debug("isActiveChatSession="+sessionMgr.isActiveChatSession());

            if ((sessionMgr && sessionMgr.isChatStarted() && sessionMgr.getScreen() != "EXIT_SURVEY") || sessionMgr.getlestate()=="waiting" || sessionMgr.getcTypeValue() == "US-PersonalLoans-en-Standard" || sessionMgr.getlestate()=="waitingforcminput" ) {
                    sendPostMessage({
                        "lpEmbChatWiz": "LPNVPF",
                        "CMD": "UIDESIGN",
                        "value": "HIDECLOSEBTN"
                    });
                    logger.debug("reEstablishChat", "actvie session and valid session found");
                    isAudioOn = sessionMgr.isAudioOn();
                    lpChatFontSize = sessionMgr.getFontSize();
                    lpSUID = sessionMgr.getSUID();                   
                    //offlineSurveyNameOverride = sessionMgr.getOfflineChatSurveyNameOverride();
                    //preChatSurveyNameOverride = sessionMgr.getPreChatSurveyNameOverride();                   
                    //exitSurveyNameOverride = sessionMgr.getExitChatSurveyNameOverride();
                    lpVisitorSessionId = sessionMgr.getVisitorSessionID();
                    visitorId = sessionMgr.getVisitorID();
                    //skill = sessionMgr.getChatSkill();
                    marvinConversationId = sessionMgr.getMarvinConversId();
                    bbCookieOverride = sessionMgr.getblueboxValue();
					jwtValue= sessionMgr.getjwtValue();
			        visitorIdForLE = sessionMgr.getlevisitorId();
					sessionId = sessionMgr.getlesessionId();
					interactionContextId = sessionMgr.getleinteractionContextId();  
                                 var lastsysmsg = sessionMgr.getlastSysMg();
								 var lastAgent = sessionMgr.getlastAgent();
                                 lpInteractiveChat = sessionMgr.getlpInteractive();
                                 vaInteractiveChat = sessionMgr.getvaInteractive(); 
								 expansionFlag = sessionMgr.getExpansionFlagval();
								 isRecordMsgExist = sessionMgr.getRecordMsgVal();
								 startEscalationTime = sessionMgr.getstartEscalationTime();
								 $("#lpChatBodySection").hide();
								 $("#lpChatFrameContainer").append(lpCWAssist.lpChatMakeLoaderHtml(),"");
								 //$("#lpChatFrameContainer").append(lpCWAssist.lpChatMakeLoadingScreenHtmlNew(),"");
					cid = sessionMgr.getcidValue();
					eid = sessionMgr.geteidValue();
					leagentMap = sessionMgr.getagentMap(); 
				    sqMap = sessionMgr.getqMap();
	                scType = sessionMgr.getcTypeValue();
					skill = sessionMgr.getcTypeValue();					
					cobrowseAcceptedOvr = sessionMgr.getCobrowseaccepted();	
          chatPriority = sessionMgr.getChatPriority();
          submittedVASurvey = sessionMgr.getSubmittedVASurvey();
          screenState = sessionMgr.getScreen();
                    sessionMgr.start();
          if(chatPriority == "true")
               chatPriority = true;
           else if(chatPriority == "false")
               chatPriority = false;          
                    
                    lpChatShowView(lpCWAssist.lpChatMakeMessageSection(isAudioOn), true);
					if(jwtValue != ""){
						lpChatWidget.historyRecords(jwtValue,historytrailcount,false,true);
					}else{
						var jwthistValue= sessionMgr.gethistjwtValue();
						if(jwthistValue!=""){
                          jwtValue = jwthistValue;
                          sessionMgr.setjwtValue(jwtValue);
						lpChatWidget.historyRecords(jwthistValue,historytrailcount,false,true);
						//console.log("jwthistValue id from session:"+jwthistValue);
						}else{
							//console.log("invokeleauthurl 5");
							invokeleauthurl("","","reload");
						}
					}
					if(isRecordMsgExist == "true" || isRecordMsgExist == true){
						$(jqe(lpChatID_lpChatBodySection)).prepend(lpCWAssist.lpChatMakeRecordedMessgae());
					}
                    adjustlpMsgHeight(); 
			bindAllButtonEvents();
                if (sessionMgr.getMarvinChatEscalated() && (sessionMgr.getMarvinConversId() != "" || sessionMgr.getMarvinConversId() != "N")) {
					if(!marvinConversationId || marvinConversationId=="false"){}else{
					invokeUILog("Marvin: " + marvinConversationId, "INFO", "GUID: " + bbCookieOverride + " - Loaded Marvin conversation history from re-establish isChatStarted ");	
                     //US1654868      
                    //getMarvinChatHistory(true);
                   // $("#ninaReloadSystemMessage").css("display", "block");
				   $("#ninaReloadSystemMessage").css("display", "none");
                   // $(".ninaReloadHdrspace").css("display", "block");
					}
                }

                showChatWizContainer();
				chatWinCloseable = false;
		  if(sessionMgr.getlestate()!="waiting"){		
		  currTime = new Date();
		  chatIdleTime = sessionMgr.getchatIdle();
		  if(chatIdleTime!=""){	
			  chatIdleTime = new Date(chatIdleTime);			  
			  clearTimeout(idlesessionVar);
			  idlesessionVar = setTimeout(function() {
				lpChatCloseChatBtnClick();
			  }, (600000-(currTime-chatIdleTime)));  
		  }else{
			  clearTimeout(idlesessionVar);
			  idlesessionVar = setTimeout(function() {
				lpChatCloseChatBtnClick();
			  }, 600000);
		  }
		   globalrld=true;
		  }
				var tmpJwtVal = jwtValue;
		  var historyLoadTimer = setInterval(function(){
				if(historyLoaded) {
          if(sessionMgr.getlestate()=="waitingforcminput"){
              $('#lpPreChatCloseBtn').unbind('click').click(function() {
                lpChatWidget.leChatCloseChatBtnClick();							
              });	
              clearInterval(historyLoadTimer);                   
              offmessages1 = sessionMgr.getofflinemessage();  
              console.log('Debug --> In waitingforcminout offmessages1-->', offmessages1); 			  
              if(typeof offmessages1 == "string"){              
                offmessages = offmessages1.split(",");
              }
              if(offmessages.length > 0){
                lpChatWidget.invokeLErequestApi("reload");
              } else {
			    var line = createLine({
                            by: 'Virtual Assistant',
                            text: lpCWTagConst.CreditPrioritizationMessage,
                            source: 'proactive',
                            time: new Date().toString()
                        });
                addLineToDom(line, true,"Agent",true);
			  }
			  
              prepareOfflineMessages();              
              return;
          }
				  if(tmpJwtVal != "" || jwtValue!=""){
					if(tmpJwtVal==""){
					    tmpJwtVal = jwtValue;
					}
          if(scType == "US-PersonalLoans-en-Standard"){  
            if(isAndroid) {
                $('#lpChatInputTextFieldProxy').focus();
            }  
            $(jqe(lpChatID_lpChatInputTextField)).attr('disabled', true);
            $(jqe("LpSendDataButton")).attr('disabled', true);
          }  
           if(chatPriority && sessionMgr.getlestate()=="waiting"){
             offmessages1 = sessionMgr.getofflinemessage();
             console.log('Debug --> In waiting offmessages1-->', offmessages1);     			 
             if(typeof offmessages1 == "string"){              
                offmessages = offmessages1.split(",");
              }
          }       
					prepareToConnect('',false,true,tmpJwtVal,visitorIdForLE,sessionId, interactionContextId,cid,eid,skill,lastsysmsg,lastAgent);
					clearInterval(historyLoadTimer); 
				  }else{
            
            if(scType == "US-PersonalLoans-en-Standard"){ 
                invokeLErequestApi();
            }            
						//lpChatWidget.lpChatShowViewLE();
						$('#lpPreChatCloseBtn').unbind('click').click(function() {
							lpChatWidget.leChatCloseChatBtnClick();							
						});	
						chatWinCloseable=true;
						clearInterval(historyLoadTimer); 
				  }
				}  	      
		  }, 500);		  
	
            } else if (sessionMgr && (sessionMgr.getMarvinChatEscalated() == "false" || sessionMgr.getMarvinChatEscalated() == false) && (sessionMgr.getMarvinConversId() != "" ) && sessionMgr.getScreen() != "EXIT_SURVEY") {

                sendPostMessage({
                    "lpEmbChatWiz": "LPNVPF",
                    "CMD": "UIDESIGN",
                    "value": "HIDECLOSEBTN"
                });
                logger.debug("reEstablishChat", "marvin chat reloaded");
                marvinConversationId = sessionMgr.getMarvinConversId();
                bbCookieOverride = sessionMgr.getblueboxValue();
				//lpChatWizButtonName=sessionMgr.getbtnNameRef();
                jwtValue= sessionMgr.getjwtValue();
				visitorIdForLE = sessionMgr.getlevisitorId();
				sessionId = sessionMgr.getlesessionId();
				interactionContextId = sessionMgr.getleinteractionContextId();  

                isAudioOn = sessionMgr.isAudioOn();
                lpChatFontSize = sessionMgr.getFontSize();
                lpSUID = sessionMgr.getSUID();
                //logger.debug('lpSUID from session:' + lpSUID);

                //offlineSurveyNameOverride = sessionMgr.getOfflineChatSurveyNameOverride();

                //preChatSurveyNameOverride = sessionMgr.getPreChatSurveyNameOverride();

                //exitSurveyNameOverride = sessionMgr.getExitChatSurveyNameOverride();

                lpVisitorSessionId = sessionMgr.getVisitorSessionID();

                visitorId = sessionMgr.getVisitorID();

                //skill = sessionMgr.getChatSkill();
				skill = sessionMgr.getcTypeValue();
                lpInteractiveChat = sessionMgr.getlpInteractive();
                vaInteractiveChat = sessionMgr.getvaInteractive();
				expansionFlag = sessionMgr.getExpansionFlagval();
				cid = sessionMgr.getcidValue();
				eid = sessionMgr.geteidValue();
			    sqMap = sessionMgr.getqMap();
	            scType = sessionMgr.getcTypeValue();

                //createChatInstance();
                //createCollaborationInstance();
				isRecordMsgExist = sessionMgr.getRecordMsgVal();
        chatPriority = sessionMgr.getChatPriority();
        leagentMap = sessionMgr.getagentMap();
        submittedVASurvey = sessionMgr.getSubmittedVASurvey();
        screenState = sessionMgr.getScreen(); 

        if(chatPriority == "true")
               chatPriority = true;
        else if(chatPriority == "false")
               chatPriority = false;        
        
				$("#lpChatBodySection").hide();
				$("#lpChatFrameContainer").append(lpCWAssist.lpChatMakeLoaderHtml(),"");
				//$("#lpChatFrameContainer").append(lpCWAssist.lpChatMakeLoadingScreenHtmlNew(),"");
                loadLPomn();
               lpChatShowView(lpCWAssist.lpChatMakeMessageSection(isAudioOn), true);	
				if(jwtValue != ""){
					lpChatWidget.historyRecords(jwtValue,historytrailcount,false,true);
					}else{
					var jwthistValue= sessionMgr.gethistjwtValue();
					if(jwthistValue!=""){
						lpChatWidget.historyRecords(jwthistValue,historytrailcount,false,true);
						//console.log("jwthistValue id from session:"+jwthistValue);
					}else{
							//console.log("invokeleauthurl 6");
							invokeleauthurl("","","reload");
						}
					}
				if(isRecordMsgExist == "true" || isRecordMsgExist == true){
					$(jqe(lpChatID_lpChatBodySection)).prepend(lpCWAssist.lpChatMakeRecordedMessgae());
				}				
                adjustlpMsgHeight();  
				 showChatWizContainer();
				 bindAllButtonEvents();
				 //getCommonTopicsResults();
				 isFirstMsgSent = sessionMgr.getFirstMsgVal();
				if(isFirstMsgSent == "true"){
					if($("#commontopics").length > 0){
						$("#commontopics").remove();
					}
					if ($("#elasticresults").length >0){
						$("#elasticresults").remove();
					}
				}else{
				if(expansionFlag!="credit" && !chatPriority ) {
					getCommonTopicsResults();
				  }	
				}  
                if(expansionFlag=="credit" && chatPriority ){
                 setTimeout(function() {          
                   var line = createLine({
                            by: 'Virtual Assistant',
                            text: lpCWTagConst.CreditPrioritizationMessage,
                            source: 'proactive',
                            time: new Date().toString()
                        });
                 addLineToDom(line, true,"Agent",true);
                 unregisterEventHandler(lpChatID_lpChatInputTextField, "keyup", keyChanges);
                 unregisterEventHandler("LpSendDataButton", "click", sendDataFromButton);
                 $(jqe(lpChatID_lpChatInputTextField)).removeAttr('disabled');
                 $(jqe(lpChatID_lpChatInputTextField)).focus();
                 $(jqe("LpSendDataButton")).removeAttr('disabled');  
                 prepareOfflineMessages();
		         screenState = screenStateType.CHATTING; 
                 sessionMgr.setScreen(screenState);
                 sessionMgr.setlestate("waitingforcminput");
                 setLestateCk("waitingforcminput"); 
               }, 2000);           
              }          
				 if(!marvinConversationId || marvinConversationId=="false"){
					setTimeout(function() {
						lastResponseCode='018';
						escalateInvalidcId=true;
						callRequestChat();
					}, 5000);
					
				}else{
                $("#lpNinaTransferChatBtn").css("display", "block");
                $(".lpSystemMessageDiv").css("display", "none");
                //$("#ninaReloadSystemMessage").css("display", "block");
                //$(".ninaReloadHdrspace").css("display", "block");
                //$("#lpPrivacyStmntBtn").addClass("addFloatleft");
                $("#lpNinaTransferChatBtn").addClass("addFloatright");
                /* DE316244: SIT_CP1 Observations with Page Reload */
                if(expansionFlag=="credit" && chatPriority ){
                 isNinaChat = false;
                }else{
                  isNinaChat = true;
                }
                chatWinCloseable = false;
                sessionMgr.setMarvinChatEscalated(false);
				sendPostMessage({
                            "lpEmbChatWiz": "LPNVPF",
                            "CMD": "CONTROL",
                            "value": "SET_ATCHTESC",
                            "ckValue": "false"
                        });
				invokeUILog("Marvin: " + marvinConversationId, "INFO", "GUID: " + bbCookieOverride + " - Loaded Marvin conversation history from re-establish VA chat started ");			
                 //US1654868
                //getMarvinChatHistory(true);
					setmarvinchatActiveCookie(true);
                bindChatInputTextFieldEvent();
				}
            }
            
        if(sessionMgr.getScreen() == "EXIT_SURVEY"){
          sessionMgr.deleteChatSessionStorage();
          disposeEndChat();
        }    
            
        }

    }

    function isSameOrigin(respDomain) {
        //logger.debug("**isSameOrigin respDomain:", respDomain + ", targetDomain: " + getTargetForParenChatFrame());
        return getTargetForParenChatFrame() == respDomain ? true : false;
    }

    /**
     * Notify wrapper/paper page for flashing
     */
    function lpChatWinNotifyFlashingStart() {
        logger.debug("lpChatWinNotifyFlashingStart", " notifying..." + getTargetForParenChatFrame());
        //notify to flashing and mark flashing variable is started
        if (lpChatWinMinimized && !lpChatFlashingStarted) {
            sendPostMessage({
                "lpEmbChatWiz": "LPNVPF",
                "CMD": "FLASHING",
                "value": "START",
                "msgCount": messageCount
            });
            lpChatFlashingStarted = true;
        }
    }

    function lpChatWindowMinizedClicked() {
        lpChatWinMinimized = true;
    }

    function lpChatWindowMaximizedClicked() {
        lpChatWinMinimized = false;
        //making messageCount to zero when chat window is in maximize state
		try {
			var tempReadMessagesCount = parseInt(sessionMgr.getReadMessagesCount()) + messageCount;
			if (sessionMgr.getReadMessagesCount() === 0 && minimizedMessageCount > 0) {
				tempReadMessagesCount = tempReadMessagesCount + minimizedMessageCount;
			}
			sessionMgr.setReadMessagesCount(tempReadMessagesCount);
		} catch (e) {}
        messageCount = 0;
		minimizedMessageCount = 0;
        lpChatFlashingStarted = false;
        //scrolling to bottom upon maximize - fix FF
		adjustlpMsgHeight();
        scrollToBottom();
    }

    function sendPostMessage(jsonData) {
        logger.debug("childFrame sending PostMessage to: " + getTargetForParenChatFrame(), jsonData);
        window.parent.postMessage(JSON.stringify(jsonData), getTargetForParenChatFrame());
    }

    function getFormattedData(obj) {
        var xcutobj = JSON.parse(obj);        
        var cardsInfo = {};
		cardsInfo.stoken = getDataFromCrossCut(xcutobj, "sessionToken");
		cardsInfo.gkFlag = getDataFromCrossCut(xcutobj, "gateKeeper");
        var cardsInfoList = [];
        cardsInfo.cardsInfoList = cardsInfoList;
		var accountList = getDataFromCrossCut(xcutobj, "accounts");
		var xcutType = getCrossCutType(xcutobj);
        if (typeof accountList !== "undefined" && accountList != null && accountList.length > 0) {
        for (var i = 0; i < accountList.length; i++) {
            var tadditionalCard = getDataFromAccounts(accountList, xcutType, "additionalCard", i);
            if(tadditionalCard=="false")
                  tadditionalCard = false;
            if(tadditionalCard=="true")      
                  tadditionalCard = true; 
             var tfirstName = getDataFromAccounts(accountList, xcutType, "firstName", i); 
            var tpmcGrp = getDataFromAccounts(accountList, xcutType, "productMappingCode", i);           
            var card = {
                "cardDesc": getDataFromAccounts(accountList, xcutType, "productDescription", i),
                "cardStatus": getDataFromAccounts(accountList, xcutType, "accountStatus", i),
                "cardType": getDataFromAccounts(accountList, xcutType, "lineOfBusiness", i),
                "cardKey": getDataFromAccounts(accountList, xcutType, "accountKey", i),
                "homeCountryLocale": getDataFromAccounts(accountList, xcutType, "homeCountryLocale", i),
                "acctNum": getDataFromAccounts(accountList, xcutType, "accountNumber", i),
                "sortedIndex": getDataFromAccounts(accountList, xcutType, "sortedIndex", i),
                "additionalCard": tadditionalCard,
                "accountTenure": getDataFromAccounts(accountList, xcutType, "accountSetupDate", i),
                "firstName": tfirstName,
                "pmcGrp": tpmcGrp,
            }
            cardsInfo.cardsInfoList.push(card);
        }
      }
    return JSON.stringify(cardsInfo);
    }
	
	function getQMapData(xcutJSON) {
	    var qMap = sessionMgr.getqMap();
		try {
		var xcutobj = JSON.parse(xcutJSON);
		var accountsList = getDataFromCrossCut(xcutobj, "accounts");
		var xcutType = getCrossCutType(xcutobj);		
		
   	    qMap['sToken'] = getDataFromCrossCut(xcutobj, "sessionToken");
		
		var bbPublic = getDataFromCrossCut(xcutobj, "blueBoxPublic");
		if(bbPublic != ""){
			qMap['bbPublic'] = bbPublic;
		} else if (typeof bbCookieOverride !== "undefined" && null != bbCookieOverride && "" !== bbCookieOverride) {
			qMap['bbPublic'] = bbCookieOverride;
		}
		var tmplecardType=getDataFromAccounts(accountsList, xcutType, "productDescription", 0);
		if( tmplecardType !== "") {
			qMap['cardType'] = tmplecardType;
		} else {
		  if(accountsList != null){
			for (var i = 0; i < accountsList.length; i++) {
			    tmplecardType = getDataFromAccounts(accountsList, xcutType, "productDescription", i);
				if ("" !== tmplecardType) {
					qMap['cardType'] = tmplecardType;
					break;
				}
			}
		  }	
		} 
		
		var tmpleproduct=getDataFromAccounts(accountsList, xcutType, "lineOfBusiness", 0);
		if(tmpleproduct !== "") {
			qMap['Product'] = tmpleproduct;
		} else {
		  if(accountsList != null) {
			for (var i = 0; i < accountsList.length; i++) {
			    tmpleproduct = getDataFromAccounts(accountsList, xcutType, "lineOfBusiness", i);
				if ("" !== tmpleproduct) {					
					qMap['Product'] = tmpleproduct;
					break;
				}
			}
		  }	
		}
		}catch(e){
		}
		sessionMgr.setqMap(qMap);
		sqMap=qMap;	
	}

    /**
     * postMessage receiver on iFrame
     */
    myChatWiz.lpReceiveChatPostMessage = function(e) {
        logger.debug("in receive of core file ");

        if (lpCWTagConst.DEBUG_ENABLE && isSameOrigin(e.origin)) {
            logger.debug("lpReceiveChatPostMessageChild: ", e.data);
        }

        try {
            var msgData = JSON.parse(e.data);
            logger.debug("in receive of core file  msgData.CMD: ", msgData.CMD);
            logger.debug("in receive of core file msgData.value: ", msgData.value);
            if (msgData.lpEmbChatWiz == "LPNVCF") {
              if(msgData.CMD == "ORIENTATION"){
                deviceBucket = msgData.deviceBucket;
                 rWidth = msgData.roundedWidth;
                 var tmpClass = document.getElementById("lpChatWizFrameContainer").className;
                  tmpClass = tmpClass.replace(/\bres_.*?\b/g, '');
                  if(deviceBucket!="")
                    tmpClass = tmpClass + " res_"+deviceBucket;
                  if(rWidth != "")
                    tmpClass = tmpClass + " res_"+rWidth;
					document.getElementById("lpChatWizFrameContainer").className = tmpClass;
					deviceOrientationHeight = msgData.deviceHeight;   
					adjustlpMsgHeight();
              }else if (msgData.CMD == "TORESTABLISH") {
					logger.debug("parentpage in core:"+msgData.value); 
					if (msgData.sendAddlineTrigger != null){
                         sendAddlineTriggerOverride = msgData.sendAddlineTrigger;		
					}
					if (msgData.bbCookie != null)
                       bbCookieOverride = msgData.bbCookie;
         
					if(typeof msgData.xcutobj!= "undefined" && msgData.xcutobj!=null){
						try{
						xcutobjOverride = getFormattedData(msgData.xcutobj);
						}catch(e){}
                        mycaAssistData=  msgData.xcutobj;
					}
					if (msgData.lpexpansion != null && msgData.lpexpansion != "") {
						  expansionFlag = sessionMgr.getExpansionFlagval();
						  if(typeof expansionFlag!="undefined" && expansionFlag != null && expansionFlag !=""){
							   expansionFlag = sessionMgr.getExpansionFlagval();
						  }else{
							  expansionFlag = msgData.lpexpansion;  
						  }                          
                    }
					if (msgData.sidvid!= null && msgData.sidvid!= "") {
                        sidvidOverride =msgData.sidvid
                    }
				    if (msgData.firsttimelogin!= null && msgData.firsttimelogin!= "") {
						firsttimelogincm = msgData.firsttimelogin;
				    } 
					if (msgData.cType != null && msgData.cType != "") {
						cTypeOverride = sessionMgr.getcTypeValue();
						  if(typeof cTypeOverride!="undefined" && cTypeOverride != null && cTypeOverride !=""){
							   cTypeOverride = sessionMgr.getcTypeValue();
						  }else{
							  cTypeOverride = msgData.cType;  
						  }                         
                    }					
					if (msgData.deviceFamilyName !== null && msgData.deviceFamilyName !== "") {
						deviceFamilyName = msgData.deviceFamilyName;
					} else {
						deviceFamilyName = getDeviceType();
					}
                    parentpageurl= msgData.value;
                }else if(msgData.CMD == "TIMERCOMPLETE"){
					if(!isNinaChat && lastAgentId==""){
						lpChatCloseChatBtnClickConfirmed();
					}
					//lpChatCloseChatBtnClickConfirmed();
					/*if(!isNinaChat){	
						$("#sendexitsurvey" ).trigger( "click");
					}
					chatWinCloseable = true; 
					disposeEndChat();
					sessionMgr.stop();
					sessionMgr.deleteSMMapFromSessionStorage(); 
					isNinaChat = false;
					xiconclicked = false;*/
				}else if(msgData.CMD == "REFCTR"){
					sessionMgr.setrefCtr(msgData.value);
				}else if(msgData.CMD == "TOXCUTRELOAD"){
					logger.debug("parentpage in core:"+msgData.value);
          
					tmpxcut = sessionMgr.getXcut();
            if(tmpxcut!=""){
                //console.log("xcut from session:",tmpxcut);
				try{
                  xcutobjOverride = getFormattedData(tmpxcut);
				}catch(e){}  
                mycaAssistData=  tmpxcut;	
            }else{
              if(typeof msgData.xcutobj!="undefined" && msgData.xcutobj!=null){
                try{
                   xcutobjOverride = getFormattedData(msgData.xcutobj);
                }catch(e){}   
                mycaAssistData=  msgData.xcutobj;                
              }
            } 
            
					if (msgData.bbCookie != null)
                          bbCookieOverride = msgData.bbCookie;
					if (msgData.sidvid!= null && msgData.sidvid!= "") {
                        sidvidOverride =msgData.sidvid
                    }
				    if (msgData.firsttimelogin!= null && msgData.firsttimelogin!= "") {
						firsttimelogincm = msgData.firsttimelogin;
				    } 
					if (msgData.cType != null && msgData.cType != "") {
						cTypeOverride = sessionMgr.getcTypeValue();
						  if(typeof cTypeOverride!="undefined" && cTypeOverride != null && cTypeOverride !=""){
							   cTypeOverride = sessionMgr.getcTypeValue();
						  }else{
							  cTypeOverride = msgData.cType;  
						  }
                    }
				}else if (msgData.CMD == "FLASHING") {
                    if (msgData.value == 'MINIMIZED') {
                        lpChatWindowMinizedClicked();
                    } else if (msgData.value == 'MAXIMIZED') {
                        lpChatWindowMaximizedClicked();
                    }
                } else if (msgData.CMD == "DEBUG") {
                    if (msgData.value == 'ENABLE') {
                        lpCWTagConst.DEBUG_ENABLE = true;
                    } else {
                        lpCWTagConst.DEBUG_ENABLE = false;
                    }
                } else if (msgData.CMD == "RE_ESTABLISH") {
                    logger.debug("RE_ESTABLISH", "...");
                    myChatWiz.reEstChatConnection();
                    loadLPomn();
                    showChatWizContainer();
                } else if (msgData.CMD == "CONTROL") {
                    if (msgData.value == 'lpStartChatButtonClicked') {
                      submittedVASurvey = false;
						lastIntendId="";
						globalrld=false;
						widgetOpenStatus=false;
            cob_widgetOpenStatus=false;
						cobrowseAcceptedOvr = "";
                        if (lpCWAssist.isBrowserCompatible()) {
                            if (windowState == windowStateType.READY) {
					currentTranscript="";
					ninaCurrentTranscript="";    	
						if($("#lpChatLoader").length > 0){
								$("#lpChatLoader").remove();
							}
							//$("#lpChatFrameContainer").append(lpCWAssist.lpChatMakeLoaderHtml(),"");
							if ($("#lpPreChatMessagesSection").length <= 0) {
								$("#lpChatFrameContainer").append(lpCWAssist.lpChatMakeLoadingScreenHtmlNew(),""); // To using BAU loading gif
							}
							$("#lpChatBodySection").hide();
							if ($("#lpPreChatMessagesSection").length > 0) {
								$("#lpPreChatMessagesSection").show();
							}
                             //  lpChatShowView(lpCWAssist.lpChatMakeLoadingScreenHtmlNew(),true); 
				    screenState = screenStateType.LOADING; 
            sessionMgr.setScreen(screenState);            
                                 showChatWizContainer();
                                 lpLoadingTextBlinking();
                                lpSUID = $.now();
								if (typeof sessionMgr.getLPvisitorID() == "undefined" || sessionMgr.getLPvisitorID() == "") {
                                    lpVisitorSessionId = msgData.lpVisitorSessionId;
                                } else {
                                    lpVisitorSessionId = sessionMgr.getLPvisitorID();
                                }
								if (msgData.skill != null)
                                    skill = msgData.skill;
				    //logger.debug("LENO SHOW AND TELL SUID::"+lpSUID);	
                                sessionMgr.initialize(); //remove all existing session, especially when new chat start
                                sessionMgr.setChatWizParam(skill, lpSUID, lpVisitorSessionId);
                               // sessionMgr.setChatWizSurveyParam(preChatSurveyNameOverride, offlineSurveyNameOverride, exitSurveyNameOverride);
				    logger.debug('PAGE URL:::'+msgData.pageurl);  	 
                		    nuanceFlowFlagOverrride=msgData.nuanceFlowFlag;	
				    if (msgData.sendAddlineTrigger != null)
                                    sendAddlineTriggerOverride = msgData.sendAddlineTrigger;
           

                                if (msgData.xcutobj != null && msgData.xcutobj != "") {
									try {
										xcutobjOverride = getFormattedData(msgData.xcutobj);
										qMap = getQMapData(msgData.xcutobj);
                    sessionMgr.setXcut(msgData.xcutobj);
                                    } catch(e) {
                                        invokeUILog(latestConvID, "ERROR", "GUID: " + bbCookieOverride + " - Exception while extracting data from XCut. Exception: " + e.message);
                                        //console.error("Exception while extracting data from XCut. Exception: " + e);
                                    }
                                    mycaAssistData=  msgData.xcutobj;
                                }
                                if (msgData.sidvid!= null && msgData.sidvid!= "") {
                                    sidvidOverride =msgData.sidvid
                                }
								if (msgData.firsttimelogin!= null && msgData.firsttimelogin!= "") {
									firsttimelogincm = msgData.firsttimelogin;
								}
								if (msgData.lpexpansion != null && msgData.lpexpansion != "") {
                                    expansionFlag = msgData.lpexpansion;
									sessionMgr.setExpansionFlag(expansionFlag);
                                }
								if (msgData.jwtValue != null && msgData.jwtValue != "") {
											   jwtValue =msgData.jwtValue ;  
												sessionMgr.setjwtValue(jwtValue);  
								}   
								if (msgData.cType != null && msgData.cType != "") {
                                    cTypeOverride = msgData.cType;
									scType=cTypeOverride;
									sessionMgr.setcTypeValue(cTypeOverride);
                                }else{
									scType="";
									sessionMgr.setcTypeValue(cTypeOverride);
								}
								if (msgData.visitorId != null && msgData.visitorId != "") {
									visitorIdForLE = msgData.visitorId;
									sessionMgr.setlevisitorId(visitorIdForLE);
                                }
								if (msgData.sessionId != null && msgData.sessionId != "") {
                                    sessionId = msgData.sessionId;
									sessionMgr.setlesessionId(sessionId);
                                }
								if (msgData.interactionContextId != null && msgData.interactionContextId != "") {
                                    interactionContextId = msgData.interactionContextId;
									sessionMgr.setleinteractionContextId(interactionContextId);
                                }								
								if(msgData.cid !=null && msgData.cid !=""){
									cid = msgData.cid;
									sessionMgr.setcidValue(cid); 
								}
								if(msgData.eid !=null && msgData.eid !=""){
									eid = msgData.eid;
									sessionMgr.seteidValue(eid); 
								}
                if(msgData.chatPriority !=null){
									chatPriority = msgData.chatPriority;
                                    sessionMgr.setChatPriority(chatPriority);
									sendPostMessage({
									  "lpEmbChatWiz": "LPNVPF",
									  "CMD": "CONTROL",
									  "value": "SET_LEPRIORITY",
									  "ckValue": chatPriority
									});
								}								
								if (msgData.deviceFamilyName !== null && msgData.deviceFamilyName !== "") {
									deviceFamilyName = msgData.deviceFamilyName;
								} else {
									deviceFamilyName = getDeviceType();
								}
                                if (msgData.bbCookie != null)
                                    bbCookieOverride = msgData.bbCookie;
				      sessionMgr.setblueboxValue(bbCookieOverride);

					sendPostMessage({
                                    "lpEmbChatWiz": "LPNVPF",
                                    "CMD": "CONTROL",
                                    "value": "SET_ATBBV",
                                    "cValue": bbCookieOverride
                                });	
								var frameCvalue = 'skill=' + skill + '||lpSUID=' + lpSUID + '||lpVisitorSessionId=' + lpVisitorSessionId + 								
								'||screenState=' + screenState+ 
								'||expflag=' + expansionFlag;
                                sendPostMessage({
                                    "lpEmbChatWiz": "LPNVPF",
                                    "CMD": "CONTROL",
                                    "value": "SETLPPARAMS1",
                                    "cValue": frameCvalue
                                });
								xiconclicked =false;	
								if(!insideChatCreation){ 
								    iScrollPos = 0;
									myChatWiz.loadChat(msgData.pageurl);
								}	
 
                            } else {
                                logger.info("busy cleaning up previous session. Please try again in a few second", windowState);
                            }
                        } else {
                            loadLPomn();
                            lpChatShowView(lpCWAssist.lpChatMakeUpdateBrowserSection());
                            showChatWizContainer();
                            bindCloseButtonEvent();
                        }
                    } else if (msgData.value == 'CHAT_LOADED') {
						var url = "https://icm.aexp-static.com/content/dam/chat/prod/lechat/js/jquery.mobile.slider.min.js";
						var mobileScriptExists = isScriptLoaded(url);
						if(!mobileScriptExists){
							createScript(url);
						}
					}
					else if (msgData.value == 'END_CHAT') {
                        xiconclicked = true;	
                               if(screenState == screenStateType.LOADING){
                                 sessionMgr.deleteChatSessionStorage();
           						 disposeEndChat(); 
				    }else{						                   
						if($("#lpChatTranscriptSection").is(":visible")){
							showSurveyscreen();
						}else{
							 //currentTranscript="";
							//ninaCurrentTranscript="";    	
							 lpChatCloseChatBtnClick();
						} 
                                      }
                    }else if(msgData.value == 'CONFIRM_END_CHAT'){
						lpChatCloseChatBtnClickConfirmed();
					}else if(msgData.value == 'CANCEL_END_CHAT'){
						lpChatCloseChatBtnClickCancel();
					} else if (msgData.value == 'SCROLL') {
                        logger.debug("Preparing scrollToBottom....", "");
                        scrollToBottom();
                    }
                }else if (msgData.CMD == "EXTENDSESSION") {
					 RCWidgetStepSize=msgData.size; 
					 if(JSON.parse(msgData.value).offerId.indexOf("Q_Cobrowse")==0){
						 widgetOpenStatus=true;
             cob_widgetOpenStatus=true;
					 }
					 if(JSON.parse(msgData.value).offerId.indexOf("Q_")==0)
						 isofferSlide="secureQ";
					 else
						 isofferSlide="offer"; 
					 //console.log('in set active cookie setting into session:'+msgData.value);
					 sessionMgr.setLenoChatState(msgData.value);					 
					 RCWidgetStepNo = JSON.parse(msgData.value).stepNo;
					 if(RCWidgetStepNo==6){
                         if(isofferSlide === "offer"){
                             var offerMsg='{"message":"sysmsg2__Thank You, Form Received"}';
                             $('#sendOffermsg').trigger( "click",offerMsg);
                         }
                         else{
                             var offerMsg='{"message":"sysmsg2__Thank You, Answer Received"}';
                             $('#sendOffermsg').trigger( "click",offerMsg);
                         }

                     }
					 //console.log("RCwidget size EXTENDSESSION in core:"+RCWidgetStepSize);
					 adjustEWheight(true);
					 logger.debug('received from Boot Strap:'+msgData.value);
					 sessionMgr.setchatIdle(new Date());
					 clearTimeout(idlesessionVar);
					 idlesessionVar = setTimeout(function() {
						lpChatCloseChatBtnClick();
					}, 600000);
					/*var line = createLine({
						by: "EWSystem",
						text: "System Message - Session extension",
						source: 'EWSystem',
						time: new Date().toString()
					});
		
					chat.addLine({
						text: "System Message - Session extension",
						error: function() {
							line.className = "error";
						}
					});	*/	
				}else if (msgData.CMD == "RESENDHGT") {
					RCWidgetStepSize=msgData.size;
					//console.log("RCwidget size RESENDHGT in core:"+RCWidgetStepSize);
					adjustEWheight(true);	
				}else if (msgData.CMD == "REMOVELENOSESSION") {					
					 sessionMgr.removeLnChatStateFromSession();
					 isofferSlide="";
					 RCWidgetStepNo =0;
					 widgetOpenStatus=false;
					 adjustEWheight(false);
					 if(msgData.SUBCMD == "COBROWSEREJECTED"){
						  var offerMsg='{"message":"sysmsg2__CoBrowse invitation rejected"}';
						 $('#sendOffermsg').trigger( "click",offerMsg);
						 sessionMgr.setCobrowsestate("close");
             cob_widgetOpenStatus=false;
					 }
					 if(msgData.SUBCMD == "COBROWSEACCEPTED"){
             var offerMsg='{"message":"sysmsg2__CoBrowse invitation accepted"}';
						 $('#sendOffermsg').trigger( "click",offerMsg);
						 cobrowseAcceptedOvr = "yes";
						 sessionMgr.setCobrowseaccepted(cobrowseAcceptedOvr);
						 sessionMgr.setCobrowsestate("close");
             cob_widgetOpenStatus=false;
					 }
				}else if (msgData.CMD == "LENOOFFERCOUNT") {
					 logger.debug()
           if(msgData.TYPE=="OFFER")
					 sessionMgr.setlenooffercount(msgData.value);
           else
              sessionMgr.setlenolocoffercount(msgData.value);             
					 widgetOpenStatus=true;
					 isofferSlide="offer";
					adjustEWheight(true);
                    // do not show the keyboard when offer is pushed
                    setTimeout(function(){
                        $("#lpChatInputTextField").blur();
                        $("#LpSendDataButton").focus();
                    }, 300);
				}else if(msgData.CMD == "REMOVELENOOFFERCOUNT"){
					sessionMgr.removelenooffercountFromSession();
				}else if (msgData.CMD == "LENOSECCOUNT") {
					 sessionMgr.setlenoseccount(msgData.value);
					 isofferSlide="secureQ";
					 widgetOpenStatus=true;
					adjustEWheight(true);
          // do not show the keyboard when offer is pushed
                    setTimeout(function(){
                        $("#lpChatInputTextField").blur();
                        $("#LpSendDataButton").focus();
                    }, 300);
				}else if(msgData.CMD == "REMOVELENOSECCOUNT"){
					sessionMgr.removelenoseccountFromSession();
				}else if(msgData.CMD == "DISPLAY_SYSMSG"){
                    if(isofferSlide === "offer"){
                        var offerMsg='{"message":"sysmsg2__Please complete the form above"}';
                        $('#sendOffermsg').trigger( "click",offerMsg);
                    }
                    else{
                        var offerMsg='{"message":"sysmsg2__Please answer the Secure Question above"}';
                        $('#sendOffermsg').trigger( "click",offerMsg);
                    }
				}else if(msgData.CMD == "DISPLAYCCPMSG"){
                  /*  appendline = '<div class="lpMessage lpccpmsg"><div class="lpChatMsg" style="font-size:13px">Canceled</div></div>';
					appendline='<div class="lpccpSystemMessageDiv">'+appendline+'</div>'
					addLineToDom(appendline, false,"Agent");	
					scrollToBottom();*/
					var offerMsg='{"message":"sysmsg2__Secure form canceled"}';
          if(msgData.type == "question"){
            offerMsg='{"message":"sysmsg2__Secure Question canceled"}';
          }
					$('#sendOffermsg').trigger( "click",offerMsg);
				}else if(msgData.CMD == "DISP_CANCEL_MSG"){ //US1446525
         if($(".lpTransferSystemMessageDiv").last().html().indexOf('Canceled') == -1){
          var sysMsg='{"message":"sysmsg2__Canceled"}';
					$('#sendOffermsg').trigger( "click",sysMsg);
         } 
        }else if(msgData.CMD == "DISP_PPRLSS_DLVRY_MSG"){ //US1446525
          var sysMsg='{"message":"sysmsg2__Learn about Paperless Delivery above"}';
					$('#sendOffermsg').trigger( "click",sysMsg);
        }else if(msgData.CMD == "DISP_THNKU_MSG"){ //US1446525
          var sysMsg='{"message":"sysmsg2__Thank you"}';
					$('#sendOffermsg').trigger( "click",sysMsg);
        }
            }
        } catch (excp) {
            logger.debug("lpReceiveChatPostMessage. Exception occurred", excp);
        }
    }

    /*
     * validate if all mandatory survey questions are answered and if
     * questions have valid answers
     */
    myChatWiz.validateSurvey = function(data, callback) {
        logger.debug("validateSurvey", "....");
        var isValidationPass = true;
        var isFirstErrorField = true;
        if (data.survey && data.survey.questions && data.survey.questions.question) {
            for (i = 0; i < data.survey.questions.question.length; i++) {
                question = data.survey.questions.question[i];
                var questionContainerDiv = "";
                if (question.type == dataTypes.TEXT || question.type == dataTypes.NUMERIC || question.type == dataTypes.TEXT_AREA) {
                    questionContainerDiv = "#lpSurveyQuestionAns" + question.order;
                    $(questionContainerDiv).removeClass();
                } else {
                    questionContainerDiv = '#lpChatSurveySectionQ' + question.order;
                    $(questionContainerDiv).removeClass().addClass("lpChatSurveySectionQ");
                }

                var chatSurveySectionQDiv = "#lpChatSurveySectionQ" + question.order;
                var questionErrorContainerDiv = '#lpChatSurveySectionQError' + question.order;
                $(questionErrorContainerDiv).empty();

                if ($(chatSurveySectionQDiv).is(":visible")) {
                    //remove the exclamation & text
                    var answer = lpChatGetAnswer(question, question.order);
                    if (question.mandatory && !answer.length) {
                        isValidationPass = false;
                        lpCWAssist.insertRequiredErrorMessage(question, isFirstErrorField);
                        if (question.type == dataTypes.TEXT || question.type == dataTypes.NUMERIC || question.type == dataTypes.TEXT_AREA) {
                            txtElement = document.getElementById("lpSurveyQuestionAns" + question.order);
                            if (txtElement.setSelectionRange) {
                                txtElement.focus();
                                txtElement.setSelectionRange(0, 0);
                            } else if (txtElement.createTextRange) {
                                var range = txtElement.createTextRange();
                                range.moveStart('character', 0);
                                range.select();
                            }
                        }
                        /*if(question.type == dataTypes.TEXT && question.validationType == "numeric"){
                        	if(lpNumErrorMessage){	
                        		lpCWAssist.insertRequiredErrorMessage(question, isFirstErrorField);										
                        	}else{										
                        		lpCWAssist.insertInvalidErrorMessageForNumeric(question, isFirstErrorField);										
                        	}									
                        }*/
                        isFirstErrorField = false;
                        $(questionContainerDiv).addClass("lpQuestionErrorBorder");
                    } else if (answer.length && question.validationType) {
                        if (question.type == dataTypes.TEXT || question.type == dataTypes.NUMERIC) {
                            var isValid = validateValue(question.validationType, answer);
                            if (!isValid) {
                                isValidationPass = isValid;
								if(question.validationType == 'alpha_numeric'){
									lpCWAssist.insertInavlidCodesErrorMessage(question, isFirstErrorField);
								}else{
									lpCWAssist.insertRequiredErrorMessage(question, isFirstErrorField);
								}
                                isFirstErrorField = false;
                                $(questionContainerDiv).addClass("lpQuestionErrorBorder");
                            }
                        } else if (question.type == dataTypes.DROPDOWN) {
                            if (answer == "Select One") {
                                isValidationPass = false;
                                lpCWAssist.insertRequiredErrorMessage(question, isFirstErrorField);
                                isFirstErrorField = false;
                                $(questionContainerDiv).addClass("lpQuestionErrorBorder");
                            }
                        } else if(question.type == dataTypes.TEXT_AREA){
							var isValid = validateTAValue(question.validationType, answer);
                            if (!isValid) {
                                isValidationPass = isValid;
                                lpCWAssist.insertInavlidCodesErrorMessage(question, isFirstErrorField);
                                isFirstErrorField = false;
                                $(questionContainerDiv).addClass("lpQuestionErrorBorder");
                            }
						}
                    }
                }
            }
        }

        if (isValidationPass) {
            callback(data)
        } else {
            isContinueClicked = false;
        }

        return isValidationPass;
    }

    /* extract questions labels to be alerted to user */
    function getQuestionLabelText(question) {
        var questionText = "<span>" + question + "</span>";
        return $(questionText).text().trim();
    }

    /* validate if a question's snswer is valid */
    function validateValue(validationType, value) {
        if (validationType == 'alpha_numeric') {
            /*
            var Exp = /^[0-9a-zA-Z\s]+$/;
            return value.match(Exp);
            */
			var isValidNow = validateTAValue(validationType, value);
            return isValidNow;
        } else if (validationType == 'email') {
            var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(value);
        } else if (validationType == 'numeric') {
            return !isNaN(value)
        }
    }

	 /* validate if a question's snswer is valid */
    function validateTAValue(validationType, value) {
        var res;
		res = value.match(/0[xX][0-9a-fA-F]+/g);
		if(res!=null){
			return false;
		}
		res = value.match(/&&|@@|\|\||>>|\\\\|&#x?/g);
		if(res!=null){
			return false;
		}	
		res = value.match(/\-\-|&#|\/\/|\/\*|\*\/|<!|<\?|\?>/g);
		if(res!=null){
			return false;
		}
	
		return true;
		
    }
	
    /* fetch answer for a question based on its type */
    function lpChatGetAnswer(question, i) {
        var answer;
        if (question.type == dataTypes.TEXT ||
            question.type == dataTypes.TEXT_AREA ||
            question.type == dataTypes.NUMERIC ||
            question.type == dataTypes.DROPDOWN) {
            answer = $("#lpSurveyQuestionAns" + i).val().trim();
            if (question.type == dataTypes.DROPDOWN) {
                if ($("#lpChatContent").length != 0) {
                    answer = $("#lpSurveyQuestionAns" + i).find("#lpAnchLinkTxt")[0].innerHTML;
                } else {
                    answer = $("#lpSurveyQuestionAns" + i).val().trim();
                }
            }

            if (question.validationType == 'alpha_numeric') {
                var valueBefore = answer;
                answer = ccMasking(answer);
            }
        } else if (question.type == dataTypes.CHECKBOX) {
            var $radioDiv = $("#lpSurveyQuestionAns" + i);
            if ($radioDiv.find("input:checked").length) {
                answer = [];
                $radioDiv.find("input:checked").each(function() {
                    answer.push($(this).val())
                });
            }
        } else if (question.type == dataTypes.RADIO ||
            question.type == dataTypes.RADIO_SIDE) {
            var $radioDiv = $("#lpSurveyQuestionAns" + i);
            answer = $radioDiv.find("input:checked").val();
        }
        return answer || "";
    }

    /* method to inject html to DOM */
    function lpChatShowView(html, clearDom) {
        if (clearDom) {
            $(jqe(lpChatID_lpChatBodySection)).html("");
        }
        $(jqe(lpChatID_lpChatBodySection)).append(html);
        if(!clearDom){
          $("#lpChatMainMessageSection").hide();
          $("#lpchatbottomsection").hide();
          $(".lpAutomationsurvey").show();
        }
    }

     myChatWiz.lpChatShowViewLE=function() {
           chatWinCloseable=true;
		   sessionMgr.deleteSMMapFromSessionStorage(); 
            var html = lpCWAssist.leChatMakeOfflineScreenHtml("", "");
            $(jqe(lpChatID_lpChatBodySection)).html("");
            $(jqe(lpChatID_lpChatBodySection)).append(html)
    }
	
	myChatWiz.lpChatShowBusyViewLE=function() {
           chatWinCloseable=true;
		   sessionMgr.deleteSMMapFromSessionStorage(); 
            var html = lpCWAssist.leChatMakeBusyScreenHtml();
            $(jqe(lpChatID_lpChatBodySection)).html("");
            $(jqe(lpChatID_lpChatBodySection)).append(html)
    }
   

}

lpChatWidget = new lpCWTag.LPChatWidget(window);

/**
 * patching for IE 8 where javascript functionalities is not available
 */
function lpPatch_IE8() {
    if (typeof Array.prototype.indexOf !== 'function') {
        Array.prototype.indexOf = function(obj, start) {
            for (var i = (start || 0), j = this.length; i < j; i++) {
                if (this[i] === obj) {
                    return i;
                }
            }
            return -1;
        }
    }

    if (typeof String.prototype.trim !== 'function') {
        String.prototype.trim = function() {
            return this.replace(/^\s+|\s+$/g, '');
        }
    }
}

function typeaheadresponse(data) {
    lpChatWidget.sendTypeAheadresponse(data);
}

function ninaSCI(data) {
    lpChatWidget.sendSCIresponse(data);
}

function ninaResponse(data) {
    lpChatWidget.sendNinaresponse(data);
}

function ninaHistory(data) {
    lpChatWidget.sendNinaHistory(data);
}

function marvinresponse(data) {
    lpChatWidget.sendMarvinresponse(data, false, '');
}

function sendMarvinLinkResponse1(data) {
    lpChatWidget.sendMarvinLinkResponse(data)
}

function sendMarvinMCQResponse1(data, qId,qType) {
    lpChatWidget.sendMarvinMCQResponse(data, qId,qType);
}

function sendMarvinCSResponse1(data, qId, choiceText) {
    lpChatWidget.sendMarvinCSResponse(data, qId, choiceText);
}

function refreshParent(thiselem, event) {
    event.preventDefault();
    lpChatWidget.refreshparent(thiselem.href);
}

function sendPOstMessgaefromAssist(jsonData) {
    lpChatWidget.sendPostmessageInternal(jsonData);
}

function sendErrorAlert(errorScreen, errorMsg) {
    lpChatWidget.sendErrorAlert(errorScreen, errorMsg);
}

function getscreenState(){
  lpChatWidget.getscreenState();
}

function setCookie(ioa_name, value, expiredays, expiremins) {

    var expiry = null;
    var ioadomain = document.domain;

    if (ioadomain.indexOf("aexp.com") !== -1) {
        ioadomain = "aexp.com";
    } else if (ioadomain.indexOf("americanexpress.com") !== -1) {
        ioadomain = "americanexpress.com";
    }
    var exdate = new Date();

    if (typeof expiremins !== "undefined" && expiremins !== null) {
        exdate.setTime(exdate.getTime() + (expiremins * 60 * 1000));
        expiry = expiremins;
    } else {
        exdate.setDate(exdate.getDate() + expiredays);
        expiry = expiredays;
    }
    document.cookie = ioa_name + "=" + escape(value) + ((expiry == null) ? "" : "; expires=" + exdate.toGMTString()) +
        "; path=/; domain=" + ioadomain;
}

function getCookie_AA(ioa_name) {
    var c_start = -1,
        c_end = -1;
    if (document.cookie.length > 0) {
        c_start = document.cookie.indexOf(ioa_name + "=");
        if (c_start > -1) {
            c_start = c_start + ioa_name.length + 1;
            c_end = document.cookie.indexOf(";", c_start);
            if (c_end == -1)
                c_end = document.cookie.length;
            return unescape(document.cookie.substring(c_start, c_end));
        }
    }
    return "";
}


// DEFAULT: LOAD FUNCTION
(function(window) {
    function lpChatWizLoad() {
        lpPatch_IE8();

        lpChatWidget.init();

        lpChatWidget.reEstChatConnection();
    }

    // check to see jQuery really exist
    if (window.jQuery === undefined) {
        throw new Error('JQuery is required!');
    } else {
        if (window.addEventListener) {
            window.addEventListener("message", lpChatWidget.lpReceiveChatPostMessage, false)
        } else {
            window.attachEvent("onmessage", lpChatWidget.lpReceiveChatPostMessage)
        }
        $(window.document).ready(lpChatWizLoad);
    }

})(window);

function showPreSurvey1(){
	logger.debug("showing prechat survey...");
	$.ajax({
        url: "https://qweb.aexp-static.com/us/content/js/preSurvey.js",
        dataType: 'jsonp',
        jsonpCallback: 'preSurvey',
        jsonp: false,
    });
}

function preSurvey(data){
	logger.debug("JSONP success...");
	logger.debug(data);
	//var myChatWiz = new lpCWTag.LPChatWidget(window);
	 lpChatWidget.showPreChatSurvey(data);
}
function formatAMPM(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? 'PM' : 'AM';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0' + minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;
    return strTime;
}

//setTimeout(showPreSurvey,4000);

/** Escaping newline, tab, return character and space with single space. */
function escapeJSON(inputStr) {
    var outputStr = inputStr;
    try {
		if (typeof outputStr !== "undefined" && outputStr != null && outputStr !== "") {
			outputStr = outputStr.replace(/-{2,}/g, '-');
			outputStr = outputStr.replace(/[\n\t\r\s]+/g, ' ');
			outputStr = outputStr.replace(/"/g, '\\"');
		}
    } catch (exception) {
        console.error("Exception while escaping JSON. Exception: " + exception);
    }
    return outputStr;
}

function invokeUILog(convId, type, msg) {
    try {
        var logDetails = '{"conversation_id" : "' + escapeJSON(convId) + '","event_type" : "' + type + '","message" : "' + escapeJSON(msg) + '"}';
        $.ajax({
            url: "https://clicktochat.americanexpress.com/chat/uxevent",
            type: "POST",
            contentType: "application/json; charset=utf-8",
			crossDomain: true,
            data: logDetails,
			dataType: 'json',
			timeout: 6000,
            success: function(data) {
                //console.log("=> UX Event - Conversation ID: " + convId + ", Type: " + type + ", Message: " + msg);
            },
            error: function(res, status, err) {
                //console.error("=> UX Event - Error while logging UX event. Status: " + status);
            }
        });
    } catch(e) {
        //console.log("=> UX Event - Exception: " + e);
    }
}

function formatValue(val) {
	return (typeof val !== "undefined" && null != val && "" !== val) ? val : "";
}

function getPaperlessEligibilty(){
  var paperlessEligibilty ="";
  if(typeof JSON.parse(mycaAssistData).sessionToken == "undefined"){
    var estmt="N"
    var econsent="N";
    if(JSON.parse(mycaAssistData).cardsInfoList !== null && typeof JSON.parse(mycaAssistData).cardsInfoList[0]!== "undefined"){
      if(typeof JSON.parse(mycaAssistData).cardsInfoList[0].paperOff !== "undefined"  && JSON.parse(mycaAssistData).cardsInfoList[0].paperOff !== null){
        if(typeof JSON.parse(mycaAssistData).cardsInfoList[0].paperOff.EStmt !== "undefined"){
          estmt=JSON.parse(mycaAssistData).cardsInfoList[0].paperOff.EStmt;
        } 
        if(typeof JSON.parse(mycaAssistData).cardsInfoList[0].paperOff.comm !== "undefined"){
          econsent=JSON.parse(mycaAssistData).cardsInfoList[0].paperOff.comm;
        }
      }
    }
    paperlessEligibilty = estmt+"ZZ"+econsent;
  }else{
    if(typeof JSON.parse(mycaAssistData).paperlessEligible != "undefined" && JSON.parse(mycaAssistData).paperlessEligible == true){
      paperlessEligibilty = "YZZY";
    }else{
      paperlessEligibilty = "NZZN";
    }
  }
  return paperlessEligibilty;
}

function invokeleauthurl(reasonCode,intendId,getinitialjwt){
  var flowType = "History";
  if(typeof reasonCode!="undefined" &&  reasonCode!=null &&  reasonCode!=""){
    flowType = "Escalation";
  }
	try{
	var xcuttimercount=0;
if(mycaAssistData==""){
		lpChatWidget.leReloadXCUT();
	}
var xcutTimer = setInterval(function(){
	xcuttimercount=xcuttimercount+1;
	if(mycaAssistData!=""){	

// send first 6 cards description to LE for RC Widget - begin
var cardsLength = 0;
var firstCardDesc="";
var secondCardDesc="";
var thirdCardDesc="";
var fourthCardDesc="";
var fifthCardDesc="";
var sixthCardDesc="";
var seventhCardDesc = "";
var eighthCardDesc = "";
var ninthCardDesc = "";
var tenthCardDesc = "";
var cmcardDesc ="";
var userCardList;
var parsedXcut = JSON.parse(mycaAssistData);
var xcutType = getCrossCutType(parsedXcut);
var userCardList = getDataFromCrossCut(parsedXcut, "accounts");
if (userCardList != null){
    cardsLength = userCardList.length;
}
for (i = 0; i < cardsLength; i++) {
  cmcardDesc = getDataFromAccounts(userCardList, xcutType, "productDescription", i);
  switch(i){
        case 0:
            firstCardDesc = formatValue(cmcardDesc);
            break;
        case 1:
            secondCardDesc = formatValue(cmcardDesc);
            break;
        case 2:
            thirdCardDesc = formatValue(cmcardDesc);
            break;
        case 3:
            fourthCardDesc = formatValue(cmcardDesc);
            break;
        case 4:
            fifthCardDesc = formatValue(cmcardDesc);
            break;
        case 5:
            sixthCardDesc = formatValue(cmcardDesc);
            break;
        case 6:
            seventhCardDesc = formatValue(cmcardDesc);
            break;
        case 7:
            eighthCardDesc = formatValue(cmcardDesc);
            break;
        case 8:
            ninthCardDesc = formatValue(cmcardDesc);
            break;
        case 9:
            tenthCardDesc = formatValue(cmcardDesc);
            break;
    }
}

//send first 6 cards description to LE for RC Widget - end

    var lstoken=getDataFromCrossCut(parsedXcut, "sessionToken");
    var lbbPublic=getDataFromCrossCut(parsedXcut, "blueBoxPublic");
	var lgkFlag=getDataFromCrossCut(parsedXcut, "gateKeeper");
	var lembossedName=getDataFromAccounts(userCardList, xcutType, "embossedName", 0);
	var lcardType=getDataFromAccounts(userCardList, xcutType, "lineOfBusiness", 0);
	var laccountTenure=getDataFromAccounts(userCardList, xcutType, "accountSetupDate", 0);
	var llastLogon=getDataFromCrossCut(parsedXcut, "lastLogonDate");
	var ladditionalCard="" +getDataFromAccounts(userCardList, xcutType, "additionalCard", 0);

var stringAuthcode='{"authCode":';
if(typeof sidvidOverride!="undefined" && sidvidOverride!="")
	stringAuthcode = stringAuthcode +'"vid,'+sidvidOverride + ',sid,'+sidvidOverride;

if(typeof lstoken!="undefined" &&  lstoken!=null &&  lstoken!=""){
	if(stringAuthcode == '{"authCode":'){
		stringAuthcode = stringAuthcode + '"code,'+lstoken;
	}else{
		stringAuthcode = stringAuthcode + ',code,'+lstoken;
	}
}	

if(typeof lbbPublic!="undefined" &&  lbbPublic!=null &&  lbbPublic!="")
	stringAuthcode = stringAuthcode + ',uniqueId,'+lbbPublic;
   
  /*stringAuthcode = stringAuthcode + ',cardDesc,'+firstCardDesc+"ZZ"+secondCardDesc+"ZZ"+thirdCardDesc+"ZZ"+fourthCardDesc+"ZZ"+fifthCardDesc+"ZZ"+sixthCardDesc;*/
  var descString = firstCardDesc; 
   if(secondCardDesc!=="")
	   descString = descString+"ZZ"+secondCardDesc;
   if(thirdCardDesc!=="")
	   descString = descString+"ZZ"+thirdCardDesc;
   if(fourthCardDesc!=="")
	   descString = descString+"ZZ"+fourthCardDesc;
   if(fifthCardDesc!=="")
	   descString = descString+"ZZ"+fifthCardDesc;
   if(sixthCardDesc!=="")
	   descString = descString+"ZZ"+sixthCardDesc;
   if(seventhCardDesc !== "")
	   descString = descString+"ZZ"+seventhCardDesc;
   if(eighthCardDesc !== "")
	   descString = descString+"ZZ"+eighthCardDesc;
   if(ninthCardDesc !== "")
	   descString = descString+"ZZ"+ninthCardDesc;
   if(tenthCardDesc !== "")
	   descString = descString+"ZZ"+tenthCardDesc;
	stringAuthcode = stringAuthcode + ',cardDesc,'+descString;	

if(typeof lgkFlag!="undefined" &&  lgkFlag!=null &&  lgkFlag!="")
	stringAuthcode = stringAuthcode + ',gkFlag,'+lgkFlag;

if(typeof lembossedName!="undefined" &&  lembossedName!=null &&  lembossedName!="")
	stringAuthcode = stringAuthcode + ',embossedName,'+lembossedName;

if(lastIntendId =='fraud_report_need' || lastIntendId == 'fraud_followup'){
	stringAuthcode = stringAuthcode + ',cType,'+'US-GFPS-en-Fraud';	
	scType='US-GFPS-en-Fraud';
	lpChatWidget.lesetscType(scType);	
}else{
	if(typeof cTypeOverride!="undefined" &&  cTypeOverride!=null &&  cTypeOverride!="")
	stringAuthcode = stringAuthcode + ',cType,'+cTypeOverride;
}

if(typeof lcardType!="undefined" &&  lcardType!=null &&  lcardType!="")
	stringAuthcode = stringAuthcode + ',cardType,'+lcardType;

if(typeof laccountTenure!="undefined" &&  laccountTenure!=null &&  laccountTenure!="")
	stringAuthcode = stringAuthcode +',accountTenure,'+laccountTenure;

if(typeof llastLogon!="undefined" &&  llastLogon!=null &&  llastLogon!="")
	stringAuthcode = stringAuthcode + ',lastLogin,'+llastLogon;

if(typeof ladditionalCard!="undefined" &&  ladditionalCard!=null &&  ladditionalCard!="")
	stringAuthcode = stringAuthcode + ',additionalCard,'+ladditionalCard;

if(typeof reasonCode!="undefined" &&  reasonCode!=null &&  reasonCode!="")
	stringAuthcode = stringAuthcode + ',reasonCode,'+reasonCode;

if(scType == "US-PersonalLoans-en-Standard"){
  stringAuthcode = stringAuthcode + ',intent,'+'Not Available';
} else if(typeof intendId!="undefined" &&  intendId!=null &&  intendId!=""){
	stringAuthcode = stringAuthcode + ',intent,'+intendId;
}  

//stringAuthcode = stringAuthcode + ',eStatement,'+estmt+"@@"+econsent;
//stringAuthcode = stringAuthcode + ',eStatement,'+estmt+"ZZ"+econsent+"ZZ"+expansionFlag;
/*Send Marvin ID to LE on escalation*/
  var marvinConIdForCS = lpChatWidget.sendMarvinIDtoLE();
  var paperlessEligibilty = getPaperlessEligibilty();
if(typeof marvinConIdForCS!="undefined" &&  marvinConIdForCS!=null &&  marvinConIdForCS!=""){
    stringAuthcode = stringAuthcode + ',eStatement,'+paperlessEligibilty+"ZZ"+expansionFlag+"ZZ"+marvinConIdForCS;
}else{
stringAuthcode = stringAuthcode + ',eStatement,'+paperlessEligibilty+"ZZ"+expansionFlag;
}

if(typeof firsttimelogincm!="undefined" &&  firsttimelogincm!=null &&  firsttimelogincm!="")
	stringAuthcode = stringAuthcode + ',firstLogin,'+firsttimelogincm;

stringAuthcode = stringAuthcode + '"}';

logger.debug("stringAuthcode-->"+stringAuthcode)

$.ajax({
  url: "https://va.idp.liveperson.net/api/account/14106077/authenticate",
  method: "POST",
  contentType: "application/json",  
  data:stringAuthcode,
  dataType: 'json'
}).done(function(data) {
  logger.debug(data);
  if(typeof getinitialjwt != "undefined" && getinitialjwt == true){
 var historyinitialjwt = data.jwt;
 lpChatWidget.lesethistjwtValue(historyinitialjwt); 
 lpChatWidget.historyRecords(historyinitialjwt,0,true);
  }else if(typeof getinitialjwt != "undefined" && getinitialjwt == "reload"){
	  //console.log("historytrailcount:from reload invoke le block" +historytrailcount);
	  var historyinitialjwt = data.jwt;
	  lpChatWidget.lesethistjwtValue(historyinitialjwt); 
	  lpChatWidget.historyRecords(historyinitialjwt,historytrailcount,false,true);
	  jwtValue=data.jwt;
	  lpChatWidget.lesetjwtValue(jwtValue);
  }else{
  jwtValue=data.jwt;
  lpChatWidget.lesetjwtValue(jwtValue);        
  } 
}).fail(function(err) {
    invokeUILog("AuthenticateAPI: " + bbCookieOverride, "ERROR", "Flow : "+flowType+" LE Authenticate API - Service call failed. HTTP status: " + err.status + " - " + err.statusText + " - Ready state: " + err.readyState);
   if(typeof getinitialjwt != "undefined" && getinitialjwt == true){
		lpChatWidget.historyRecords("error",0,true);
	}else if(typeof getinitialjwt != "undefined" && getinitialjwt == "reload"){
		lpChatWidget.historyRecords("error",0,false);
	}else{
		lpChatWidget.lpChatShowViewLE();
		$('#lpPreChatCloseBtn').unbind('click').click(function() {
			lpChatWidget.leChatCloseChatBtnClick();
		});
	}	
  });

clearInterval(xcutTimer); 	
	}else{
		lpChatWidget.leReloadXCUT();
	}
	if(xcuttimercount>15){
			invokeUILog("AuthenticateAPI: " + bbCookieOverride, "ERROR", "Flow: "+flowType+ " XCut not loaded");
			clearInterval(xcutTimer);
			if(typeof getinitialjwt != "undefined" && getinitialjwt == true){
				lpChatWidget.historyRecords("error",0,true);
			}else if(typeof getinitialjwt != "undefined" && getinitialjwt == "reload"){
				lpChatWidget.historyRecords("error",0,false);
			}else{
				lpChatWidget.lpChatShowViewLE();
				$('#lpPreChatCloseBtn').unbind('click').click(function() {
					lpChatWidget.leChatCloseChatBtnClick();
				});
			}	
	}
	}, 2000);
	}catch(exception){
		invokeUILog("AuthenticateAPI: " + bbCookieOverride, "ERROR", "Flow: "+flowType+ " Exception in invokeleauthurl method. Exception: " + exception);
	}	
}

function formatAccountSetupDate(accountSetupDate) {
    var accountTenure = "";
    if(accountSetupDate && accountSetupDate.length === 10) {
        accountTenure += accountSetupDate.substr(0, 4);
        accountTenure += accountSetupDate.substr(5, 2);
        accountTenure += accountSetupDate.substr(8, 2);
    }
    return accountTenure;
}

function isScriptLoaded(url) {
	var scripts = document.getElementsByTagName('script');
	for (var i = scripts.length; i--;) {
		if (scripts[i].src == url) return true;
	}
	return false;
}
/* Adjust height when Zoomed : Start */
function getWindowZoom(){
    var screenCssPixelRatio = (window.outerWidth - 8) / window.innerWidth;
    if (screenCssPixelRatio <= 1.10) {
      zoomLevel = "0";
    } else {
      zoomLevel = "unknown";
    }
    return zoomLevel;
}

var zoomFlag = getWindowZoom();

if(zoomFlag != 0){
    //adjustlpMsgHeight();
}

/** Handling touch move event on lpChatWizFrameContainer */
document.getElementById("lpChatWizFrameContainer").addEventListener("touchmove", function(e) {
	var startX = 0;
	var endX = 0;
	var startY = 0;
	var endY = 0;
	var touches = e.changedTouches;
	if (touches.length > 1) {
		for (var i = 0; i < touches.length; i++) {
			if (i == 0) {
				startX = touches[i].clientX;
				startY = touches[i].clientY;
			} else {
				endX = touches[i].clientX;
				endY = touches[i].clientY;
			}
		}
		if ((startX - endX) !== 0 && (startY - endY) !== 0) {
			e.preventDefault();
			e.stopImmediatePropagation();
		}
	}
}, { passive: false });

/* Adjust height when Zoomed : End */

/** US1858944: Update the online status icon based on connectivity */
function updateOnlineIndicator() {
	if ((/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i).test(navigator.userAgent)) {
		/** Apply the below logic only for mobile devices as the navigator.onLine has limitations on Desktop. */
		if (navigator.onLine) {
			/** If the browser is online hide the low connection banner */
			if ($("#lpLowSystemMessageDiv").length > 0 && $("#lpLowSystemMessageDiv").css("display") === "block") {
				$("#lpLowSystemMessageDiv").hide();
				if (typeof lpChatWidget !== "undefined" && lpChatWidget != null) {
					lpChatWidget.adjustMsgHeight();
					lpChatWidget.scrollToBottomLE();
				}
			}
		} else {
			/** If the browser is offline show the low connection banner */
			if ($("#lpLowSystemMessageDiv").length > 0 && $("#lpLowSystemMessageDiv").css("display") === "none") {
				$("#lpLowSystemMessageDiv").show();
				if (typeof lpChatWidget !== "undefined" && lpChatWidget != null) {
					lpChatWidget.adjustMsgHeight();
					lpChatWidget.scrollToBottomLE();
				}
			}
		}
	}
}

/** US1858944: Update the online status icon based on connectivity */
window.addEventListener('online',  updateOnlineIndicator, false);
window.addEventListener('offline', updateOnlineIndicator, false);
updateOnlineIndicator();
function getCrossCutType(parsedXcut) {
 var xcutType = "";
 try {
	 if(typeof parsedXcut.sessionToken !== "undefined" || typeof parsedXcut.accounts !== "undefined") {
	   xcutType = "CDS";
	 } else if(typeof parsedXcut.stoken !== "undefined" || typeof parsedXcut.cardsInfoList !== "undefined"){
	   xcutType = "Non-CDS";
	 }
 }catch(e){}  
 return xcutType;
}

function getDataFromCrossCut(xcutobj, attribute) {
var attributValue = "";
if (typeof xcutobj !== "undefined" && xcutobj !== null) {
var xcutType = getCrossCutType(xcutobj);
try {
if (xcutType === "CDS") {
switch(attribute) { 
 case "sessionToken" :
  attributValue =  (typeof xcutobj.sessionToken != "undefined" && xcutobj.sessionToken != null) ? xcutobj.sessionToken : "";
  break;
 case "blueBoxPublic" :
  attributValue =  (typeof xcutobj.blueBoxPublic != "undefined" && xcutobj.blueBoxPublic != null) ? xcutobj.blueBoxPublic : ""; 
  break;
 case "gateKeeper" :
  attributValue =  (typeof xcutobj.gateKeeper != "undefined" && xcutobj.gateKeeper != null) ? xcutobj.gateKeeper : ""; 
  break;
 case "accounts" :
  attributValue =  (typeof xcutobj.accounts != "undefined" && xcutobj.accounts != null && xcutobj.accounts instanceof Array && xcutobj.accounts.length > 0) ? xcutobj.accounts : null; 
  break; 
 case "lastLogonDate" :
  attributValue =  (typeof xcutobj.demographics != "undefined" && xcutobj.demographics != null && typeof xcutobj.demographics.lastLogonDate != "undefined" && xcutobj.demographics.lastLogonDate != null) ? xcutobj.demographics.lastLogonDate : ""; 
  break;  
 } 
} else if(xcutType === "Non-CDS") {
switch(attribute) { 
 case "sessionToken" :
  attributValue =  (typeof xcutobj.stoken != "undefined" && xcutobj.stoken != null) ? xcutobj.stoken : "";
  break;
 case "blueBoxPublic" :
  attributValue =  (typeof xcutobj.bbPublic != "undefined" && xcutobj.bbPublic != null) ? xcutobj.bbPublic : ""; 
  break;
 case "gateKeeper" :
  attributValue =  (typeof xcutobj.gkFlag != "undefined" && xcutobj.gkFlag != null) ? xcutobj.gkFlag : ""; 
  break;
 case "accounts" :
  attributValue =  (typeof xcutobj.cardsInfoList != "undefined" && xcutobj.cardsInfoList != null && xcutobj.cardsInfoList instanceof Array && xcutobj.cardsInfoList.length > 0) ? xcutobj.cardsInfoList : null; 
  break; 
 case "lastLogonDate" :
  attributValue =  (typeof xcutobj.demographics != "undefined" && xcutobj.demographics != null && typeof xcutobj.demographics.lastLogon != "undefined" && xcutobj.demographics.lastLogon != null) ? xcutobj.demographics.lastLogon : ""; 
  break;  
 }

}
}catch(e){}  
}
return attributValue;
}

function getDataFromAccounts(accountList, xcutType, attribute, i) {
console.log("New filter ", attribute);
  var attributValue = "";
  try {
  if(accountList != null ){
  var account = accountList[i];
  if (xcutType === "CDS") {
    switch(attribute) { 
	 case "additionalCard" :
	  attributValue =  (typeof account.basicAccountIndicator != "undefined" && account.basicAccountIndicator != null) ? !(account.basicAccountIndicator) : "";
	  break;
	 case "basicAccountIndicator" :
  	   attributValue =  (typeof account.basicAccountIndicator != "undefined" && account.basicAccountIndicator != null) ? account.basicAccountIndicator : "";
	   break; 
	 case "firstName" :
	   attributValue =  (typeof account.firstName != "undefined" && account.firstName != null) ? account.firstName : "";
	   break; 
	 case "productMappingCode" :
	  attributValue =  (typeof account.productMappingCode != "undefined" && account.productMappingCode != null) ? account.productMappingCode : "";
	   break; 
     case "productDescription" :
	  attributValue =  (typeof account.productDescription != "undefined" && account.productDescription != null) ? account.productDescription : "";
	   break; 
     case "accountStatus" :
	  attributValue =  (typeof account.accountStatus != "undefined" && account.accountStatus != null) ? account.accountStatus : "";
	   break; 
     case "lineOfBusiness" :
	  attributValue =  (typeof account.lineOfBusiness != "undefined" && account.lineOfBusiness != null) ? account.lineOfBusiness : "";
	   break; 
     case "accountKey" :
	  attributValue =  (typeof account.accountKey != "undefined" && account.accountKey != null) ? account.accountKey : "";
	   break;  
     case "homeCountryLocale" :
	  attributValue =  (typeof account.homeCountryLocale != "undefined" && account.homeCountryLocale != null) ? account.homeCountryLocale : "";
	   break;
     case "accountNumber" :
	  attributValue =  (typeof account.accountNumber != "undefined" && account.accountNumber != null) ? account.accountNumber : "";
	   break;
     case "sortedIndex" :
	  attributValue =  (typeof account.sortedIndex != "undefined" && account.sortedIndex != null) ? account.sortedIndex : "";
	   break;	
     case "accountSetupDate" :
	  attributValue =  (typeof account.accountSetupDate != "undefined" && account.accountSetupDate != null) ? formatAccountSetupDate(account.accountSetupDate) : "";
	   break;	
     case "embossedName" :
	  attributValue =  (typeof account.embossedName != "undefined" && account.embossedName != null) ? account.embossedName : "";
	   break;		   
	 }
  }else if(xcutType === "Non-CDS") {
    switch(attribute) { 
	 case "additionalCard" :
	  attributValue =  (typeof account.additionalCard != "undefined" && account.additionalCard != null) ? account.additionalCard : "";
	  break;
	 case "basicAccountIndicator" :
  	   attributValue =  (typeof account.additionalCard != "undefined" && account.additionalCard != null) ? !(account.additionalCard) : "";
	   break; 
	 case "firstName" :
	   attributValue =  (typeof account.firstName != "undefined" && account.firstName != null) ? account.firstName : "";
	   break; 
	 case "productMappingCode" :
	  attributValue =  (typeof account.pmcGrp != "undefined" && account.pmcGrp != null) ? account.pmcGrp : "";
	   break; 
     case "productDescription" :
	  attributValue =  (typeof account.cardDesc != "undefined" && account.cardDesc != null) ? account.cardDesc : "";
	   break; 
     case "accountStatus" :
	  attributValue =  (typeof account.cardStatus != "undefined" && account.cardStatus != null) ? account.cardStatus : "";
	   break; 
     case "lineOfBusiness" :
	  attributValue =  (typeof account.cardType != "undefined" && account.cardType != null) ? account.cardType : "";
	   break; 
     case "accountKey" :
	  attributValue =  (typeof account.cardKey != "undefined" && account.cardKey != null) ? account.cardKey : "";
	   break;  
     case "homeCountryLocale" :
	  attributValue =  (typeof account.homeCountryLocale != "undefined" && account.homeCountryLocale != null) ? account.homeCountryLocale : "";
	   break;
     case "accountNumber" :
	  attributValue =  (typeof account.acctNum != "undefined" && account.acctNum != null) ? account.acctNum : "";
	   break;
     case "sortedIndex" :
	  attributValue =  (typeof account.sortedIndex != "undefined" && account.sortedIndex != null) ? account.sortedIndex : "";
	   break;	
     case "accountSetupDate" :
	  attributValue =  (typeof account.accountTenure != "undefined" && account.accountTenure != null) ? account.accountTenure : "";
	   break;
     case "embossedName" :
	  attributValue =  (typeof account.embossedName != "undefined" && account.embossedName != null) ? account.embossedName : "";
	   break;	   
	 }    
  }
  }
  }catch(e){}  
  return attributValue;
}