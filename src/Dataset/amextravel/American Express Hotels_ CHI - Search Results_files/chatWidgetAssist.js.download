/**
 * This file define a few classes to assist Embedded Window on iFrame.
 * Please dont change these unless you absolutely know what you are doing.
 **/
 
window.lpCWTag = window.lpCWTag || {};
window.lpCWTagConst = window.lpCWTagConst || {};


/**
 * Logger - to provide printing statement and JSON object to browser console.
 * Usage:
 * 		logger = new lpCWTagUI.LPChatWidgetLogger();
 * 		logger.isSessionStorageSupported()
 * Output:
 *		boolean - true | false
 * @version: 0.9
 */
lpCWTag.LPChatWidgetLogger = lpCWTag.LPChatWidgetLogger || function LPChatWidgetLogger() {
	var cwLogger = this;
	
	/**
	 * adding leading zeros
	 * @param num - actual number
	 * @param size - length of actual number needs for leading zeros
	 */
	function padZeros(num, size) {
	    var temp = "000" + num;
	    return temp.substr(temp.length-size);
	}

	/**
	 * printing to browser console if supported
	 * @param pLogName - logger name
	 * @param pData - a simple string or complex JSOn data type
	 * @param pData2 - a simple string or complex JSOn data type
	 * @param pDebugOn - output to console only if true
	 */
	function print_to_log(pLogName, pData, pData2, pDebugOn) {
		if (pDebugOn) {
			var date = new Date();
			try {
				pData = typeof pData === 'string' ? pData : JSON.stringify(pData);
				pData2 = typeof pData2 === 'string' ? pData2 : JSON.stringify(pData2);
			} catch (exc) {
				pData = exc;
				pData2 = "...";
			}
			date = "" + padZeros(date.getHours(), 2) + ":" + padZeros(date.getMinutes(), 2) 
						+ ":" + padZeros(date.getSeconds(), 2) + ":" + padZeros(date.getMilliseconds(), 3);
			if(!(window.console && console.log)) {
			  console = {
			    log: function(){},
			    debug: function(){},
			    info: function(){},
			    warn: function(){},
			    error: function(){}
			  };
			}
			console.log(date + " " + pLogName + " : " + pData + (pData2 == "" ? "" : (" : " + pData2)));
		}
	}
	
	/**
	 * print debug statement to console only if DEBUG_ENABLE is true
	 * @param dataOrMessage - string or JSON
	 * @param dataOrMessage2 - string or JSON
	 */
	cwLogger.debug = function(dataOrMessage, dataOrMessage2){
		print_to_log(lpCWTagConst.LOGGER_NAME_IFRAME, dataOrMessage || "", dataOrMessage2 || "", lpCWTagConst.DEBUG_ENABLE);
	}	
	
	/**
	 * print info statement to console
	 * @param dataOrMessage - string or JSON
	 * @param dataOrMessage2 - string or JSON
	 */
	cwLogger.info = function(dataOrMessage, dataOrMessage2){
		print_to_log(lpCWTagConst.LOGGER_NAME_IFRAME, dataOrMessage || "", dataOrMessage2 || "", lpCWTagConst.DEBUG_ENABLE);
	}	
}

/**
 * LPChatWidgetAssist is providing the basic/common functionalities for the Embedded Window including creating the dynamic screen, detecting 
 * browser user agent, encode html content, etc.
 * Usage:
 * 		cwa = new lpCWTag.LPChatWidgetAssist();
 * 		cwa.debug("string or json object", "string or json object")
 * Output:
 *		time_stamp : LOGGER NAME : string or json object : string or json object
 * @version: 0.9
 */
lpCWTag.LPChatWidgetAssist = lpCWTag.LPChatWidgetAssist || function LPChatWidgetAssist(window) {
	var cwAssist = this;
	var logger = new lpCWTag.LPChatWidgetLogger();
	var isShowPreChatScreen = false;
	var isPrepareChat = false;
	var isShowPostChatScreen = false;
			
	function htmlEncode(text){
		return $('<div/>').text(text).html();
	}
	
	function htmlDecode(text){
		return $('<div/>').html(text).text();
	}
	
	/**
	 * retrieves values from session storage
	 * @param pKey - key
	 */
	cwAssist.getValueFromSessionStorage = function(pKey){
		var val = "";
		if(typeof sessionStorage != "undefined"){
			var value = sessionStorage.getItem(pKey);
			val = typeof value != "undefined"? value: "";
		}
		return val;
	}

	/**
	 * update values to session storage
	 * @param pKey - key
	 * @param pVal - value
	 */
	cwAssist.setValueToSessionStorage = function(pKey, pVal){
		if(typeof sessionStorage != "undefined"){
			sessionStorage.setItem(pKey, pVal);
		}
	}
	
	/**
	 * deletes key from session storage
	 * @param pKey - key
	 */
	cwAssist.deleteValueToSessionStorage = function(pKey){
		if(typeof sessionStorage != "undefined"){
			sessionStorage.removeItem(pKey);
		}
	}

	/**
	 * return true if user agent is IE 10 or IE 11 and false otherwise
	 */
	cwAssist.isIE10n11 = function(){
		var browserAgent = cwAssist.detectUserAgent();
		var browserType = browserAgent.browser;
		var browserVersion = browserAgent.version;
		
		logger.debug("isIE10n11", browserAgent);
		
		if(browserType.toUpperCase() == "MSIE" || browserType.toUpperCase() == "IE"){
			var browserVersion = parseInt(browserVersion);
			if(browserVersion == 10 || browserVersion == 11){
				return true;
			}
		}
		return false;
	}
	
	/**
	 * detect user browser agent 
	 */
	cwAssist.detectUserAgent = function(){
		var userAgent = navigator.userAgent, temp, matchPattern;
    var matchBrowser = {};
    
    matchPattern= userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if(/trident/i.test(matchPattern[1])){
        temp=  /\brv[ :]+(\d+)/g.exec(userAgent) || [];
        matchBrowser.browser = "IE";
				matchBrowser.version = temp[1] || '';
				if(!!navigator.userAgent.match(/Trident.*rv[ :]*11\./)){
					matchBrowser.browser = "IE";
					matchBrowser.version = "11";
					return matchBrowser;
	    	}
    }
    
    if(matchPattern[1]=== 'Chrome'){
        var temp= userAgent.match(/\bOPR\/(\d+)/)
        if(temp!= null) {
        	matchBrowser.browser = "Opera";
					matchBrowser.version = temp[1] || '';
        }
    }
    
    matchPattern= matchPattern[2]? [matchPattern[1], matchPattern[2]]: [navigator.appName, navigator.appVersion, '-?'];
    if((temp= userAgent.match(/version\/(\d+)/i))!= null) {
    	matchPattern.splice(1, 1, temp[1]);
    }

    matchBrowser.browser = matchPattern[ 0 ] || "";
		matchBrowser.version = matchPattern[ 1 ] || "0";
		return matchBrowser;
	};	 
	
	/**
	 * return true if browser is supported sessionStorage 
	 */
	cwAssist.isSessionStorageSupported = function(){
		var sessionStorageFound = false;
		try{
			if(typeof sessionStorage != "undefined" && sessionStorage != null){
				sessionStorageFound = true;
			}
		} catch(excpt){}
			
		logger.debug("sessionStorage " + (sessionStorageFound?"is": "is NOT"), "available");
		return sessionStorageFound;
	}
	
	/**
	 * return true if browser is supported JSON
	 */
	cwAssist.isJSONSupported = function(){
		var jsonFound = false;
		try{
			if (JSON && typeof JSON.parse === 'function') {
				jsonFound = true;
			}else if (typeof JSON === 'object' && typeof JSON.parse === 'function') {
				jsonFound = true;
			}
		} catch(excpt){}
			
		logger.debug("JSON " + (jsonFound?"is": "is NOT"), "available");
		return jsonFound;
	}
	
	/**
	 * return true if browser is supported postMessage
	 */
	cwAssist.isPostMessageSupported = function(){
		var postMsgFound = false;
		try{
			if (typeof window.postMessage === 'function') {
				postMsgFound = true;
			}else if (typeof window.postMessage != 'undefined') {
				postMsgFound = true;
			}
		} catch(excpt){}
			
		logger.debug("PostMessage " + (postMsgFound?"is": "is NOT"), "available");
		return postMsgFound;
	}
	
	/**
	 * return true if browser is supported for technologies embedded window required
	 */
	cwAssist.isBrowserCompatible = function(){
		return cwAssist.isJSONSupported() && cwAssist.isPostMessageSupported() && cwAssist.isSessionStorageSupported() ? true: false;
	}
	
	/**
	 * check if browser is supported 
	 */
	cwAssist.isBrowserSupported = function(){
		var browser = cwAssist.detectUserAgent();
		if(browser.browser.toUpperCase() == "CHROME" && browser.version >= 31)
			return true;
		else if((browser.browser.toUpperCase() == "IE" || browser.browser.toUpperCase() == "MSIE")  && browser.version >= 8)
			return true;
		else if(browser.browser.toUpperCase() == "FIREFOX" && browser.version >= 31)
			return true;
		else if(browser.browser.toUpperCase() == "SAFARI" && browser.version >= 5)
			return true;
		else
			return false;
	}
	
	/**
	 * make html for a question based on type
	 * @param dataTypes - data type structure
	 * @param question - question structure in JSON format
	 * @param i - index
	 *
	 * @return HTML content 
	 */
	cwAssist.makeInputSection = function(dataTypes, question, i){
		//var surveyContainer = cwAssist.makeHiddenInput("lpSurveyQuestionID"+ i, question.id);
		var surveyContainer = "";
		if (question.type == dataTypes.TEXT) {
			//surveyContainer += cwAssist.makeTextBoxHtml(question, i);
			if(question.validationType == "numeric"){
				surveyContainer += cwAssist.makeNumericTextBoxHtml(question, i);
			}else{
				surveyContainer += cwAssist.makeTextBoxHtml(question, i);
			}
		} else if (question.type == dataTypes.CHECKBOX) {
			surveyContainer += cwAssist.makeCheckbox(question, i)
		} else if (question.type == dataTypes.RADIO) {
			surveyContainer += cwAssist.makeRadioButton(question, i)
		} else if (question.type == dataTypes.RADIO_SIDE) {
			surveyContainer += cwAssist.makeRadioButtonSideBySide(question, i);
		} else if (question.type == dataTypes.NUMERIC) {
			surveyContainer += cwAssist.makeNumericTextBoxHtml(question, i);
		} else if (question.type == dataTypes.TEXT_AREA) {
			surveyContainer += cwAssist.makeTextAreaHtml(question, i);
		} else if (question.type == dataTypes.DROPDOWN) {
			if($("#lpChatContent").length != 0){
				surveyContainer += cwAssist.makeSelectBoxHtmlForPreChat(question, i);			
			}else{
				surveyContainer += cwAssist.makeSelectBoxHtml(question, i);
			}
		}
		return surveyContainer;
	}

	/* make html string for hidden input tag */
	cwAssist.makeHiddenInput = function(name, value){
		return "<input type='hidden' id='" + name + "' name ='" + name + "' value = '" + value + "' />";
	}

	/* make html for simple input text box */
	cwAssist.makeTextBoxHtml = function(question, i){
		return '<div class="lpAnswerOptions"><input type="text" id="lpSurveyQuestionAns'+ i +'" class="lpTextBoxType" value=""></div>';
	}

	/* make html for text area */
	cwAssist.makeTextAreaHtml = function(question, i){
		return '<div class="lpAnswerOptions">'
				+ '<textarea type="text" id="lpSurveyQuestionAns'+ i + '" cols="40"></textarea>' + '</div>';
	}

	/* make html for HTML 5 number input box */
	cwAssist.makeNumericTextBoxHtml = function(question, i){
		return '<div class="lpAnswerOptions"><input type="number" id="lpSurveyQuestionAns'+ i + '" class="lpNumberInputType" value=""></div>';
	}

	/* make html for select box */
	cwAssist.makeSelectBoxHtmlForPreChat = function(question, i){
      var surveyContainer = '<div class="lpAnswerOptions">' + '<div class="lpAnswerOptionSelect" id="lpSurveyQuestionAns' + i + '">';
      surveyContainer += '<a class="lpSelectedOption" href="#" id="lpSelectedOption' + i + '"><span class="lpAnchLinkTxt" id="lpAnchLinkTxt">Select One</span><span class="lpDDarrow"></span></a>';
      surveyContainer += '<ul class="ioaOptionsList" id="ioaOptionsList' + i + '" style="display: none;">';
      //surveyContainer += '<li value=""><a href="#" class="lpSelectAnchCls" id="lpSelectAnchCls">' + lpCWTagConst.lpTxt_SelectOne + '</a></li>';
      for ( var i=0; i<question.entry.length; i++ ) {
          var option = question.entry[i];
		  var idValue = option.value.replace(/\s/g, '');
		  var idMainVal = idValue.replace(/[&\/\\#,+()=$~%.'":*?<>{}]/g, '');
		  var logicId = question.id;
		  var logicIdStr = logicId.toString();
		  var logicIdSub = logicIdStr.substring(4);
		  var logicIdParse = parseInt(logicIdSub)+i;
		  surveyContainer += '<li value = "' + option.value
                  + '" ';
          if (option.checked) {
              surveyContainer += 'selected ';
          }
          surveyContainer += ' id="'+idValue+'"><a href="#" class="lpSelectAnchCls" id="lpSelectAnchCls'+idMainVal+logicIdParse+'">' + option.displayValue + '</a></li>'			
      }
      surveyContainer += '</ul>'
      surveyContainer += '</div>' + '</div>';
      return surveyContainer;
  }
  
  /* make html for select box */
	cwAssist.makeSelectBoxHtml = function(question, i){
       var surveyContainer = '<div class="lpAnswerOptions">' + '<select class="lpAnswerOptionSelect" id="lpSurveyQuestionAns' + i + '">';
      surveyContainer += '<option value="">' + lpCWTagConst.lpTxt_SelectOne + '</option>';
      for ( var i=0; i<question.entry.length; i++ ) {
          var option = question.entry[i];
          surveyContainer += '<option value = "' + option.value
                  + '" ';
          if (option.checked) {
              surveyContainer += 'selected ';
          }
          surveyContainer += '>' + option.displayValue + '</option>'
      }
      surveyContainer += '</select>' + '</div>';
      return surveyContainer;
  }
        
	/* make html for checkbox. Use <label> to handle label click */
	cwAssist.makeCheckbox = function(question, i){
      var id = "lpSurveyQuestionAns" + i;
      var labelCVal = question.label.replace(/\s/g, '');
	  var lpHorzChk =  question.label.indexOf("Horizontal");
	  var lpHorzClz = "";
	  if(lpHorzChk > 0){
		  lpHorzClz = "CheckBoxHorizontal";
	  }else{
		  lpHorzClz ="";
	  }
      var surveyContainer = '<div class="lpAnswerOptions lpCheckboxOptions '+lpHorzClz+'" id="' + id + '" >';
      for ( var i=0; i<question.entry.length; i++ ) {
          var option = question.entry[i];
          surveyContainer += '<label class="lpCheckboxType">';
          surveyContainer += '<input type="checkbox" class="lpAnserOptionsRadio" name="' + id + '" ' + 'value="' + option.value + '" ';
          if (option.checked) {
              surveyContainer += 'checked="true" ';
          }
					surveyContainer += '/><div class="lpAnserOptionsDesc" tabindex="0">' + option.displayValue +'</div>';
					surveyContainer += '<div style="clear:both;"/>';
					surveyContainer += '</label>';
      }
      surveyContainer += '</div>';
      return surveyContainer;   
  }

	/* make html for radio buttons one below the other. Use <label> to handle label click */
	cwAssist.makeRadioButton = function(question, i){
      var id = "lpSurveyQuestionAns" + i;
      var labelRVal = question.label.replace(/\s/g, '');
	   var lpHorzChk =  question.label.indexOf("Horizontal");
	  var lpHorzClz = "";
	  if(lpHorzChk > 0){
		  lpHorzClz = "RadioButtonHorizontal";
	  }else{
		  lpHorzClz ="";
	  }
      var surveyContainer = '<div class="lpAnswerOptions lpRadioBtnOptions '+lpHorzClz+'" id="' + id + '" >';
      for ( var i=0; i<question.entry.length; i++ ) {
          var option = question.entry[i];
          surveyContainer += '<label class="lpRadioBtnType">';
          surveyContainer += '<input type="radio" class="lpAnserOptionsRadio" name="' + id + '" ' + 'value="' + option.value + '" ';
          if (option.checked) {
              surveyContainer += 'checked="true" ';
          }
					surveyContainer += '/><div class="lpAnserOptionsDesc">' + option.displayValue +'</div>';
					surveyContainer += '<div style="clear:both;"/>';
					surveyContainer += '</label>';
      }
      surveyContainer += '</div>';
      return surveyContainer;   
  }

	/* make html for radio buttons side by side */
	cwAssist.makeRadioButtonSideBySide = function(question, i){
      return cwAssist.makeRadioButton(question, i);
  }

	/* change focus to the right field */
	cwAssist.focusOnElement = function(question){
		var  questionContainerDiv = '#lpChatSurveySectionQ' + question.order ;
		if($(questionContainerDiv).find("textarea").length){
			$(questionContainerDiv).find("textarea").focus();
		}else if($(questionContainerDiv).find("select").length){
			$(questionContainerDiv).find("select").focus();
		}else{
			$(questionContainerDiv).find("input:visible:first").focus();
		}
	}
	
	/* insert Required Error Message in window */
	cwAssist.insertRequiredErrorMessage = function(question, focusElement){
		var surveyContainerQErrorDiv = '#lpChatSurveySectionQError' + question.order;
		$(surveyContainerQErrorDiv).html('<div class="lpErrorExclamation"><span></span></div><div class="lpErrorTxtMsg">' + lpCWTagConst.lpMsg_CompTheRequiredField + '</div>');
		$(surveyContainerQErrorDiv).show();
		
		if(focusElement){
			cwAssist.focusOnElement(question)
		}
	}
	
	cwAssist.insertInavlidCodesErrorMessage = function(question, focusElement){
		var surveyContainerQErrorDiv = '#lpChatSurveySectionQError' + question.order;
		$(surveyContainerQErrorDiv).html('<div class="lpErrorExclamation"><span></span></div><div class="lpErrorTxtMsg">' + lpCWTagConst.lpMsg_DuplicateSpecialCharacters + '</div>');
		$(surveyContainerQErrorDiv).show();
		
		if(focusElement){
			cwAssist.focusOnElement(question)
		}
	}
	/**
	 * show survey css to indicate the question is required
	 */
	cwAssist.surveyQuestionShowRequired = function(dataTypes, question){
		if(question && question.mandatory){
			var elemErrorId = "#lpChatSurveySectionQError"+question.order;
			if (question.type == dataTypes.TEXT || question.type == dataTypes.NUMERIC || question.type == dataTypes.TEXT_AREA){
				var elemId = "#lpSurveyQuestionAns"+question.order;
				$(elemId).removeClass().addClass("lpQuestionErrorBorder");
			}else{
				var elemId = "#lpChatSurveySectionQ"+question.order;
				$(elemId).addClass("lpQuestionErrorBorder");
			}
			
			cwAssist.insertRequiredErrorMessage(question, false);
		}
	}
	
	/**
	 * hide survey css to indicate the question is not required
	 */
	cwAssist.surveyQuestionHideRequired = function(dataTypes, question, bClearValue){
		if(question && question.mandatory){
			var elemErrorId = "#lpChatSurveySectionQError"+question.order;
		
			if (question.type == dataTypes.TEXT || question.type == dataTypes.NUMERIC || question.type == dataTypes.TEXT_AREA){
				var elemId = "#lpSurveyQuestionAns"+question.order;
				if(bClearValue)
					$(elemId).val("");
				$(elemId).removeClass();
			}else{
				var elemId = "#lpChatSurveySectionQ"+question.order;
				$(elemId).removeClass().addClass("lpChatSurveySectionQ");
			}
			
			$(elemErrorId).empty();
			$(elemErrorId).hide();
		}
	}
	
	/**
	 * hide survey border red of the question
	 */
	cwAssist.surveyQuestionHideReqRedBorder = function(dataTypes, question, bClearValue){
		$("#lpChatSurveySectionQ"+question.order).hide();
		
		if (question.type == dataTypes.CHECKBOX) {
			if(bClearValue){
				$("#lpSurveyQuestionAns"+ question.order).removeAttr('checked');
			}
		} else if (question.type == dataTypes.RADIO || question.type == dataTypes.RADIO_SIDE) {
			if(bClearValue){
				$('input[name="lpSurveyQuestionAns'+question.order+'"]').prop('checked', false);
			}
		} else if (question.type == dataTypes.DROPDOWN) {
			if(bClearValue){
				$("#lpSurveyQuestionAns"+ question.order).prop('selectedIndex',0);
			}
		}
		
	}
	
	/* insert invalid Error Message in  window */
	cwAssist.insertInvalidErrorMessage = function(question  , focusElement){
		
		var surveyContainerQErrorDiv = '#lpChatSurveySectionQError' + question.order;
		$(surveyContainerQErrorDiv).html('<div class="lpErrorExclamation"><span></span></div><div class="lpErrorTxtMsg">' + lpCWTagConst.lpMsg_NotHaveValidVal + '</div>');
		$(surveyContainerQErrorDiv).show();
		
		if(focusElement){
			cwAssist.focusOnElement(question)
		}
	}
	
	/* insert invalid Error Message in  window */
	cwAssist.insertInvalidErrorMessageForNumeric = function(question  , focusElement){
		
		var surveyContainerQErrorDiv = '#lpChatSurveySectionQError' + question.order;
		$(surveyContainerQErrorDiv).html('<div class="lpErrorExclamation"><span></span></div><div class="lpErrorTxtMsg">Must be a numeric value</div>');
		$(surveyContainerQErrorDiv).show();
		
		if(focusElement){
			cwAssist.focusOnElement(question)
		}
	}
	
	/* html for visitor's message */
	cwAssist.lpChatMakeInfoNotificationMessage = function(title, msg, lpChatFontSize){
		return '<div class="lpChatInfoTextLine"><div class="lpChatMsg" style="font-size:' + lpChatFontSize
					+ 'px"><span class="lpChatInfoTextLabel">Info:</span> ' + htmlEncode(msg) + '</div></div>';
  }
  
	/* html for visitor's message */
	cwAssist.lpChatMakeRightSideMessage = function(title, msg, lpChatFontSize,displaySource,messageOwnerTimestamp){
		if(displaySource){
  	return '<div class="lpMessage lpTextRight">'              
              + '<div class="lpGreenBg lpPosRel lpBubble lpRightBubble" onclick="togglelabel(this)">'
              + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
              + 'px">' + htmlEncode(msg) + '</div>' + '</div><div class="messageOwner" >' + messageOwnerTimestamp + '</div></div>';
		}else{
			return '<div class="lpMessage lpTextRight">'
              + '<div class="lpGreenBg lpPosRel lpBubble lpRightBubble" onclick="togglelabel(this)">'
              + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
              + 'px">' + htmlEncode(msg) + '</div>' + '</div><div class="messageOwner" >' + messageOwnerTimestamp + '</div></div>';
		}
  }

	/* html for agent's message */
	cwAssist.lpChatMakeLeftSideMessage = function(title, msg, lpChatFontSize,displaySource){
		if(displaySource){
  	return '<div class="lpMessage">' +  '<div class="lpBlueBg lpLeftBubble lpPosRel lpBubble">'
            + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
            + 'px">' + msg + '</div>' + '</div></div>';
		}else{
			return '<div class="lpMessage">' + '<div class="lpBlueBg lpLeftBubble lpPosRel lpBubble">'
            + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
            + 'px">' + msg + '</div>' + '</div></div>';
		}
  }

/* html for virtual agent's message */
	cwAssist.lpNinaChatMakeLeftSideMessage = function(title, msg, lpChatFontSize,displaySource,messageOwnerTimestamp ){
		if(displaySource){
			return '<div class="lpMessage">' +  '<div class="lpPurpleBg lpLeftBubble lpPosRel lpBubble" onclick="togglelabel(this)">'
            + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
                + 'px">' + msg + '</div>' + '</div><div class="messageOwner vamsg">' + messageOwnerTimestamp + '</div></div>';
		}else{
			return '<div class="lpMessage">' + 
            '<div class="lpPurpleBg lpLeftBubble lpPosRel lpBubble" onclick="togglelabel(this)">'
            + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
                + 'px">' + msg + '</div>' + '</div><div class="messageOwner vamsg">' + messageOwnerTimestamp + '</div></div>';
		}
  }

cwAssist.lpNinaChatMakeLeftSideProactiveMessage = function(title, msg, lpChatFontSize,displaySource,messageOwnerTimestamp ){
		if(displaySource){
			return '<div class="lpMessage">' +  '<div class="lpBlueBg lpLeftBubble lpPosRel lpBubble lpProactive" onclick="togglelabel(this)">'
            + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
                + 'px">' + msg + '</div>' + '</div></div>';
		}else{
			return '<div class="lpMessage">' +
            '<div class="lpBlueBg lpLeftBubble lpPosRel lpBubble" onclick="togglelabel(this)">'
            + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
                + 'px">' + msg + '</div>' + '</div></div>';
		}
  }
	/* make pre / post chat survey container Html */
	/*cwAssist.lpChatMakeSurveyContainerHtml = function(pPostChat){
		isShowPostChatScreen = true;
		isPrepareChat = false;
		isShowPreChatScreen = false;
		return '<div id="lpPreChatMessagesSection" class="lpMiddleSection" >'
				+ '<div class=""><div id="lpPreChatSurveySectionTitle" class=" ">'
				+ '<!--span class="lpPosRel lpChatSurveySectionLogo lpLeft sprite-bg sprite-company-logo-small" ></span-->'
				+ '<div class="lpLeft lpPosRel ' + (pPostChat?'lpChatSurveySectionTextPost':'lpChatSurveySectionText') +'"></div>'
				+ '<div id="lpChatTranscript" class="lpBlueButton lpPointer">View your Chat</div>'
				+ '<div class="lpClear"></div></div>'
				+ '<div class="lpLine"></div>'
				+ '<div class="lpHeight298 lpYscroll"><div id="lpSurveyQuestionsContainer" class="lpPadLeftRight19"></div>'
				+ '<div id="lpChatSurveySectionBtn" class="lpTextCenter">'
				+ '<div id="lpPreChatSurveySubmitBtn" class="lpBlueButton lpPointer">' + lpCWTagConst.lpBtn_StartChat + '</div>'
				+ '<input type="hidden" value="" id="lpSurveyID">'
				+ '<input type="hidden" value="" id="lpSurveyTotalQuestNum">'
				+ '</div></div></div></div><div id="lpChatTranscriptSection"></div>';
	}*/
	

	cwAssist.lpNinaChatMakeLeftSideGMessage = function(title, msg, lpChatFontSize,displaySource,messageOwnerTimestamp ){
		if(displaySource){
			return '<div class="lpMessage">' +  '<div class="lpPurpleBg lpLeftBubble lpPosRel lpBubble" onclick="togglelabel(this)">'
            + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
                + 'px">' + msg + '</div>' + '</div><div class="messageOwner greetm addZeroSize vamsg">' + messageOwnerTimestamp + '</div></div>';
		}else{
			return '<div class="lpMessage">' +
            '<div class="lpPurpleBg lpLeftBubble lpPosRel lpBubble" onclick="togglelabel(this)">'
            + '<div class="lpChatMsg" style="font-size:' + lpChatFontSize
                + 'px">' + msg + '</div>' + '</div><div class="messageOwner greetm addZeroSize vamsg">' + messageOwnerTimestamp + '</div></div>';
		}
  }

	/* make pre / post chat survey container Html */
	cwAssist.lpChatMakeSurveyContainerHtml = function(pPostChat){
		isShowPostChatScreen = true;
		isPrepareChat = false;
		isShowPreChatScreen = false;
		return '<div id="lpPreChatMessagesSection" class="lpMiddleSection lpAutomationsurvey" >'
				+ '<div class=""><div id="lpPreChatSurveySectionTitle" class=" " style="display:none">'
				+ '<!--span class="lpPosRel lpChatSurveySectionLogo lpLeft sprite-bg sprite-company-logo-small" ></span-->'
				+ '<div class="lpLeft lpPosRel ' + (pPostChat?'lpChatSurveySectionTextPost':'lpChatSurveySectionText') +'"></div>'
				+ '<div class="lpClear"></div></div>'
				+ '<div class="lpHeight398 lpYscroll"><div id="lpSurveyQuestionsContainer" class="lpPadLeftRight19"></div>'
				+ '<div id="lpChatSurveySectionBtn" class="lpTextCenter">'
				+ '<div id="chatWithCCPButton" class="lpBlueButton lpPointer" tabindex="0" style="display:none">' + lpCWTagConst.lpBtn_ChatWithCCP + '</div>'
				+ '<div id="lpPreChatSurveySubmitBtn" class="lpGrayButton lpPointer" tabindex="1">' + lpCWTagConst.lpBtn_StartChat + '</div>'
				+ '<input type="hidden" value="" id="lpSurveyID">'
				+ '<input type="hidden" value="" id="lpSurveyTotalQuestNum">'
				+ '</div></div></div></div><div id="lpChatTranscriptSection"></div>';
	}

	cwAssist.leChatMakeSurveyContainerHtml = function(pPostChat){
		isShowPostChatScreen = true;
		isPrepareChat = false;
		isShowPreChatScreen = false;
		return '<div id="lpPreChatMessagesSection" class="lpMiddleSection" >'
				+ '<div class=""><div id="lpPreChatSurveySectionTitle lePostChatTitleHeader " class=" " style="display:none">'
				+ '<div class="lpLeft lpPosRel ' + (pPostChat?'lpChatSurveySectionTextPost':'lpChatSurveySectionText') +'"></div>'							
				+ '<div class="lpClear"></div></div>'
				+ '<div class="lpHeight398 lpYscroll"><div id="lpSurveyQuestionsContainer" class="lpPadLeftRight19"></div>'
				+ '<div id="lpChatSurveySectionBtn" class="lpTextCenter">'
				+ '<div id="lpPreChatSurveySubmitBtn" class="lpBlueButton lpPointer" style="display:none"></div>'
				+ '<input type="hidden" value="" id="lpSurveyID">'
				+ '<input type="hidden" value="" id="lpSurveyTotalQuestNum">'
				+ '</div></div></div></div><div id="lpChatTranscriptSection"></div>';
	}


	/* New make pre chat survey container Html */
	cwAssist.lpChatMakeSurveyContainerHtmlNew = function(){
		isShowPreChatScreen = true;
		isPrepareChat = false;
		isShowPostChatScreen = false;			
		return '<div id="lpPreChatMessagesSection" class="lpMiddleSection lpTextCenter lpHeight364 lpNewSection" >'
				+ '<div class="lpPadLeftRight19" >'
				+ '<div id="lpFocusContent" tabindex="0"></div>'
				+ '<div class="lpLogo871">'
				+ '<img src="https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/Amex_logo_trans.gif" style="height: 70px;width: 80px;">'
				+ '</div><div id="lpTextBlink" class="lpLoadingMsg lpLoadingMsgLt">' + lpCWTagConst.lpTxt_WS_Est_Connection + '</div>'
				+ '<div id="lpChatContent" class="lpChatContent" style="display: none;">'
				//+ '<div class="lpPreChatText">Please provide a short sentence to let us know how we can assist you today:</div>'
				//+ '<div class="lpHeight298 lpYscroll"><div id="lpSurveyQuestionsContainer" class="lpPadLeftRight19">'+	cwAssist.makeTextAreaHtmlNew()	+'</div>'
				+ '<div class="lpHeight255 lpYscroll11"><div id="lpSurveyQuestionsContainer" class="lpPadLeftRight19"></div>'
				+ '<div id="lpChatSurveySectionBtn" class="lpTextCenter">'
				+ '<div id="lpContinueSubmitBtn" class="primary-button lpPointer" tabindex="0">Continue</div>'
				+ '<div id="lpNinaPreChatSurveySubmitBtn" class="primary-button lpPointer" tabindex="0">Chat with a Virtual Agent</div>'
				+ '<div id="lpPreChatSurveySubmitBtn" class="primary-button lpPointer" tabindex="0">Start Live Chat</div>'
				+ '<div id="lpPreChatSurveyCloseBtn" class="secondary-button lpPointer" tabindex="0">Close</div>'
				+ '<input type="hidden" value="" id="lpSurveyID">'
				+ '<input type="hidden" value="" id="lpSurveyTotalQuestNum">'
				+ '</div></div></div></div>';
	}
	/*CHAT HISTORY CHANGE*/
	cwAssist.lpChatMakeLoaderHtml = function() {
		return '<div id="lpChatLoader" class="lpMiddleSection lpTextCenter lpHeight364 loader">'
		+ '<div class="lpPadLeftRight19" >'
		+ '<div class="lpPaddingTopBottom20">'
		+ '<img src="https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/loaderHist.gif" class="lpChatLoadingSectionLoadingIcon" />'
		+ '</div></div></div>'
	}
	
	/* New make html for loading screen */
	cwAssist.lpChatMakeLoadingScreenHtmlNew = function(){
					
		return '<div id="lpPreChatMessagesSection" class="lpMiddleSection lpTextCenter lpHeight364 lpNewSection" >'
				+ '<div class="lpPadLeftRight19" >'
				+ '<div id="lpFocusContent" tabindex="0"></div>'
				+ '<div class="lpLogo871">'
				+ '<img src="https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/Amex_logo_trans.gif" style="height: 70px;width: 80px;">'
				+ '</div><div id="lpTextBlink" class="lpLoadingMsg lpLoadingMsgLt">' + lpCWTagConst.lpTxt_WS_Est_Connection + '</div></div></div>'
	}
	
	/* make html for loading screen */
	cwAssist.lpChatMakeLoadingScreenHtml = function() {
		return '<div id="lpChatLoadingSection" class="lpMiddleSection lpTextCenter lpHeight364">'
				+ '<div class="lpPadLeftRight19" >'
				+ '<div class="lpLogo79">'
				+ '<span class="lpChatLoadingSectionLogo sprite-bg sprite-company-logo-large" ></span>'
				+ '</div><div class="lpLoadingMsg">' + lpCWTagConst.lpTxt_WS_Est_Connection + '</div>'
				+ '<div class="lpPaddingTopBottom20">'
				+ '<img src="img/loader.gif" class="lpChatLoadingSectionLoadingIcon" />'
				+ '</div></div></div>'
	}

		/* Make HTML  for confirmation screen post survey submission */
		cwAssist.lpChatScreenPostSurveySubmission = function(){
			return '<div id="surveySubmisssionWrapper" class="lpHeight364">'
				+ '<div class="logoWrapper">'
            + '<span class="sprite-company-logo-small" ></span>'
				+ '</div><div class="lpThanksGreeting">Thank you for your feedback</div>'
				+ '<div class="lpThanksDescription">We will use it to improve the service we deliver<br>to you and our other valued customers</div>'
            + '<div id="referFriendBanner" class="lpHeight364">'
            + '<div class="referWraper">'
            + '</div><div class="lpreferMessage">We\'re glad you are likely to refer a friend</div>'
            + '<div class="lpreferDescription">It\'s easy, and you can earn rewards</div>'
            + '<a href="https://www.americanexpress.com/en-us/referral?id=201279&intlink=US-MGM-C2C"  target="_blank" class="button">Learn How</a>'
				+'</div>';
		}
	/* make html for screen for offline survey */
	cwAssist.lpChatMakeOfflineSurveySection = function(data){
		var div = '<div id="lpChatEndChatSection" class="lpMiddleSection lpTextCenter lpHeight364 lpYscroll">'
				+ '<div class="lpPadLeftRight19"><div class="lpPadTop25">'
				+ '<span class="lpChatLoadingSectionLogo sprite-bg sprite-company-logo-large" ></span>'
				+ '</div><div class="lpLoadingMsg">'
				+ '</div>'
				+ '<div class="lpPaddingTopBottom20 lpLoadingMsg lpTextCenter">'
				+ data.survey.header
				+ '</div>';
		
		if (data.survey.questions != null) {	
				div += '<div class="lpLine"></div>'
					+ '<div><div id="lpSurveyQuestionsContainer" class="lpPadLeftRight19"></div>'
					+ '<div id="lpChatSurveySectionBtn" class="lpTextCenter">'
					+ '<div id="lpOfflineSurveySubmitBtn" class="lpBlueButton lpPointer">Submit</div>'
					+ '<input type="hidden" value="" id="lpSurveyID">'
					+ '<input type="hidden" value="" id="lpSurveyTotalQuestNum">'
					+ '</div></div>' ;
		}
		div +='</div></div>';
		if((data.survey.header.indexOf("We value your business") != -1) && (data.survey.header.indexOf("We encourage you to explore our convenient self-serve options while you continue to browse our site") != -1)){
			try{
				omn_rmsiteerror('US:AMEX:Acq:AmexAssist:LiveChat:ProfUnavailable');
			}catch(e){
				//console.log("omn error ProfUnavailable");
			}
		}else if(data.survey.header.indexOf("We encourage you to explore our convenient self-serve options while you continue to browse our site") != -1){
			try{
				omn_rmsiteerror("US:AMEX:Acq:AmexAssist:LiveChat:NoConnection");
			}catch(e){
				//console.log("omn error NoConnection for other message");
			}
		}
		return div;
	}
	
	/* make html for offline screen - mostly use by static content set in config file*/
	cwAssist.lpChatMakeOfflineScreenHtml = function(msg,errMsg) {
		if(msg.indexOf("We apologize for the interruption in service") != -1){
				try{
					omn_rmsiteerror("US:AMEX:Acq:AmexAssist:LiveChat:NoConnection");
					sendErrorAlert("cantconnect",errMsg);
				}catch(e){
					//console.log("omn error NoConnection for other message");
				}
			}
		
		return '<div id="lpChatLoadingSection" class="lpMiddleSection lpTextCenter lpHeight364">'
				+ '<div class="lpPadLeftRight19" >'
				+ '<div class="lpLogo79">'
				+ '<span class="lpChatLoadingSectionLogo sprite-bg sprite-company-logo-large" ></span>'
				+ '</div><div class="lpLoadingMsgError">'
				+ 'We were unable to establish a chat connection</div>'
				+ '<div class="lpPaddingTopBottom20 lpLoadingMsg">' + msg + '</div></div></div>';
				
				
	}


       cwAssist.leChatMakeOfflineScreenHtml = function(msg,errMsg) {
		
		return '<div id="lpChatLoadingSection" class="lpMiddleSection lpTextCenter lpHeight364">'
				+ '<div class="lpPadLeftRight19" >'
				+ '<div class="lpLogo79">'
				+ '<span class="lpChatLoadingSectionLogo sprite-bg sprite-company-logo-large" ></span>'
				+ '</div><div class="lpLoadingMsgError">'
				+ 'We were unable to establish a chat connection</div>'
				+ '<div class="lpPaddingTopBottom20 lpLoadingMsg">We apologize for the interruption in service</div></div></div>';
				
				
	}
  
  
       cwAssist.leChatMakeBusyScreenHtml = function() {
		
		var msg = "<br>We value your business. <br><br>However, all of our Customer Care Professionals are unavailable. <br><br>We encourage you to explore our convenient self-serve options while you continue to browse our site. You can also contact us using the number on the back of your Card.<br><br>Thank you!</br>";

		return '<div id="lpChatEndChatSection" class="lpMiddleSection lpTextCenter lpHeight364 lpYscroll" style="font-size:13px;">'
		+ '<div class="lpPadLeftRight19">'
		+ '<div class="lpPadTop25">'
		+ '<span class="lpChatLoadingSectionLogo sprite-bg sprite-company-logo-large"></span>'
		+ '</div><div class="lpLoadingMsg">'
		+ '</div><div class="lpPaddingTopBottom20 lpLoadingMsg lpTextCenter" style="font-size:13px;">'
		+ msg+'</div></div></div>';
				
				
	}
	/* html for chat window to hold agent / visitor messages */
	/*cwAssist.lpChatMakeMessageSection = function(pAudioOn) {
		isPrepareChat = true;
		isShowPostChatScreen = false;
		isShowPreChatScreen = false;
	    return '<div id="lpChatMainMessageSection" ><div id="confirmOverLay"></div><div id="confirmPrompt"><div id="confirmMessage">Are you sure you wish to end this chat?</div><div id="confirmButton" tabindex="0">End Chat</div><div id="confirmCancel" tabindex="0">Continue Chatting</div></div><div>'
	            + '<div id="lpChatMenuSection" class="lpMiddleSection">'
	            + '<div id="lpChatMenuSection" ><div class="lpMenutButtonContainer" >'
	            + '<div class="lpLeft lpMenuButton lpPointer" >'
	            + '<span id="lpChatMenuItemFontDecreaseBtn"  class="lpHoverButton sprite-bg sprite-font-decrease" data-msg="' + lpCWTagConst.lpTxt_DecrFontSize + '" ></span>'
	            + '</div><div class="lpLeft lpMenuButton lpPointer" >'
	            + '<span id="lpChatMenuItemFontIncreaseBtn"  class="lpHoverButton sprite-bg sprite-font-increase" data-msg="' + lpCWTagConst.lpTxt_IncrFontSize + '" ></span>'
	            + '</div><div class="lpLeft lpMenuButton lpPointer" >'
	            + '<span id="lpChatMenuItemAudioBtn"   class="lpHoverButton sprite-bg ' + (pAudioOn?"sprite-font-sound-on": "sprite-font-sound-off") + '" data-msg="' + lpCWTagConst.lpTxt_TurnOffSound +'" ></span></div>'
		     /*+ '<div class="lpLeft lpMenuButton lpPointer" ><span id="lpNinaTransferChatBtn" class="outerwrappersendbtn lpTextCenter "><span id="ninaTransferBtnImg"></span><span id="ninaTransferBtnTxt">Start Live Chat</span></span></div>'*/
		  /*   +'<div class="lpLeft lpMenuButton lpPointer" style="float: right;margin-right: 25px;"><span id="lpPreChatCloseBtn" class="lpBlueButton lpTextCenter ">End Chat</span></div>'
	            + '<div class="lpClear"></div></div></div></div></div>'
	            + '<div id="lpChatMessagesSection" class="lpYscroll">'
				+ '<div id="ninaChatSection" class="lpYscroll">'
				+ '<div id="ninaReloadSystemMessage" style="display:none;"><div><br>This chat may be recorded and monitored. For your  <br>security, click "End Chat" before leaving your computer <br>unattended or when the chat is complete.</div>' 
				+ '<div class="ninaReloadHdrspace" style="display:none;">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right</div></div><div id="ninaChatMessageSection" class="lpYscroll"></div></div>'
	            + '<div class="lpSystemMessageDiv">'
	           	+ '</div></div>'
	            + '<div class="lpTextCenter ">'
	            + '<span id="lpChatAgentType" class="lpChatAgentType">' + lpCWTagConst.lpTxt_AgentTyping + '</span></div>'
	            + '<div id="lpChatInputFieldSection">'
	            + '<textarea placeholder="' + lpCWTagConst.lpTxt_ChatInput + '" id="lpChatInputTextField" class="lpChatInputTextField" rows="3">'
	            + '</textarea> <div id="LpSendDataButton" disabled class="lpLeft lpMenuButton lpPointer" style="float: right;margin-top: 6px; line-height: 15px;font-family: BentonSansRegular;"><a class="outerwrappersendbtn" href="#" ><span class="innersendbtn">Send</span></a></div></div></div>';
	}*/

       /* html for chat window to hold agent / visitor messages */
	cwAssist.lpChatMakeMessageSection = function(pAudioOn) {
		isPrepareChat = true;
		isShowPostChatScreen = false;
		isShowPreChatScreen = false;
		var androidProxyTypingBar = navigator.userAgent.match(/(Android)/g) ? '<textarea id="lpChatInputTextFieldProxy" class="lpChatInputTextField" rows="3" style="position: absolute; z-index: -1; top: 0; left: 8%; width: 78%;"></textarea>' : "";
	    return '<div id="lpChatMainMessageSection" onclick=""><div id="confirmOverLay"></div><div id="confirmPrompt"><div id="confirmMessage">Are you sure you wish to end this chat?</div><div id="confirmButton" tabindex="0">End Chat</div><div id="confirmCancel" tabindex="0">Stay</div></div>'
	            + '<div id="lpChatMessagesSection" class="lpYscroll">'
				+ '<div id="lpChatViewMoreHistory-img"><img src="https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/loaderHist.gif"/></div>'
				+ '<div id="lpChatViewMoreHistory"><a>View More History</a></div>'
				+'<div id="chathistory3"></div>'
				+'<div id="chathistory2"></div>'
				+'<div id="chathistory"></div>'
				+ '<div id="ninaChatSection" class="lpYscroll">'
				+ '<div id="ninaReloadSystemMessage" style="display:none;"><div><br>This chat may be recorded and monitored. For your  <br>security, click "End Chat" before leaving your computer <br>unattended or when the chat is complete.</div>' 
				+ '<div class="ninaReloadHdrspace" style="display:none;">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right</div></div><div id="ninaChatMessageSection" class="lpYscroll"></div></div>'
	           	+'<div id="currentChat"></div>' //US1137693
              +'<div id="ccpTyping"></div>' //US1137693
	           	+ '</div>'
	           
              +'<div id="lpLowSystemMessageDiv"><div>Check Internet Connection</div></div><div id="lpNASystemMessageDiv"><div>Code cannot be sent in this window.</div></div></div>' // US1858944
	            + '<div id="lpchatbottomsection"><div id="commontopics"><div class="commontopics"><div class="commonhead">Common Topics:</div></div></div><div id="elasticresults"><div class="elasticresults"></div></div><div id="lpChatInputFieldSection">'
				+'<div id="lpChatIptFieldSection"><!-- US1587629 -->'
				+'<div class="chat-lpt-hamburger" ><div class="hamburgerimg" id="hamburgerimg"><img src="https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/hamburger.png"  alt="=" /></div><div class="lpxicon" id="lpxicon"><img src="https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/closeicon.png"  alt="X" /></div></div><div class="chat-lpt-textarea" ><textarea placeholder="' + lpCWTagConst.lpTxt_ChatInput + '" id="lpChatInputTextField" class="lpChatInputTextField" rows="3"></textarea>' + androidProxyTypingBar + '</div><div class="chat-lpt-send-button" id="LpSendDataButton" ><a href="#" >Send</a></div></div></div>'
				+'<div id="lptoolbar">'
        		+'<div>'
	            + '<div id="lpChatMenuSection" class="lpMiddleSection">'
	            + '<div id="lpChatMenuSection" ><div class="lpMenutButtonContainer" >'
			    +'<div class="privacyStmntWrapper"><a id="lpPrivacyStmntBtn" class="lpChatFooterCyan" tabindex="0">Privacy Statement</a></div>'
	            + '<div class="lpMenuButton lpPointer" >'
	            + '<span id="lpChatMenuItemFontIncreaseBtn"  class="lpHoverButton" data-msg="' + lpCWTagConst.lpTxt_IncrFontSize + '" >Increase Font</span>'
	            + '</div><div class="lpMenuButton lpPointer" >'
	            + '<span id="lpChatMenuItemFontDecreaseBtn"  class="lpHoverButton" data-msg="' + lpCWTagConst.lpTxt_DecrFontSize + '" >Decrease Font</span>'
	            + '</div><div class="lpMenuButton lpPointer" >'
	            + '<span id="lpChatMenuItemAudioBtn" class="lpHoverButton" data-msg="' + lpCWTagConst.lpTxt_TurnOffSound +'" >Turn Off Sound</span></div>'
		     /*+ '<div class="lpLeft lpMenuButton lpPointer" ><span id="lpNinaTransferChatBtn" class="outerwrappersendbtn lpTextCenter "><span id="ninaTransferBtnImg"></span><span id="ninaTransferBtnTxt">Start Live Chat</span></span></div>'*/
	            + '</div></div></div></div>'
				+' </div>'
				+'</div>';
	}


	/* html for chat window recorded message */
	cwAssist.lpChatMakeRecordedMessgae = function(pAudioOn) {
		return '<div id="recordedmsg">'+
'<div id="monitortxt">Conversations are recorded and monitored.<br>Do not leave this window unattended.</div>'+
'<div id="thanksref"><span id="thanksrefcursor"></span></div>'+ // Modifed for RWD Feature
'</div>';
	}
	
	cwAssist.lpChatMakeChatTranscriptSection = function() {
		isPrepareChat = false;
		//isShowPostChatScreen = false;
		isShowPreChatScreen = false;
	    return '<div id="lpChatMainMessageSection" ><div>'
	            + '<div id="lpChatMenuSection" class="lpMiddleSection">'
	            + '<div id="lpChatMenuSection" ><div class="lpMenutButtonContainer" >'
	            + '<div class="lpLeft lpMenuButton lpPointer" >'
	            + '<span id="lpChatMenuItemFontDecreaseBtn"  class="lpHoverButton sprite-bg sprite-font-decrease" data-msg="' + lpCWTagConst.lpTxt_DecrFontSize + '" ></span>'
	            + '</div><div class="lpLeft lpMenuButton lpPointer" >'
	            + '<span id="lpChatMenuItemFontIncreaseBtn"  class="lpHoverButton sprite-bg sprite-font-increase" data-msg="' + lpCWTagConst.lpTxt_IncrFontSize + '" ></span>'
	            + '</div>'       
		     
		     +'<div class="lpLeft lpMenuButton lpPointer" style="float: right;margin-right: 25px;"><span id="lpBacktoSurvey" class="lpBlueButton lpTextCenter ">Back to Survey</span></div>'
	            + '<div class="lpClear"></div></div></div></div></div>'
	            + '<div id="lpChatMessagesSection" class="lpYscroll">'
				+ '<div id="ninaChatSection" class="lpYscroll">'
				+ '<div id="ninaReloadSystemMessage" style="display:none;"><div><br>This chat may be recorded and monitored. For your  <br>security, click "End Chat" before leaving your computer <br>unattended or when the chat is complete.</div>' 
				+ '<div class="ninaReloadHdrspace" style="display:none;">If you wish to invite a live Customer Care Professional to this chat, click the Chat with a Customer Care Professional link in the bottom right</div></div><div id="ninaChatMessageSection" class="lpYscroll"></div></div>'
	            + '<div class="lpSystemMessageDiv2">'
	           	+ '</div></div>'
	            + '</div>';
	}
	
	
	/* make html for screen when chat gets disconnected */
	cwAssist.lpChatMakeEndChatSection = function(chatPriority) {
		//var tmpEndChatMsg = lpChatWidget.isInterativeChat()?"":
		var tmpEndChatMsg = "Although we didn&#39;t get to talk with you today, please try again in the future.";
		if(chatPriority){
		  tmpEndChatMsg = "We understand this may not be the best time for you to chat with us, but there is still an important matter regarding your account. Please reach out to us at your earliest convenience."
		}
		return '<div id="lpChatEndChatSection" class="lpMiddleSection lpTextCenter lpHeight364">'
				+ '<div class="lpPadLeftRight19"><div class="lpLogo79" style="padding-top: 50px;">'
				+ '<span class="lpChatLoadingSectionLogo sprite-company-logo-large" ></span>'
				+ '</div><div class="lpLoadingMsg noninteractivesurveyhdr">'
				+ 'This session has ended.</div>'
				+ '<div class="lpPaddingTopBottom20 lpLoadingMsg lpTextCenter noninteractivesurvey">'
				+ tmpEndChatMsg
				+ '</div><div class="lpLoadingMsg lpTextCenter noninteractivesurveytq">Thank you!</div></div></div>';
	}
	
	/* make html for unsupported / old browser screen */
	cwAssist.lpChatMakeUpdateBrowserSection = function(){
		return '<div id="lpChatEndChatSection" class="lpMiddleSection lpTextCenter lpHeight364">'
				+ '<div class="lpPadLeftRight19"><div class="lpLogo79">'
				+ '<span class="lpChatLoadingSectionLogo sprite-bg sprite-company-logo-large" ></span>'
				+ '</div><div class="lpLoadingMsg">' + lpCWTagConst.lpMsg_UpdateBrowser
				+ '</div>' + '</div></div>';
	}
	
	/* make html for hover message over menu buttons */
	cwAssist.lpMakeHoverDiv = function(msg){
		$(".lpHoverDiv").remove();
		return '<div class="lpHoverDiv">' + '<div class="lpPosRel lpArrowUp" ></div>'
				+ '<div class="lpPosRel lpMessage">' + msg + '</div>' + '</div>';
	
	}
	
	/* make html for footer section */
	cwAssist.lpMakeFooterMsg = function(){
		return lpCWTagConst.lpMsg_PrivacyStatement;
	}
	
	/* open a popup window*/
	cwAssist.openPopupWin = function(url){
		window.open(url, "", lpCWTagConst.privacyWinOption);
	}
	
	cwAssist.getUrlVars = function(){
		var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for(var i = 0; i < hashes.length; i++)
    {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
	}
	
	/* open a privacy statement winow */
	cwAssist.openPrivacyStmnt = function(){		
	    if(window.location.search.indexOf("lpctrycd=us")!=-1 || window.location.search.indexOf("lpctrycd=US")!=-1 || window.location.search.indexOf("lpctrycd=en_US")!=-1 || window.location.search.indexOf("lpctrycd=en-US")!=-1){
			//cwAssist.openPopupWin(lpCWTagConst.lpPrivacyStatementUrl);
			if(isShowPreChatScreen == true){
				//console.log("isShowPreChatScreen");
				try{
					cwAssist.openPopupWin(lpCWTagConst.lpPrivacyStatementUrl+"?linknav=us-amex-ser-livechat-prechatsurvey");
				}catch(e){
					//console.log("omn error for Pre Chat Privacy Stmnt");
				}
			}else if(isPrepareChat == true){
				try{
					cwAssist.openPopupWin(lpCWTagConst.lpPrivacyStatementUrl+"?linknav=us-amex-ser-livechat-interactivechat");
				}catch(e){
					//console.log("omn error for Prepare Chat Privacy Stmnt");
				}
			}else if(isShowPostChatScreen == true){
				try{
					cwAssist.openPopupWin(lpCWTagConst.lpPrivacyStatementUrl+"?linknav=us-amex-ser-livechat-livechat-postchatsurvey");
				}catch(e){
					//console.log("omn error for Post Chat Privacy Stmnt");
				}
			}
		}else{
		    var ctrycode = cwAssist.getUrlVars().lpctrycd;
			var popupurl= lpCWTagConst.lpPrivacyStatementUrlMap[ctrycode];
			cwAssist.openPopupWin(popupurl);
		}	
	
	}
	
	/* open a privacy statement winow */
	cwAssist.openPrivacyStmntAcss = function(e){
		if(e.preventDefault){
			e.preventDefault();
		}else{
			e.returnValue = false;
		}
			e = e || window.event;
				var key = (e.keyCode ? e.keyCode : e.which); 
				if (key == 13) {
	    if(window.location.search.indexOf("lpctrycd=us")!=-1 || window.location.search.indexOf("lpctrycd=US")!=-1){
			//cwAssist.openPopupWin(lpCWTagConst.lpPrivacyStatementUrl);
			if(isShowPreChatScreen == true){				
				try{
					cwAssist.openPopupWin(lpCWTagConst.lpPrivacyStatementUrl+"?linknav=us-amex-ser-livechat-prechatsurvey");
				}catch(e){
					//console.log("omn error for Pre Chat Privacy Stmnt");
				}
			}else if(isPrepareChat == true){
				try{
					cwAssist.openPopupWin(lpCWTagConst.lpPrivacyStatementUrl+"?linknav=us-amex-ser-livechat-interactivechat");
				}catch(e){
					//console.log("omn error for Prepare Chat Privacy Stmnt");
				}
			}else if(isShowPostChatScreen == true){
				try{
					cwAssist.openPopupWin(lpCWTagConst.lpPrivacyStatementUrl+"?linknav=us-amex-ser-livechat-livechat-postchatsurvey");
				}catch(e){
					//console.log("omn error for Post Chat Privacy Stmnt");
				}
			}
		}else{
		    var ctrycode = cwAssist.getUrlVars().lpctrycd;
			var popupurl= lpCWTagConst.lpPrivacyStatementUrlMap[ctrycode];
			cwAssist.openPopupWin(popupurl);
		}	
	}if (key == 9 || e.shiftKey && key == "9") {
		var tjsonData={"lpEmbChatWiz": "LPNVPF", "CMD" : "UIDESIGN", "value" : "TABONCLOSEBTN"};
		var parentURL = (window.location != window.parent.location) ? document.referrer : document.location.href;
		var targetforparentchatframe = parentURL.indexOf('https') > -1 ? 'https://' + parentURL.substr(8).split('/')[0] : 'http://'
						+ parentURL.substr(7).split('/')[0];
		window.parent.postMessage(JSON.stringify(tjsonData), targetforparentchatframe);
		
				 
	}
			
	}
	
}	

/**
 * LPChatWidgetNotification is providing the basic functionalities for the Embedded Window to show 
 * the notification in the middle of the Embedde Window screen for credit card masking detected & system error message.
 * Please note only 1 instance of notification is being use. Otherwise, notification message will display on top of each other.
 *
 * Usage:
 * 		cwa = new lpCWTag.LPChatWidgetNotification();
 * 		cwa.open("some message", false);
 * Output:
 *		inline html message will display on the screen
 *
 * @version: 0.9
 */
lpCWTag.LPChatWidgetNotification = lpCWTag.LPChatWidgetNotification || function LPChatWidgetNotification(window) {
	var dialogID = "notificationDialog";
	var myDialog = this;
	var openStatus = false;
	var notificationTimer;
	var useTimer = true;
	var notificationTimeCounter = 0;
	
	/**
	 * reset time counter 
	 */
	function resetTimeCounter(){
		notificationTimeCounter = 0;
	}
	
	/**
	 * close notification and clear out the timer and reset html content
	 */
	myDialog.close = function(){
		var elem = document.getElementById(dialogID);
		$(elem).hide(); 
		$(elem).html("");
		if(lpCWTagConst.lpChatNotification_ClickOutsideToClose){
			$(document).off("click.menu-outside");
		}
		if(useTimer)
			clearInterval(notificationTimer);
		resetTimeCounter();
		openStatus = false;
	}
	
	/**
	 * return true is another notification is already used 
	 */
	myDialog.isOpen = function(){ return openStatus; }
	
	/**
	 * Display notification on the center of Embedded Chat Window
	 * @param msg - message to display
	 * @param pUseTimer - true if use timer false otherwise. If timer is user, the notification will be dismissed after X sec that configured by lpChatNotification_Timeout
	 */
	myDialog.open = function(msg, pUseTimer){
		var elem = "#"+dialogID;
		$(elem).html('<div><p>' + msg + '</p></div>');
		$(elem).show();
		
		if(myDialog.isOpen()){
			resetTimeCounter();
		}else
			openStatus = true;
	
		if(pUseTimer){
			useTimer = pUseTimer;
			notificationTimer = setInterval(function(){ 
					notificationTimeCounter += 500;
					if(notificationTimeCounter >= lpCWTagConst.lpChatNotification_Timeout){
						//clearInterval(notificationTimer);
						myDialog.close();
					}
				}, 500);
		}
		
		if(lpCWTagConst.lpChatNotification_ClickOutsideToClose){
			$(document).on("click.menu-outside", function(event){
			    if(!($(event.target).is(elem) || $(event.target).parents().is(elem))){
			    	myDialog.close();
			    }
				});
		}
			
	}
}

/**
 * LPChatWidgetSessionManager is providing the basic mechanism to create/update/delete key/values to/from sessionStorage
 * Below is the structure of each of the parameter that will be saving to session storage
 *
 *	chatWizParam: {"lpChatSkill":"", "lpsuid":"", "lpWizChatState":"", "lpVisitorSessionId":"", 
 										"lpVisitorId":"", "lpAudio":"ON", "lpFontSize":"13", "lpMinimized":"N"};
 *	chatWizSurveyParam: {"lpPreChatSurveyNameOverride":"", "lpOfflineSurveyNameOverride":"", "lpExitSurveyNameOverride":"" };
 *
 * Usage:
 * 		sm = new lpCWTag.LPChatWidgetSessionManager(window);
 * 		sm.reloadDataFromSessionStorage();
 * Output:
 *		retriev data from session storage and save into the session manager session
 *
 * @version: 0.9
 */
lpCWTag.LPChatWidgetSessionManager = lpCWTag.LPChatWidgetSessionManager || function LPChatWidgetSessionManager(window){
	var sessionMgr = this;
	var timer;
	var logger = new lpCWTag.LPChatWidgetLogger();
	var cwAssist = new lpCWTag.LPChatWidgetAssist(window);
	var chatWizParam = {"lpChatSkill":"", "lpsuid":"", "lpWizChatState":"", "lpVisitorSessionId":"", "lpVisitorId":"", "lpAudio":"ON", "lpFontSize":"13", "lpMinimized":"N"};
	var chatWizSurveyParam = {"lpPreChatSurveyNameOverride":"", "lpOfflineSurveyNameOverride":"", "lpExitSurveyNameOverride":"" };
	var chatWizStarted= false;
	var chatLastUpdate="";
	var chatlpvisitorID="";
	// Added code for Marvin Chat history change
	var chatMarvinConversId="";
	var firstMsgsent = false;
	var recordmsgexist = true;
	var expansionFlag = "";
	var marvinChatEscalated=false;
	var blueboxValue = "";
	var btnNameRef="";
	var jwtValue = "";
	var jwthistValue ="";
	var levisitorId="";
	var lesessionId="";
	var leinteractionContextId="";
       var lastSysMg="";  
       var lastAgent="";   	   
       var lpInteractive=false;
       var vaInteractive=false;   
    var refCtr=0;
	var lastSeq=0;
	var chatIdle="";
	var lestate="";
	var cid="";
	var eid="";
	
	//Added for Leno Chat State
	var lenoChatState="";
	var lenooffercount="";
	var lenoseccount="";
  var lenolocoffercount="";
       var agentMap=new Object();
       var SMMap=new Object();
       var tempVar="";
	   var qMap=new Object();
	   var startEscalationTime="";
	   var cType="";
	   var cobrowsestate="";
	   var cobrowseaccepted="";
     var chatPriority = "";
     var xcut = "";
     var cobrowsesharing = "";
     var submittedVASurvey = false;
     var CMcomments = "";
     var screen="";
     var offlinemessage = [];
	var readMessagesCount = 0;

	/**
	 * contructs the unique session storage key with specified LP account
	 */
	function getSessionStorageKey(pKeyName){
		return	pKeyName+lpCWTagConst.lpChatAccountNumber;
	}
	
	/**
	 * reset session manager data
	 */
	sessionMgr.reset = function(){
		logger.debug("sessionMgr.reset", "....");
		chatWizStarted= false;
		chatLastUpdate="";
		chatWizParam = {};
		chatWizParam[lpCWTagConst.lpConst_SM_chatSkill] = "";
		chatWizParam[lpCWTagConst.lpConst_SM_SUID] = "";
		chatWizParam[lpCWTagConst.lpConst_SM_chatState] = "";
		chatWizParam[lpCWTagConst.lpConst_SM_visitorSessionId] = "";
		chatWizParam[lpCWTagConst.lpConst_SM_visitorId] = "";
		chatWizParam[lpCWTagConst.lpConst_SM_audio] = "ON";
		chatWizParam[lpCWTagConst.lpConst_SM_fontSize] = "13";
		chatWizParam[lpCWTagConst.lpConst_SM_minimized] = "N";
		chatWizSurveyParam = {};
		chatWizSurveyParam[lpCWTagConst.lpConst_SM_offlineSurveyNameOverride] = "";
		chatWizSurveyParam[lpCWTagConst.lpConst_SM_preChatSurveyNameOverride] = "";
		chatWizSurveyParam[lpCWTagConst.lpConst_SM_exitSurveyNameOverride] = "";
		// Added code for Marvin Chat history change
		chatMarvinConvId="";
		marvinChatEscalated=false;
		blueboxValue = "";
              jwtValue="";
			  chatMarvinConversId="";
			  jwthistValue ="";
              lastSysMg="";
			  lastAgent="";
              lpInteractive=false;
		vaInteractive=false;
		levisitorId="";
		lesessionId="";
		leinteractionContextId="";
		btnNameRef="";
		//Added for Leno Chat State
		lenoChatState="";
              agentMap = new Object();
              SMMap = new Object();
		//lenooffercount="";
		cid="";
		eid="";
		startEscalationTime="";
		refCtr=0;
		lastSeq=0;
		chatIdle="";
		lestate="";
		qMap = new Object();
		cType="";
		cobrowsestate="";
		cobrowseaccepted="";
    chatPriority = "";
    xcut="";
    cobrowsesharing="";
    submittedVASurvey=false;
    CMcomments="";
    screen="";
    offlinemessage = [];
		readMessagesCount = 0;
	}
	
	/** initiatlize to check for any abandon session and remove it **/
	sessionMgr.initialize = function(){
		logger.debug("sessionMgr.initialize", "...."+chatWizSurveyParam);
		
		if(cwAssist.isSessionStorageSupported()){
			var sKey = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatWizParam);
			var tempChatWizParam = cwAssist.getValueFromSessionStorage(sKey);
			if(tempChatWizParam != null ){
				sessionMgr.deleteChatSessionStorage();
			}
			sessionMgr.reset();
		}
	}
	
	/**
	 * invokes this method to start session (start polling and updating timestamp)
	 */
	sessionMgr.start = function(){
		logger.debug("sessionMgr.start", "");
		sessionMgr.saveChatStartedToStorage();
		sessionMgr.saveChatLastUpdateToStorage();
		sessionMgr.startPolling();
	}
	
	/**
	 * stop session & stop polling data
	 */
	sessionMgr.stop = function(){
		logger.debug("sessionMgr.stop", "");
		sessionMgr.stopPolling();
		sessionMgr.deleteChatSessionStorage();	
	}
	
	/**
	 * stop polling to update data to session storage
	 */
	sessionMgr.stopPolling = function(){
		//stop polling
		if(typeof timer != "undefined"){
			logger.debug("sessionMgr.stopPolling", "....");
			clearInterval(timer);	
		}
	}
	
	/**
	 * start polling data and update to session storage
	 */
	sessionMgr.startPolling = function(){
		logger.debug("sessionMgr.startPolling", "...,");
		
		timer = setInterval(function(){ 
				if(sessionMgr.isActiveChatSession()){
					sessionMgr.saveChatLastUpdateToStorage();
				}else{
					sessionMgr.stopPolling();
				}
			}, lpCWTagConst.lpSessionMgr_RefreshInterval);	
			
	}

	sessionMgr.getChatSkill = function(){
		return chatWizParam[lpCWTagConst.lpConst_SM_chatSkill]
	}	
	
	sessionMgr.getSUID = function(){
		return chatWizParam[lpCWTagConst.lpConst_SM_SUID]
	}	
	
	sessionMgr.getVisitorSessionID = function(){
		return chatWizParam[lpCWTagConst.lpConst_SM_visitorSessionId]
	}	
	
	sessionMgr.getVisitorID = function(){
		return chatWizParam[lpCWTagConst.lpConst_SM_visitorId]
	}
	
	sessionMgr.isAudioOn = function(){
		return chatWizParam[lpCWTagConst.lpConst_SM_audio]=="ON"?true:false;
	}	
	
	sessionMgr.getFontSize = function(){
		return chatWizParam[lpCWTagConst.lpConst_SM_fontSize]==""?13:parseInt(chatWizParam[lpCWTagConst.lpConst_SM_fontSize]);
	}	
	
	sessionMgr.isMinimized = function(){
		return chatWizParam[lpCWTagConst.lpConst_SM_minimized]=="N"?true:false;
	}
	
	sessionMgr.getChatState = function(){
		return chatWizParam[lpCWTagConst.lpConst_SM_chatState];
	}
	
	sessionMgr.getPreChatSurveyNameOverride = function(){
		return chatWizSurveyParam[lpCWTagConst.lpConst_SM_preChatSurveyNameOverride]
	}
	
	sessionMgr.getOfflineChatSurveyNameOverride = function(){
		return chatWizSurveyParam[lpCWTagConst.lpConst_SM_offlineSurveyNameOverride]
	}
	
	sessionMgr.getExitChatSurveyNameOverride = function(){
		return chatWizSurveyParam[lpCWTagConst.lpConst_SM_exitSurveyNameOverride]
	}
	
	sessionMgr.isChatStarted = function(){
		return chatWizStarted;
	}
	
	/**
	 * return true if session is an active session. An active session is when the last update data is less than the keepAlive value
	 */
	sessionMgr.isActiveChatSession = function(){
		var currentTime = $.now();
		var timeDiff = 1+lpCWTagConst.lpSessionMgr_KeepAlive;
		
		if(chatLastUpdate != "")
			timeDiff  = currentTime - chatLastUpdate;
		return timeDiff <= lpCWTagConst.lpSessionMgr_KeepAlive?true:false;
	}
	
	/**
	 * save chatWizParam to session storage
	 */
	sessionMgr.setChatWizParam = function(pChatSkill, pSUid, pVisitorSessionId){
		chatWizParam[lpCWTagConst.lpConst_SM_chatSkill] = pChatSkill;
		chatWizParam[lpCWTagConst.lpConst_SM_SUID] = pSUid;
		chatWizParam[lpCWTagConst.lpConst_SM_visitorSessionId] = pVisitorSessionId;
		sessionMgr.saveChatWizParamToStorage();
		
	}
	sessionMgr.setChatLPWizParam = function(pSUid, lpsessiondata){		
		chatWizParam[pSUid] = lpsessiondata;
		sessionMgr.saveChatWizParamToStorage();
		
	}
	
	
	/**
	 * save chatWizSurveyParam to session storage
	 */
	sessionMgr.setChatWizSurveyParam = function(lpPreChatSurveyNameOverride, lpOfflineSurveyNameOverride, lpExitSurveyNameOverride){
		chatWizSurveyParam[lpCWTagConst.lpConst_SM_preChatSurveyNameOverride] = lpPreChatSurveyNameOverride;
		chatWizSurveyParam[lpCWTagConst.lpConst_SM_offlineSurveyNameOverride] = lpOfflineSurveyNameOverride;
		chatWizSurveyParam[lpCWTagConst.lpConst_SM_exitSurveyNameOverride] = lpExitSurveyNameOverride;
		sessionMgr.saveChatWizSurveyParamToStorage();
	}
	
	sessionMgr.setChatState = function(pState){
		chatWizParam[lpCWTagConst.lpConst_SM_chatState] = pState;
		sessionMgr.saveChatWizParamToStorage();
	}
	
	sessionMgr.setAudio = function(pIsOn){
		chatWizParam[lpCWTagConst.lpConst_SM_audio] = pIsOn?"ON":"OFF";
		sessionMgr.saveChatWizParamToStorage();
	}
	
	sessionMgr.setFontSize = function(pFontSize){
		chatWizParam[lpCWTagConst.lpConst_SM_fontSize] = pFontSize;
		sessionMgr.saveChatWizParamToStorage();
	}
	
	sessionMgr.setMinimized = function(pIsMinimized){
		chatWizParam[lpCWTagConst.lpConst_SM_minimized] = pIsMinimized?"Y":"N";
		sessionMgr.saveChatWizParamToStorage();
	}
	
	sessionMgr.setVisitorID = function(pVisitorID){
		if(pVisitorID != chatWizParam[lpCWTagConst.lpConst_SM_visitorId]){
			chatWizParam[lpCWTagConst.lpConst_SM_visitorId] = pVisitorID;
			sessionMgr.saveChatWizParamToStorage();
		}
	}
	
	sessionMgr.saveChatLastUpdateToStorage = function(){
		var sKey = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatLastUpdate);
		chatLastUpdate = $.now();
		cwAssist.setValueToSessionStorage(sKey, chatLastUpdate);
		sendPOstMessgaefromAssist({"lpEmbChatWiz": "LPNVPF", "CMD" : "CONTROL", "value" : "SETLPPARAMS3","lpupdate":chatLastUpdate})
	}
	
	sessionMgr.saveChatLastUpdateToStorageFromCookie = function(updvalue){
		var sKey = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatLastUpdate);
		chatLastUpdate = parseInt(updvalue);
		//console.log("key and chatLastUpdate in storage:"+sKey+'::'+chatLastUpdate);
		cwAssist.setValueToSessionStorage(sKey, chatLastUpdate);
		
		var sKey = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatStarted);
		chatWizStarted = "true";
		cwAssist.setValueToSessionStorage(sKey, chatWizStarted);
	}
	
	sessionMgr.saveLpValToStorageFromCookie = function(lpsuidfrmcookie,lpsessionstorageval){
		var sKey = getSessionStorageKey(lpsuidfrmcookie);		
		//console.log("key and chatLastUpdate in storage:"+sKey+'::'+lpsessionstorageval);
		cwAssist.setValueToSessionStorage(sKey, lpsessionstorageval);
	}
	
	sessionMgr.saveChatStartedToStorage = function(){
		var sKey = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatStarted);
		chatWizStarted = "true";
		cwAssist.setValueToSessionStorage(sKey, chatWizStarted);
	}
	
	sessionMgr.saveChatWizParamToStorage = function(){
		var sKey = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatWizParam);
		cwAssist.setValueToSessionStorage(sKey, JSON.stringify(chatWizParam));
	}
	
	sessionMgr.saveChatWizSurveyParamToStorage = function(){
		var sKey = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatWizSurveyParam);
		cwAssist.setValueToSessionStorage(sKey, JSON.stringify(chatWizSurveyParam));
	}
	/*--- START -- Code to store and retrive the data in Session ---*/
	sessionMgr.setLPvisitorID= function(chatvisitorsessionId){
		chatlpvisitorID = chatvisitorsessionId;
	}

	sessionMgr.getLPvisitorID= function(){
		return chatlpvisitorID;
	}

	sessionMgr.getLPValFromKey=function(lpsuid){		
		return cwAssist.getValueFromSessionStorage(getSessionStorageKey(lpsuid));
	}
	
	// Code changes for Marvin Chat history transcript start
	sessionMgr.setMarvinConversId= function(marvinConversationId){

		chatMarvinConversId = marvinConversationId;
		sessionMgr.saveMarvinConversIdToStorage(chatMarvinConversId);
	}
	
	sessionMgr.saveMarvinConversIdToStorage = function(marvinConversationId){
		var sKey = getSessionStorageKey(lpCWTagConst.Marvin_VA_ConversID);
		cwAssist.setValueToSessionStorage(sKey, marvinConversationId);
	}
	
	sessionMgr.getMarvinConversId= function(){
		return chatMarvinConversId;
	}	
	
	//LE visitorId
	
	sessionMgr.setlevisitorId= function(levisitorIdOverride){
		levisitorId = levisitorIdOverride;
		sessionMgr.savelevisitorIdToStorage(levisitorId);
	}
	
	sessionMgr.savelevisitorIdToStorage = function(levisitorIdOverride){
		var sKey = getSessionStorageKey("levisitorId");
		cwAssist.setValueToSessionStorage(sKey, levisitorIdOverride);
	}
	
	sessionMgr.getlevisitorId = function(){
		return levisitorId;
	}
	
	// le SEESION id
	 sessionMgr.setlesessionId= function(lesessionIdOverride){
		lesessionId = lesessionIdOverride;
		sessionMgr.savelesessionIdToStorage(lesessionId);
	}
	
	sessionMgr.savelesessionIdToStorage = function(lesessionIdOverride){
		var sKey = getSessionStorageKey("lesessionId");
		cwAssist.setValueToSessionStorage(sKey, lesessionIdOverride);
	}
	
	sessionMgr.getlesessionId = function(){
		return lesessionId;
	}
	
	//le interactionContextId
	
	 sessionMgr.setleinteractionContextId= function(leinteractionContextIdOverride){
		leinteractionContextId = leinteractionContextIdOverride;
		sessionMgr.saveleinteractionContextIdToStorage(leinteractionContextId);
	}
	
	sessionMgr.saveleinteractionContextIdToStorage = function(leinteractionContextIdOverride){
		var sKey = getSessionStorageKey("leinteractionContextId");
		cwAssist.setValueToSessionStorage(sKey, leinteractionContextIdOverride);
	}
	
	sessionMgr.getleinteractionContextId = function(){
		return leinteractionContextId;
	}
	
	sessionMgr.saveFirstMsgValToStorage = function(isfirstMsgsent){
	var sKey = getSessionStorageKey(lpCWTagConst.IS_FIRSTMSG_SENT);
	cwAssist.setValueToSessionStorage(sKey, isfirstMsgsent);
	}
	sessionMgr.saveExpansionFlagValToStorage = function(expansionFlagval){
	var sKey = getSessionStorageKey(lpCWTagConst.EXPANSION_FLAG);
	cwAssist.setValueToSessionStorage(sKey, expansionFlagval);
	}
	
	sessionMgr.getFirstMsgVal= function(){
		return firstMsgsent;
	}
	sessionMgr.getExpansionFlagval= function(){
	return expansionFlag;
	}
	
	// Code to set Firstmsg boolean value
	sessionMgr.setFirstMsgVal= function(isfirstMsgsent){
	firstMsgsent = isfirstMsgsent;
	sessionMgr.saveFirstMsgValToStorage(firstMsgsent);
	}
	// Code to set expansion flag
	sessionMgr.setExpansionFlag= function(expansionFlagval){
	expansionFlag = expansionFlagval;
	sessionMgr.saveExpansionFlagValToStorage(expansionFlag);
	}
	
	sessionMgr.setMarvinChatEscalated= function(chatEscalated){
		marvinChatEscalated = chatEscalated;
		sessionMgr.saveMarvinChatEscalatedToStorage(marvinChatEscalated);
	}
	
	sessionMgr.saveMarvinChatEscalatedToStorage = function(chatEscalated){
		var sKey = getSessionStorageKey(lpCWTagConst.Marvin_VA_ChatEscalated);
		cwAssist.setValueToSessionStorage(sKey, chatEscalated);
	}
	
	sessionMgr.getMarvinChatEscalated = function(){
		return marvinChatEscalated;
	}
	
	sessionMgr.setRecordMsgVal= function(isRecordMsgexist){
		recordmsgexist = isRecordMsgexist;
		sessionMgr.saveRecordMsgValToStorage(recordmsgexist);
	}
	sessionMgr.getRecordMsgVal= function(){
		return recordmsgexist;
	}
	sessionMgr.saveRecordMsgValToStorage = function(isRecordMsgexist){
		var sKey = getSessionStorageKey(lpCWTagConst.IS_RECRDMSG_EXIST);
		cwAssist.setValueToSessionStorage(sKey, isRecordMsgexist);
	}
	
	
	sessionMgr.setblueboxValue= function(bbCookieOverride){
		blueboxValue = bbCookieOverride;
		sessionMgr.saveblueboxValueToStorage(blueboxValue);
	}
	
	sessionMgr.saveblueboxValueToStorage = function(bbCookieOverride){
		var sKey = getSessionStorageKey(lpCWTagConst.Marvin_VA_BlueBoxValue);
		cwAssist.setValueToSessionStorage(sKey, bbCookieOverride);
	}
	
	sessionMgr.getblueboxValue = function(){
		return blueboxValue;
	}
	
      sessionMgr.setjwtValue= function(jwtOverride){
		jwtValue = jwtOverride;
		sessionMgr.savejwtValueToStorage(jwtValue);
	}
	
	sessionMgr.savejwtValueToStorage = function(jwtOverride){
		var sKey = getSessionStorageKey("jwtValue");
		cwAssist.setValueToSessionStorage(sKey, jwtOverride);
	}
	
	sessionMgr.getjwtValue = function(){
		return jwtValue;
	}
	
	  sessionMgr.setstartEscalationTime= function(startEscalationTimeOverride){
		startEscalationTime = startEscalationTimeOverride;
		sessionMgr.savestartEscalationTimeToStorage(startEscalationTime);
	}
	
	sessionMgr.savestartEscalationTimeToStorage = function(startEscalationTimeOverride){
		var sKey = getSessionStorageKey("startEscalationTime");
		cwAssist.setValueToSessionStorage(sKey, startEscalationTimeOverride);
	}
	
	sessionMgr.getstartEscalationTime = function(){
		return startEscalationTime;
	}
	
	
	sessionMgr.setcidValue=function(cidOverride){
		cid = cidOverride;
		sessionMgr.savecidValueToStorage(cid);
	}
	sessionMgr.savecidValueToStorage = function(cidOverride){
		var sKey = getSessionStorageKey("cid");
		cwAssist.setValueToSessionStorage(sKey, cidOverride);
	}
	sessionMgr.getcidValue = function(){
		return cid;
	}
	
	sessionMgr.seteidValue=function(eidOverride){
		eid = eidOverride;
		sessionMgr.saveeidValueToStorage(eid);
	}
	sessionMgr.saveeidValueToStorage = function(eidOverride){
		var sKey = getSessionStorageKey("eid");
		cwAssist.setValueToSessionStorage(sKey, eidOverride);
	}
	sessionMgr.geteidValue = function(){
		return eid;
	}
	sessionMgr.sethistjwtValue= function(jwtOverride){
jwthistValue = jwtOverride;
sessionMgr.savehistjwtValueToStorage(jwthistValue);
}
sessionMgr.savehistjwtValueToStorage = function(jwtOverride){
var sKey = getSessionStorageKey("jwthistValue");
cwAssist.setValueToSessionStorage(sKey, jwtOverride);
}
sessionMgr.gethistjwtValue = function(){
return jwthistValue;
}
		sessionMgr.setcTypeValue= function(cTypeOverride){
		cType = cTypeOverride;
		sessionMgr.savecTypeValueToStorage(cType);
		}
		sessionMgr.savecTypeValueToStorage = function(cTypeOverride){
		var sKey = getSessionStorageKey("cType");
		cwAssist.setValueToSessionStorage(sKey, cTypeOverride);
		}
		sessionMgr.getcTypeValue = function(){
		return cType;
		}
    
		sessionMgr.setCobrowsestate= function(cobrowsestateOverride){
		cobrowsestate = cobrowsestateOverride;
		sessionMgr.savecobrowsestateValueToStorage(cobrowsestate);
		}
		sessionMgr.savecobrowsestateValueToStorage = function(cobrowsestateOverride){
		var sKey = getSessionStorageKey("cobrowsestate");
		cwAssist.setValueToSessionStorage(sKey, cobrowsestateOverride);
		}
		sessionMgr.getCobrowsestate = function(){
		return cobrowsestate;
		}

	    sessionMgr.setCobrowseaccepted= function(cobrowseacceptedOverride){
		cobrowseaccepted = cobrowseacceptedOverride;
		sessionMgr.savecobrowseacceptedValueToStorage(cobrowseaccepted);
		}
		sessionMgr.savecobrowseacceptedValueToStorage = function(cobrowseacceptedOverride){
		var sKey = getSessionStorageKey("cobrowseaccepted");
		cwAssist.setValueToSessionStorage(sKey, cobrowseacceptedOverride);
		}
		sessionMgr.getCobrowseaccepted = function(){
		return cobrowseaccepted;
		}
    
    sessionMgr.setCobrowsesharing= function(cobrowsesharingOverride){
		cobrowsesharing = cobrowsesharingOverride;
		sessionMgr.savecobrowsesharingValueToStorage(cobrowsesharing);
		}
		sessionMgr.savecobrowsesharingValueToStorage = function(cobrowsesharingOverride){
		var sKey = getSessionStorageKey("cobrowsesharing");
		cwAssist.setValueToSessionStorage(sKey, cobrowsesharingOverride);
		}
		sessionMgr.getCobrowsesharing = function(){
		return cobrowsesharing;
		}    
    //Code to save the current screen name
    sessionMgr.setScreen= function(screenOverride){
		screen = screenOverride;
		sessionMgr.savescreenValueToStorage(screen);
		}
		sessionMgr.savescreenValueToStorage = function(screenOverride){
		var sKey = getSessionStorageKey("screen");
		cwAssist.setValueToSessionStorage(sKey, screenOverride);
		}
		sessionMgr.getScreen = function(){
		return screen;
		}
    
    sessionMgr.setChatPriority= function(chatPriorityOverride){
		chatPriority = chatPriorityOverride;
		sessionMgr.savechatPriorityValueToStorage(chatPriority);
		}
		sessionMgr.savechatPriorityValueToStorage = function(chatPriorityOverride){
		var sKey = getSessionStorageKey("chatPriority");
		cwAssist.setValueToSessionStorage(sKey, chatPriorityOverride);
		}
		sessionMgr.getChatPriority = function(){
		return chatPriority;
		}
    //Code to save the survey submission status
    sessionMgr.setSubmittedVASurvey= function(submittedVASurveyOverride){
		submittedVASurvey = submittedVASurveyOverride;
		sessionMgr.saveSubmittedVASurveyValueToStorage(submittedVASurvey);
		}
		sessionMgr.saveSubmittedVASurveyValueToStorage = function(submittedVASurveyOverride){
		var sKey = getSessionStorageKey("submittedVASurvey");
		cwAssist.setValueToSessionStorage(sKey, submittedVASurveyOverride);
		}
		sessionMgr.getSubmittedVASurvey = function(){
		return submittedVASurvey;
		}
    //Code to save the card member feedback 
    sessionMgr.setofflinemessage= function(offlinemessageOverride){
		offlinemessage = offlinemessageOverride;
		sessionMgr.saveofflinemessageValueToStorage(offlinemessage);
		}
		sessionMgr.saveofflinemessageValueToStorage = function(offlinemessageOverride){
		var sKey = getSessionStorageKey("offlinemessage");
		cwAssist.setValueToSessionStorage(sKey, offlinemessageOverride);
    console.log("offmessages in session ",sessionMgr.getofflinemessage());
		}
		sessionMgr.getofflinemessage = function(){
		return offlinemessage;
		}
    sessionMgr.setCMcomments= function(CMcommentsOverride){
		CMcomments = CMcommentsOverride;
		sessionMgr.saveCMcommentsValueToStorage(CMcomments);
		}
		sessionMgr.saveCMcommentsValueToStorage = function(CMcommentsOverride){
		var sKey = getSessionStorageKey("CMcomments");
		cwAssist.setValueToSessionStorage(sKey, CMcommentsOverride);
		}
		sessionMgr.getCMcomments = function(){
		return CMcomments;
		}
    sessionMgr.setXcut= function(xcutOverride){
		xcut = xcutOverride;
		sessionMgr.savexcutValueToStorage(xcut);
		}
		sessionMgr.savexcutValueToStorage = function(xcutOverride){
		var sKey = getSessionStorageKey("xcut");
		cwAssist.setValueToSessionStorage(sKey, xcutOverride);
		}
		sessionMgr.getXcut = function(){
		return xcut;
		}
    
       sessionMgr.setlastSysMg= function(lastSysMgOverride){
		lastSysMg = lastSysMgOverride;
		sessionMgr.savelastSysMgToStorage(lastSysMg);
	}
	
	sessionMgr.savelastSysMgToStorage = function(lastSysMgOverride){
		var sKey = getSessionStorageKey("lastSysMg");
		cwAssist.setValueToSessionStorage(sKey, lastSysMgOverride);
	}
	
	sessionMgr.getlastSysMg = function(){
		return lastSysMg;
	}

	sessionMgr.setlastAgent= function(lastAgentOverride){
		lastAgent = lastAgentOverride;
		sessionMgr.savelastAgentToStorage(lastAgent);
	}
	
	sessionMgr.savelastAgentToStorage= function(lastAgentOverride){
		var sKey = getSessionStorageKey("lastAgent");
		cwAssist.setValueToSessionStorage(sKey, lastAgentOverride);
	}
	
	sessionMgr.getlastAgent = function(){
		return lastAgent;
	}
	sessionMgr.setchatIdle= function(chatIdleOverride){
		chatIdle = chatIdleOverride;
		sessionMgr.savechatIdleToStorage(chatIdle);
	}
	
	sessionMgr.savechatIdleToStorage= function(chatIdleOverride){
		var sKey = getSessionStorageKey("chatIdle");
		cwAssist.setValueToSessionStorage(sKey, chatIdleOverride);
	}
	
	sessionMgr.getchatIdle = function(){
		return chatIdle;
	}
	
	sessionMgr.setrefCtr= function(refCtrOverride){
		refCtr = refCtrOverride;
		sessionMgr.saverefCtrToStorage(refCtr);
	}
	
	sessionMgr.saverefCtrToStorage= function(refCtrOverride){
		var sKey = getSessionStorageKey("refCtr");
		cwAssist.setValueToSessionStorage(sKey, refCtrOverride);
	}
	
	sessionMgr.getrefCtr = function(){
		return refCtr;
	}
	
	sessionMgr.setlestate= function(lestateOverride){
		lestate = lestateOverride;
		sessionMgr.savelestateToStorage(lestate);
	}
	
	sessionMgr.savelestateToStorage= function(lestateOverride){
		var sKey = getSessionStorageKey("lestate");
		cwAssist.setValueToSessionStorage(sKey, lestateOverride);
	}
	
	sessionMgr.getlestate = function(){
		return lestate;
	}
	
	sessionMgr.setlastSeq= function(lastSeqOverride){
		lastSeq = lastSeqOverride;
		sessionMgr.savelastSeqToStorage(lastSeq);
	}
	
	sessionMgr.savelastSeqToStorage= function(lastSeqOverride){
		var sKey = getSessionStorageKey("lastSeq");
		cwAssist.setValueToSessionStorage(sKey, lastSeqOverride);
	}
	
	sessionMgr.getlastSeq = function(){
		return lastSeq;
	}
	sessionMgr.setlpInteractive= function(lpInteractiveOverride){
		lpInteractive = lpInteractiveOverride;
		sessionMgr.savelpInteractiveToStorage(lpInteractive);
	}
	
	sessionMgr.savelpInteractiveToStorage= function(lpInteractiveOverride){
		var sKey = getSessionStorageKey("lpInteractive");
		cwAssist.setValueToSessionStorage(sKey, lpInteractiveOverride);
	}
	
	sessionMgr.getlpInteractive = function(){
		return lpInteractive;
	}
	sessionMgr.setvaInteractive= function(vaInteractiveOverride){
		vaInteractive = vaInteractiveOverride;
		sessionMgr.savevaInteractiveToStorage(vaInteractive);
	}
	
	sessionMgr.savevaInteractiveToStorage= function(vaInteractiveOverride){
		var sKey = getSessionStorageKey("vaInteractive");
		cwAssist.setValueToSessionStorage(sKey, vaInteractiveOverride);
	}
	
	sessionMgr.getvaInteractive = function(){
		return vaInteractive;
	}

	sessionMgr.setbtnNameRef= function(btnNameRefOverride){
		btnNameRef = btnNameRefOverride;
		sessionMgr.savebtnNameRefToStorage(btnNameRef);
	}
	
	sessionMgr.savebtnNameRefToStorage = function(btnNameRefOverride){
		var sKey = getSessionStorageKey("btnNameRef");
		cwAssist.setValueToSessionStorage(sKey, btnNameRefOverride);
	}
	
	sessionMgr.getbtnNameRef = function(){
		return btnNameRef;
	}
	
	// Code changes for Marvin Chat history transcript End	
	
	//Code Added for Leno Chat State 
	sessionMgr.setLenoChatState= function(lenoChatStateVal){
		lenoChatState = lenoChatStateVal;
		sessionMgr.saveLenoChatStateToStorage(lenoChatState);
	}
	
	sessionMgr.saveLenoChatStateToStorage = function(lenoChatState){
		var sKey = getSessionStorageKey("lenoChatState");
		cwAssist.setValueToSessionStorage(sKey, lenoChatState);
	}
	
	sessionMgr.getLenoChatState = function(){
		return lenoChatState;
	}
	sessionMgr.removeLnChatStateFromSession = function(){
		if(cwAssist.isSessionStorageSupported()){
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lenoChatState"));
		}
	}
	
	
	sessionMgr.setlenooffercount= function(lenooffercountVal){
		lenooffercount = lenooffercountVal;
		sessionMgr.savelenooffercountToStorage(lenooffercount);
	}
	
	sessionMgr.savelenooffercountToStorage = function(lenooffercount){
		var sKey = getSessionStorageKey("lenooffercount");
		cwAssist.setValueToSessionStorage(sKey, lenooffercount);
	}
	
	sessionMgr.getlenooffercount = function(){
		return lenooffercount;
	}
  /*Store lecooffer data*/
	sessionMgr.setlenolocoffercount= function(lenolocoffercountVal){
		lenolocoffercount = lenolocoffercountVal;
		sessionMgr.savelenolocoffercountToStorage(lenolocoffercount);
	}
	sessionMgr.savelenolocoffercountToStorage = function(lenolocoffercount){
		var sKey = getSessionStorageKey("lenolocoffercount");
		cwAssist.setValueToSessionStorage(sKey, lenolocoffercount);
	}
	sessionMgr.getlenolocoffercount = function(){
		return lenolocoffercount;
	}  
	sessionMgr.removelenooffercountFromSession = function(){
		if(cwAssist.isSessionStorageSupported()){
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lenooffercount"));
      cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lenolocoffercount"));
		}
	}
	/*Store lecooffer data*/
	
	sessionMgr.setlenoseccount= function(lenoseccountVal){
		lenoseccount = lenoseccountVal;
		sessionMgr.savelenoseccountToStorage(lenoseccount);
	}
	
	sessionMgr.savelenoseccountToStorage = function(lenoseccount){
		var sKey = getSessionStorageKey("lenoseccount");
		cwAssist.setValueToSessionStorage(sKey, lenoseccount);
	}
	
	sessionMgr.getlenoseccount = function(){
		return lenoseccount;
	}
	sessionMgr.removelenoseccountFromSession = function(){
		if(cwAssist.isSessionStorageSupported()){
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lenoseccount"));
		}
	}
	//Code Added for Leno Chat State End
	

	sessionMgr.setagentMap= function(agentmapVal){
		agentMap= JSON.stringify(agentmapVal);
		sessionMgr.saveagentMapToStorage(agentMap);
	}
	
	sessionMgr.saveagentMapToStorage= function(agentMap){
		var sKey = getSessionStorageKey("agentMap");
		cwAssist.setValueToSessionStorage(sKey, agentMap);
	}
	
	sessionMgr.getagentMap = function(){
             if($.isEmptyObject(agentMap)){
			agentMap=cwAssist.getValueFromSessionStorage(getSessionStorageKey("agentMap"));
			if(agentMap==null)
				agentMap=new Object();	
             }
             if(typeof agentMap == "string")
			return JSON.parse(agentMap);
		else
			return agentMap;
	}
	sessionMgr.removeagentMapFromSession = function(){
		if(cwAssist.isSessionStorageSupported()){
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("agentMap"));
		}
	}
       
	
    sessionMgr.setqMap= function(qmapVal){
		qMap= JSON.stringify(qmapVal);
		sessionMgr.saveqMapToStorage(qMap);
	}
	
	sessionMgr.saveqMapToStorage= function(qMap){
		var sKey = getSessionStorageKey("qMap");
		cwAssist.setValueToSessionStorage(sKey, qMap);
	}
	
	sessionMgr.getqMap = function(){
             if($.isEmptyObject(qMap)){
			qMap=cwAssist.getValueFromSessionStorage(getSessionStorageKey("qMap"));
			if(qMap==null)
				qMap=new Object();	
             }
             if(typeof qMap == "string")
			return JSON.parse(qMap);
		else
			return qMap;
	}
	sessionMgr.removeqMapFromSession = function(){
		if(cwAssist.isSessionStorageSupported()){
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("qMap"));
		}
	}	
	   
       sessionMgr.setSMMap= function(SMmapVal){
		SMMap= JSON.stringify(SMmapVal);
		sessionMgr.saveSMMapToStorage(SMMap);
	}
	
	sessionMgr.saveSMMapToStorage= function(SMMap){
		var sKey = getSessionStorageKey("SMMap");
		cwAssist.setValueToSessionStorage(sKey, SMMap);
	}
	
	sessionMgr.getSMMap = function(){
             if(typeof SMMap == "string")
			return JSON.parse(SMMap);
		else
			return SMMap;
	}
	sessionMgr.removeSMMapFromSession = function(){
		if(cwAssist.isSessionStorageSupported()){
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("SMMap"));
		}
	}
    
sessionMgr.deleteSMMapFromSessionStorage = function(){
   if(cwAssist.isSessionStorageSupported()){
        cwAssist.deleteValueToSessionStorage(getSessionStorageKey("SMMap"));
        cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lastSysMg"));
   }
}

	/** Method to set read messages count */
	sessionMgr.setReadMessagesCount = function(readMessagesCountOverride) {
		readMessagesCount = readMessagesCountOverride;
		sessionMgr.saveReadMessagesCountToStorage(readMessagesCount);
	}

	/** Method to set read messages count in session storage */
	sessionMgr.saveReadMessagesCountToStorage = function(readMessagesCountOverride){
		var sKey = getSessionStorageKey("readMessagesCount");
		cwAssist.setValueToSessionStorage(sKey, readMessagesCountOverride);
	}

	/** Method to get read messages count */
	sessionMgr.getReadMessagesCount = function() {
		return readMessagesCount;
	}

/*--- END -- Code to store and retrive the data in Session ---*/
	/**
	 * remove chat session storage
	 */
	sessionMgr.deleteChatSessionStorage = function(){
		logger.debug("sessionMgr.deleteChatSessionStorage", "...");
		chatWizStarted = false;
		chatLastUpdate ="";
		// Added code for Marvin Chat history change
		chatMarvinConvId="";
		marvinChatEscalated="";
		blueboxValue = "";
              jwtValue="";
			  chatMarvinConversId="";
			  jwthistValue ="";
	       //lastSysMg="";
		   lastAgent="";
		levisitorId="";
		lesessionId="";
              lpInteractive = false;
              vaInteractive = false;
		leinteractionContextId="";
		btnNameRef="";
		// Added for Leno Widget
		lenoChatState="";
		firstMsgsent = false;
		recordmsgexist = true;
		 expansionFlag = "";
		agentMap = new Object();
		startEscalationTime="";
		refCtr=0;
		lastSeq=0;
		chatIdle="";
		lestate="";
		cid="";
		eid="";
		qMap = new Object();
		cType="";
		cobrowsestate="";
		cobrowseaccepted = "";
    chatPriority = "";
    xcut = "";
    cobrowsesharing ="";
    submittedVASurvey = false;
    CMcomments = "";
    screen = "";
    offlinemessage = [];
	readMessagesCount = 0;
            //  SMMap = new Object();
		if(cwAssist.isSessionStorageSupported()){
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.lpConst_SM_chatStarted)); 
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.lpConst_SM_chatLastUpdate)); 
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.lpConst_SM_chatWizParam));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.lpConst_SM_chatWizSurveyParam));
			// Added code for Marvin Chat history change
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.Marvin_VA_ConversID));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.IS_FIRSTMSG_SENT));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.EXPANSION_FLAG));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.Marvin_VA_ChatEscalated));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.Marvin_VA_BlueBoxValue));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("btnNameRef"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lenoChatState"));
            cwAssist.deleteValueToSessionStorage(getSessionStorageKey("jwtValue"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("jwthistValue"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("levisitorId"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lesessionId"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("leinteractionContextId"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey(lpCWTagConst.IS_RECRDMSG_EXIST));
                  //   cwAssist.deleteValueToSessionStorage(getSessionStorageKey("SMMap"));
                  //   cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lastSysMg"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lastAgent"));	  
 			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lpInteractive"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("vaInteractive"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("refCtr"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lastSeq"));	
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("chatIdle"));			
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("cid"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("eid"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("lestate"));
			//for qualtrics
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("agentMap"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("startEscalationTime"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("qMap"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("cType"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("cobrowsestate"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("cobrowseaccepted"));
      cwAssist.deleteValueToSessionStorage(getSessionStorageKey("chatPriority"));
      cwAssist.deleteValueToSessionStorage(getSessionStorageKey("xcut"));
      cwAssist.deleteValueToSessionStorage(getSessionStorageKey("cobrowsesharing"));
      cwAssist.deleteValueToSessionStorage(getSessionStorageKey("submittedVASurvey"));
      cwAssist.deleteValueToSessionStorage(getSessionStorageKey("CMcomments"));
      cwAssist.deleteValueToSessionStorage(getSessionStorageKey("screen"));
      cwAssist.deleteValueToSessionStorage(getSessionStorageKey("offlinemessage"));
			cwAssist.deleteValueToSessionStorage(getSessionStorageKey("readMessagesCount"));
		}
	}
	
	/**
	 * sync up the data in session storage. This is useful when reloading the page or navigation from page to page.
	 */
	sessionMgr.reloadDataFromSessionStorage = function(){
		logger.debug("sessionMgr.reloadDataFromSessionStorage", "...");
		
		if(cwAssist.isSessionStorageSupported()){
			var sKey_ChatStarted = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatStarted);
			var sKey_ChatLastUpdate = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatLastUpdate);
			var sKey_ChatWizParam = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatWizParam);
			var sKey_ChatWizSurveyParam = getSessionStorageKey(lpCWTagConst.lpConst_SM_chatWizSurveyParam);
			
			var tempChatWizStarted = cwAssist.getValueFromSessionStorage(sKey_ChatStarted);
			var temChatLastUpdate = cwAssist.getValueFromSessionStorage(sKey_ChatLastUpdate);
			var temChatWizParam = cwAssist.getValueFromSessionStorage(sKey_ChatWizParam);
			var temChatWizSurveyParam = cwAssist.getValueFromSessionStorage(sKey_ChatWizSurveyParam);
			// Added code for Marvin Chat history change
			var temChatMarvinConvId = cwAssist.getValueFromSessionStorage(getSessionStorageKey(lpCWTagConst.Marvin_VA_ConversID));
			var temFirstMsgsent = cwAssist.getValueFromSessionStorage(getSessionStorageKey(lpCWTagConst.IS_FIRSTMSG_SENT));
			var temExpansionFlag = cwAssist.getValueFromSessionStorage(getSessionStorageKey(lpCWTagConst.EXPANSION_FLAG));
			var temMarvinChatEscalated = cwAssist.getValueFromSessionStorage(getSessionStorageKey(lpCWTagConst.Marvin_VA_ChatEscalated));
			var temBlueBoxValue = cwAssist.getValueFromSessionStorage(getSessionStorageKey(lpCWTagConst.Marvin_VA_BlueBoxValue));	
			var temBtnNameRef = cwAssist.getValueFromSessionStorage(getSessionStorageKey("btnNameRef"));
			// Added code for Leno Chat State
			var temLenoChatState = cwAssist.getValueFromSessionStorage(getSessionStorageKey("lenoChatState"));
			var temlenooffercount = cwAssist.getValueFromSessionStorage(getSessionStorageKey("lenooffercount"));
			var temlenoseccount = cwAssist.getValueFromSessionStorage(getSessionStorageKey("lenoseccount"));
             var temagentMap=cwAssist.getValueFromSessionStorage(getSessionStorageKey("agentMap"));
		var temSMMap=cwAssist.getValueFromSessionStorage(getSessionStorageKey("SMMap"));
		     var temjwtValue=cwAssist.getValueFromSessionStorage(getSessionStorageKey("jwtValue"));
			 var temhistjwtValue=cwAssist.getValueFromSessionStorage(getSessionStorageKey("jwthistValue"));
			 var temlevisitorId=cwAssist.getValueFromSessionStorage(getSessionStorageKey("levisitorId"));
			 var temlesessionId=cwAssist.getValueFromSessionStorage(getSessionStorageKey("lesessionId"));
			 var temleinteractionContextId=cwAssist.getValueFromSessionStorage(getSessionStorageKey("leinteractionContextId"));
                      var temlastSysMg=cwAssist.getValueFromSessionStorage(getSessionStorageKey("lastSysMg"));
			var temlastAgent=cwAssist.getValueFromSessionStorage(getSessionStorageKey("lastAgent"));
			var temRecordMsg = cwAssist.getValueFromSessionStorage(getSessionStorageKey(lpCWTagConst.IS_RECRDMSG_EXIST));
			var temlpInteractive =cwAssist.getValueFromSessionStorage(getSessionStorageKey("lpInteractive"));
			var temvaInteractive =cwAssist.getValueFromSessionStorage(getSessionStorageKey("vaInteractive"));
			var temstartEscalationTime =cwAssist.getValueFromSessionStorage(getSessionStorageKey("startEscalationTime"));
			var temrefCtr =cwAssist.getValueFromSessionStorage(getSessionStorageKey("refCtr"));
			var temlastSeq =cwAssist.getValueFromSessionStorage(getSessionStorageKey("lastSeq"));
			var temchatIdle =cwAssist.getValueFromSessionStorage(getSessionStorageKey("chatIdle"));		
			var temlestate =cwAssist.getValueFromSessionStorage(getSessionStorageKey("lestate"));
			var temcid =cwAssist.getValueFromSessionStorage(getSessionStorageKey("cid"));			
			var temeid =cwAssist.getValueFromSessionStorage(getSessionStorageKey("eid"));
			var temqMap=cwAssist.getValueFromSessionStorage(getSessionStorageKey("qMap"));
			var temcType=cwAssist.getValueFromSessionStorage(getSessionStorageKey("cType"));			
			var temcobrowsestate=cwAssist.getValueFromSessionStorage(getSessionStorageKey("cobrowsestate"));			
			var temcobrowseaccepted=cwAssist.getValueFromSessionStorage(getSessionStorageKey("cobrowseaccepted"));
      var temchatPriority=cwAssist.getValueFromSessionStorage(getSessionStorageKey("chatPriority"));
      var temxcut=cwAssist.getValueFromSessionStorage(getSessionStorageKey("xcut"));
      var temcobrowsesharing=cwAssist.getValueFromSessionStorage(getSessionStorageKey("cobrowsesharing"));
      var temsubmittedVASurvey=cwAssist.getValueFromSessionStorage(getSessionStorageKey("submittedVASurvey"));
      var temCMcomments=cwAssist.getValueFromSessionStorage(getSessionStorageKey("CMcomments"));
      var temscreen=cwAssist.getValueFromSessionStorage(getSessionStorageKey("screen"));
      var temlenolocoffercount = cwAssist.getValueFromSessionStorage(getSessionStorageKey("lenolocoffercount"));
      var temofflinemessage=cwAssist.getValueFromSessionStorage(getSessionStorageKey("offlinemessage"));
			var temReadMessagesCount = cwAssist.getValueFromSessionStorage(getSessionStorageKey("readMessagesCount"));

			if(tempChatWizStarted != null && tempChatWizStarted != ""){
				chatWizStarted = tempChatWizStarted;
			}
			
			if(temChatLastUpdate != null && temChatLastUpdate != "")
				chatLastUpdate = temChatLastUpdate;
			//console.log("key and chatLastUpdate in reload:"+sKey_ChatLastUpdate+'::'+chatLastUpdate);	
			
			// Added code for Marvin Chat history change
			if(temChatMarvinConvId != null && temChatMarvinConvId != ""){
				chatMarvinConversId = temChatMarvinConvId;
			}
			if(temFirstMsgsent != null && temFirstMsgsent != ""){
			firstMsgsent = temFirstMsgsent;
			}
			if(temExpansionFlag != null && temExpansionFlag != ""){
			expansionFlag = temExpansionFlag;
			}
			
			if(temMarvinChatEscalated != null && temMarvinChatEscalated != ""){
				marvinChatEscalated = temMarvinChatEscalated;
			}
			if(temBlueBoxValue != null && temBlueBoxValue != ""){
				blueboxValue = temBlueBoxValue;
			}
            if(temjwtValue != null && temjwtValue != ""){
				jwtValue = temjwtValue;
			}
			if(temhistjwtValue != null && temhistjwtValue != ""){
				jwthistValue = temhistjwtValue;
			}
			
			if(temstartEscalationTime != null && temstartEscalationTime != ""){
				startEscalationTime = temstartEscalationTime;
			}
			
			if(temcType != null && temcType != ""){
				cType = temcType;
			}
			if(temcobrowsestate != null && temcobrowsestate != ""){
				cobrowsestate = temcobrowsestate;
			}
			if(temcobrowseaccepted != null && temcobrowseaccepted != ""){
				cobrowseaccepted = temcobrowseaccepted;
			}
      if(temcobrowsesharing != null && temcobrowsesharing != ""){
				cobrowsesharing = temcobrowsesharing;
			}
      if(temscreen != null && temscreen != ""){
				screen = temscreen;
			}
      if(temchatPriority != null && temchatPriority != ""){
				chatPriority = temchatPriority;
			}
      if(temsubmittedVASurvey != null && temsubmittedVASurvey != ""){
				submittedVASurvey = temsubmittedVASurvey;
			}      
      if(temCMcomments != null && temCMcomments != ""){
				CMcomments = temCMcomments;
			}
      if(temofflinemessage != null && temofflinemessage != ""){
				offlinemessage = temofflinemessage;
			}      
      if(temxcut != null && temxcut != ""){
				xcut = temxcut;
			}
			 if(temlastSysMg != null && temlastSysMg != ""){
				lastSysMg = temlastSysMg;
			} 
			if(temlastAgent != null && temlastAgent != ""){
				lastAgent = temlastAgent ;
			}
			if(temchatIdle != null && temchatIdle != ""){
				chatIdle= temchatIdle;
			}
			if(temrefCtr != null && temrefCtr != ""){
				refCtr= temrefCtr;
			}
			if(temcid != null && temcid != ""){
				cid= temcid;
			}
			if(temeid != null && temeid != ""){
				eid= temeid;
			}
			if(temlestate != null && temlestate != ""){
				lestate= temlestate;
			}			
			if(temlastSeq != null && temlastSeq != ""){
				lastSeq= temlastSeq;
			}
			if(temlpInteractive != null && temlpInteractive != ""){
				lpInteractive= temlpInteractive ;
			}

			if(temvaInteractive != null && temvaInteractive != ""){
				vaInteractive= temvaInteractive ;
			}
			if(temlevisitorId != null && temlevisitorId != ""){
				levisitorId = temlevisitorId;
			}
			if(temlesessionId != null && temlesessionId != ""){
				lesessionId = temlesessionId;
			}
			if(temleinteractionContextId != null && temleinteractionContextId != ""){
				leinteractionContextId = temleinteractionContextId;
			}			
			if(temBtnNameRef != null && temBtnNameRef != ""){
				btnNameRef = temBtnNameRef;
			}	
			if(temLenoChatState!=null && temLenoChatState != ""){
				lenoChatState = temLenoChatState;	
			}
      if(temlenolocoffercount!=null && temlenolocoffercount != ""){
				lenolocoffercount = temlenolocoffercount;
			}
			if(temlenooffercount!=null && temlenooffercount != ""){
				lenooffercount = temlenooffercount;	
			}
			if(temlenoseccount!=null && temlenoseccount != ""){
				lenoseccount = temlenoseccount;	
			}
                     if(temagentMap!=null && temagentMap!= ""){
				agentMap = temagentMap;	
			}
			if(temSMMap!=null && temSMMap!= ""){
				SMMap = temSMMap;	
			}
			if(temqMap!=null && temqMap!= ""){
				qMap = temqMap;	
			}
			if(temRecordMsg != null && temRecordMsg != ""){
				recordmsgexist = temRecordMsg;
			}
			if(temReadMessagesCount != null && temReadMessagesCount !== ""){
				readMessagesCount = temReadMessagesCount;
			}

                    
			if(cwAssist.isJSONSupported()){
				if(temChatWizParam != null ){					
					chatWizParam = JSON.parse(temChatWizParam);
				}
					
				
				if(temChatWizSurveyParam != null )
					chatWizSurveyParam = JSON.parse(temChatWizSurveyParam);
			}
		}
	}
}
function getDayofWeek(day){
  var weekday = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
  return weekday[day];  
}

function daysBetween( date1, date2 ) {
  //Get 1 day in milliseconds
  var one_day=1000*60*60*24;

  // Convert both dates to milliseconds
  var date1_ms = date1.getTime();
  var date2_ms = date2.getTime();
  var date3 = new Date();
  date3.setHours(0); date3.setMinutes(0); date3.setSeconds(0);
  var date3_ms = date3.getTime();
  var today_ms = date2_ms - date3_ms;
  
  // Calculate the difference in milliseconds
  var difference_ms = date2_ms - date1_ms;  
  var finalDiff = difference_ms - today_ms;
  var noofdays; 
  var dateStr = monthNames[date1.getMonth()] + " " + date1.getDate() + ", " + date1.getFullYear();
  if(finalDiff < 0) {
    noofdays =  0;
  }else{
    noofdays = Math.ceil(finalDiff/one_day);
  }
  //console.log("chat_TS from LP>"+date1_ms+":current_TS "+date2_ms+":difference_ms "+difference_ms + "today_ms "+today_ms + "finalDiff "+finalDiff + "noofdays-"+noofdays);  
  if(noofdays < 7){
     if(noofdays == 0)
        dateStr = "Today";                                 
     else if(noofdays == 1)
        dateStr = "Yesterday";
     else
        dateStr = getDayofWeek(date1.getDay());
       
  }
  //console.log("LPdate "+date1+ "Currdate "+date2+" chat_TS DISPLAY>"+dateStr);  
  return noofdays;                             
  // Convert back to days and return
   
}


/** This method is used to determine device type, expected values are: DESKTOP, MOBILE and TABLET. */
	function getDeviceType() {
		getDevice();
		try {
			if(device.mobile()) {
				return 'MOBILE';
			} else if (device.tablet()) {
				return 'TABLET';
			} else {
				return 'DESKTOP';
			}
        } catch (e) {
			// console.error("=> Error while determining device type. Exception: " + e);
			invokeUILog(latestConvID, "ERROR", "GUID: " + bbPublicCookie + " - Error while determining device type. Error details: " + e.message);
        }
	}

	function l(n) {
		return -1 !== devNavigator.indexOf(n);
        }
	function isTouchable(){
	  return (('ontouchstart' in document.documentElement) || ('ontouchstart' in window) || (navigator.maxTouchPoints > 0)
				|| (window.DocumentTouch && document instanceof DocumentTouch))
	}

function getDevice(){
  try{
       var i = {};
       window.device = i;       
       i.macos = function() {
            return l("mac")
        }, i.ios = function() {
            return i.iphone() || i.ipod() || i.ipad()
        }, i.iphone = function() {
            return !i.windows() && l("iphone")
        }, i.ipod = function() {
            return l("ipod")
        }, i.ipad = function() {
            return l("ipad")
        }, i.android = function() {
            return !i.windows() && l("android")
        }, i.androidPhone = function() {
            return i.android() && l("mobile")
        }, i.androidTablet = function() {
            return i.android() && !l("mobile")
        }, i.blackberry = function() {
            return l("blackberry") || l("bb10") || l("rim")
        }, i.blackberryPhone = function() {
            return i.blackberry() && !l("tablet")
        }, i.blackberryTablet = function() {
            return i.blackberry() && l("tablet")
        }, i.windows = function() {
            return l("windows") && isTouchable()
        }, i.windowsPhone = function() {
            return i.windows() && l("phone")
        }, i.windowsTablet = function() {
            return i.windows() && l("touch") && !i.windowsPhone()
        }, i.fxos = function() {
            return (l("(mobile") || l("(tablet")) && l(" rv:")
        }, i.fxosPhone = function() {
            return i.fxos() && l("mobile")
        }, i.fxosTablet = function() {
            return i.fxos() && l("tablet")
        }, i.meego = function() {
            return l("meego")
        }, i.cordova = function() {
            return window.cordova && "file:" === location.protocol
        }, i.nodeWebkit = function() {
            return "object" === t(window.process)
        }, i.mobile = function() {
            return i.androidPhone() || i.iphone() || i.ipod() || i.windowsPhone() || i.blackberryPhone() || i.fxosPhone() || i.meego()
        }, i.tablet = function() {
            return i.ipad() || i.androidTablet() || i.blackberryTablet() || i.windowsTablet() || i.fxosTablet()
        }, i.desktop = function() {
            return !i.tablet() && !i.mobile()
        }
  }catch(e){}
  }