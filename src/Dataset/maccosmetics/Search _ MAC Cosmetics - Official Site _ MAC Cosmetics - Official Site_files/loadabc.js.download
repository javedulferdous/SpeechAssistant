/* DYNAMICALLY LOAD ABC ENGAGEMENT AND CUSTOMIZE VIA URL PARAMETERS

Use cases:

1. Brand cannot add div to page and wants to limit the engagement to only show where section=abc.
   Div id "lpAbc" will be injected and section will be set to "abc". The engagement must have an 
   entry point defined with the section as "abc".

   <script src="https://static-assets.dev.fs.liveperson.com/ABC/js/loadabc.js?divid=lpAbc&section=abc">

2. Brand has a campaign for ABC engagements where the target audience is limited to campaign=abc.
   SDE campaignId (inside mrktInfo element) will be set to "abc".

   <script src="https://static-assets.dev.fs.liveperson.com/ABC/js/loadabc.js?sde=mrktInfo,campaignId,abc">

*/

/*jshint scripturl:true*/
/*jshint esversion: 6*/

var minMacOSVersion = [10, 13, 4];
var minIOSVersion = [11, 3];
var supportedSystemRegEx = /\((Macintosh|iPhone|iPad|(?:iPod(?:\x20touch)?));.*\x20((?:\d[_.]{0,1})+)[^)]*\)\x20/i;
var urlFlag = false;
var clickEventSet = false;

if (lpTag.section == "") { lpTag.section = []; }

// If url param 'abctest=true', add section 'test'
if (location.href.split("?").length > 1) {
  var qs = location.href.split("?")[1].split("&");
  for (i = 0; i < qs.length; i++) {
    if (qs[i] == "abctest=true") {
      lpTag.section.push("test");
      console.log("added section 'test'");
    }
  }
}

// CLINIQUE TESTING
if (lpTag.site == "48719195" || lpTag.site == "67489891") {

  var env = "";
  if (location.href.indexOf("m.e.clinique.na.us.dev.ncsa.elcdev.net") > -1) {
    env = "dev";
  } else if (location.href.indexOf("m.e.clinique.na.us.stage.ncsa.elcdev.net") > -1) {
    env = "stage";
  } else if (location.href.indexOf("clinique.com") > -1) {
    en = "prod";
  }

  if (env == "dev" || env == "stage") {
    lpTag.section.push("test");
    console.log("added section 'test'");
  }

}

// Check for device compatibility
function CheckAbcSupport() {
  var userAgent = (window.navigator && window.navigator.userAgent) || '';
  var sysInfo = extractSystemInfo(userAgent);
  // non-apple system
  if (!sysInfo) {
    console.log('not a supported system.');
    return false;
  }
  // check platform version
  if ('MACINTOSH' === sysInfo.type.toUpperCase()) {
    // MacOS
    console.log('Detected MacOS version: ', sysInfo.version);
    return checkVersion(sysInfo.version, minMacOSVersion);
  } else if (['IPHONE', 'IPAD', 'IPOD', 'IPOD TOUCH'].includes(sysInfo.type.toUpperCase())) {
    // iOS
    console.log('Detected iOS version: ', sysInfo.version);
    return checkVersion(sysInfo.version, minIOSVersion);
  } else {
    // Unknown platform
    console.log('Unknown platform!');
    return false;
  }
}

function extractSystemInfo(e) {
  var t = supportedSystemRegEx.exec(e);
  console.log('System info extracted from UA: ', t);
  return t ?
    {
      type: t[1],
      version: (function (e) {
        var t = [],
          n = /(\d+)/g,
          r = null;
        do {
          if ((r = n.exec(e))) {
            var i = parseInt(r[0], 10);
            if ('number' != typeof i) return null;
            t.push(i);
          }
        } while (r);
        return t;
      })(t[2])
    } :
    null;
}

function checkVersion(targetVersion, minVersion) {
  if (void 0 === targetVersion) return !1;
  for (var n = 0, r = minVersion.length; n < r; n++) {
    var i = minVersion[n],
      o = parseInt(targetVersion[n], 10);
    if ((isNaN(o) && (o = 0), o > i)) return !0;
    if (o < i) return !1;
  }
  return !0;
}

// Parse through script url params and associated actions
function getParams(isAbc) {
  for (i = 0; i < document.scripts.length; i++) {
    var s = document.scripts[i].src;
    if (s.indexOf("loadabc.js?") > -1) {
      var p = s.split("?")[1].split("&");
      for (n = 0; n < p.length; n++) {
        key = p[n].split("=")[0];
        val = p[n].split("=")[1];
        switch (key) {
          case "divid":
            // Get div id to append
            if (!document.getElementById(val)) {
              d = document.createElement("div");
              d.id = val.split(",")[0];
              if (val.split(",").length==2) {
                appendTo = document.querySelector(decodeURI(val.split(",")[1]));
              } else {
                appendTo = document.body;
              }
              appendTo.appendChild(d);
              console.log('div appended');
            } else {
              console.log('div already exists');
            }
            break;
          case "section":
            if (isAbc) {
              lpTag.section.push(val);
            } else {
              lpTag.section.push("non-abc");
            }
            console.log('section = ' + lpTag.section);
            break;
          case "sde":
            // Pass SDE to LiveEngage
            sdeType = val.split(",")[0];
            sdeName = val.split(",")[1];
            sdeValue = val.split(",")[2];
            if (isAbc) {
              sde = '{"type": "' + sdeType + '", "info": { "' + sdeName + '": "' + sdeValue + '"}}';
            } else {
              sde = '{"type": "' + sdeType + '", "info": { "' + sdeName + '": "non-abc"}}';
            }
            lpTag.sdes.push(JSON.parse(sde));
            console.log(sdeType + ' : ' + sdeName + ' : ' + sdeValue);
            break;
          case "newpage":
            if (val === 'true') {
              runNewPage = true;
            };
            break;
          case "url":
            urlFlag = val;
            break;  
          case "embed":
            break;
        }
      }
    }
  }

  // If SDE and Section values were not passed, use default
  var campaignId = "";
  var mrktInfo = lpTag.sdes.get("mrktInfo");
  if (mrktInfo && mrktInfo[0].info.campaignId) {campaignId="set";}
  var section = lpTag.section;
  if ((section.length==0 && campaignId=="")){
    if (isAbc) {
      // mrktInfo,campaignId,abc
      sde = '{"type": "mrktInfo", "info": { "campaignId": "abc"}}';
    } else {
      sde = '{"type": "mrktInfo", "info": { "campaignId": "non-abc"}}';
    }
    lpTag.sdes.push(JSON.parse(sde));
    console.log(sde);
  }

}

// Add Apple script to load engagement
function addABC() {
  var s = document.createElement("script");
  s.type = "text/javascript";
  s.src = "https://static.cdn-apple.com/businesschat/start-chat-button/2.0.0/index.js";
  document.getElementsByTagName("head")[0].append(s);
}

// Append url to customer status SDE 
function addUrl(abcLink) {
  var anchorParts = abcLink.href.split("?");
  if (!anchorParts) throw "Unable to break apart anchor tag";
  // console.log(anchorParts[0]);
  // console.log(anchorParts[1]);	  
  var anchorParams = anchorParts[1].split("&");
  if (!anchorParams) throw "Unable to get anchor parameters";
  // console.log(anchorParams[0]);
  // console.log(anchorParams[1]);
  var currentUrl = window.location.href;
  for (idx = 0; idx < anchorParams.length; ++idx) {
    if (anchorParams[idx].includes('biz-group-id')) {
      anchorParams[idx] += "%20|%20" + encodeURIComponent(currentUrl);
    }
  }
  var newABCHref = anchorParts[0];
  for (idx = 0; idx < anchorParams.length; ++idx) {
    newABCHref += ((idx == 0) ? "?" : "&") + anchorParams[idx];
  }
  // console.log(newABCHref);
  abcLink.href = newABCHref;
}

// Minimize vertical banner (Aqua Aston)
function minimizeBanner(){
  var abcIframe = document.querySelector('[id^="LPMcontainer"] iframe');
  var abcRoot = "div[class^=businesschat-button__";
  var abcButton = abcIframe.contentDocument.querySelector(abcRoot + 'container]');
  var abcContext = abcButton.querySelector(abcRoot + 'text-context]');
  var abcIcons = abcButton.querySelector(abcRoot + 'icons]');
  var abcSvg = abcButton.querySelector(abcRoot + 'icons] a svg');
  abcButton.style.padding = 0;
  abcButton.style.width = "41px";
  abcContext.style.fontSize = "9.999pt";
  abcContext.style.paddingBottom = "2px";
  abcSvg.style.width = "36px";
  abcSvg.style.height = "38px";
  abcIcons.style.margin = 0;
  // abcLink.style.margin = 0;
  abcSvg.parentElement.style.marginLeft = 0;
}

function watchIframes(){
  // AQUA-ASTON CUSTOMIZATION
  if (lpTag.site == "41198207" || lpTag.site == "67489891") {
    var observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
          [].filter.call(mutation.addedNodes, function (node) {
              return node.nodeName == 'IFRAME';
          }).forEach(function (node) {
              node.addEventListener('load', function (e) {
                  console.log('iframe', mutation.type);
                  minimizeBanner();                         
              });
          });
      });
    });
    observer.observe(document.body, { childList: true, subtree: true });
  }
}

// Loop until script and div loaded
var loopCount = 0;
var abcLink = "";
function setUpEngagements() {
  setTimeout(function () {
    abcLoaded = typeof (AppleBusinessChat) !== "undefined";
    if (abcLoaded) {
      subLoaded = typeof (AppleBusinessChat.setUpBanners) !== "undefined";
    } else {
      subLoaded = false;
    }
    engLoaded = document.querySelector('[class^=apple-business-chat] iframe') !== null;
    if (loopCount < 15) {
      if (!abcLoaded || !subLoaded) {
        console.log("abc function/method not defined");
        loopCount++;
        setUpEngagements();
      } else if (abcLoaded && subLoaded && !engLoaded) {
        console.log('abc function/method defined');
        AppleBusinessChat.setUpBanners(); // IS THIS THE RIGHT THING TO CALL?
        loopCount++;
        setUpEngagements();
      } else if (abcLoaded && subLoaded && engLoaded) {
        console.log('abc engagement loaded');
        setTimeout(function () {
          if (!clickEventSet) {
            abcIframe = document.querySelector('[id^="LPMcontainer"] iframe');
            abcLink = abcIframe.contentDocument.querySelector('a');
            if (urlFlag) { addUrl(abcLink); }
            btn = abcLink.href;
            console.log(abcLink);
            abcLink.removeAttribute('href');
            lpBtn = abcIframe.contentDocument.querySelector('div[class^=businesschat-button__container]');
            lpBtn.setAttribute('data-LP-event', 'click');
            lpBtn.setAttribute('target', '_blank');
            lpBtn.setAttribute('onclick', "window.open('" + btn + "','_blank')");
            console.log('click event set');
            clickEventSet = true;
          }
          document.querySelector('[id^="LPMcontainer"]').style.display = "block";
        }, 500);
      }
    } else {
      console.log('Timed out');
    }
  }, 500);
}

var isAbc = CheckAbcSupport();
var runNewPage = false;
console.log('Is ABC supported on this device? ', isAbc);
if (isAbc) {
  console.log("ABC compatible!");
  // watchIframes();
  getParams(true);
  addABC();
  // lpTag.events.bind({
  //   eventName : "*",
  //   appName : "LP_OFFERS",
  //   func: function(data,eventInfo){
  //     console.log(JSON.stringify(data) + " triggered by: " +  JSON.stringify(eventInfo));
  //   }
  // });
  lpTag.events.bind({
    eventName: "OFFER_IMPRESSION",
    appName: "LP_OFFERS",
    func: function () {
      // if (lpTag.site == "41198207" || lpTag.site == "67489891") { // AQUA ASTON
      //   document.querySelector('[id^="LPMcontainer"]').style.display = "none";
      // }
      setTimeout(setUpEngagements(), 1000);
    }
  });
} else {
  getParams(false);
}

// Call newPage if URL param exists
if (runNewPage) {
  setTimeout(function(){
    var sdes = lpTag.sdes.get();
    lpTag.newPage(document.URL, {
      section: lpTag.section,
      sdes: sdes
    });
    console.log('newpage complete');
  },500);
}