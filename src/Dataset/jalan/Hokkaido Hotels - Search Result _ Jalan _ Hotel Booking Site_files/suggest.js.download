/*
--------------------------------------------------------
suggest.js - Input Suggest
Version 2.3.1 (Update 2013/02/11)

Copyright (c) 2006-2013 onozaty (http://www.enjoyxstudy.com)

Released under an MIT-style license.

For details, see the web site:
 http://www.enjoyxstudy.com/javascript/suggest/

--------------------------------------------------------
*/
var isArray = Array.isArray;
/**
 * オブジェクトや配列の特定のキーの値だけを取り出す
 * @param {Object|Array.<Object>} object
 * @param {string|Array.<string>} path
 * @returns {*}
 */
function property(object, path) {
	if (object == null || typeof object != 'object') return;
	return (isArray(object)) ? object.map(createProcessFunction(path)) :
		createProcessFunction(path)(object);
}

function createProcessFunction(path) {
	if (typeof path == 'string') path = path.split('.');
	if (!isArray(path)) path = [path];
	return function(object) {
		var index = 0,
			length = path.length;
		while (index < length) {
			object = object[toString(path[index++])];
		}
		return (index && index == length) ? object : void 0;
	};
}

function toString(value) {
	if (value == null) return '';
	if (typeof value == 'string') return value;
	if (isArray(value)) return value.map(toString) + '';
	var result = value + '';
	return '0' == result && 1 / value == -(1 / 0) ? '-0' : result;
}

function predicate( value, sourceArray ) {

	for(var i=0;i<sourceArray.length;i++) {
		if(value == sourceArray[i].code) {
			return i;
		}
	}
	return -1;
}

if(!String.prototype.trim) {
	String.prototype.trim = function () {
		return this.replace(/^\s+|\s+$/g,'');
	};
}

if (!Suggest) {
	var Suggest = {};
}
/*-- KeyCodes -----------------------------------------*/
Suggest.Key = {
	TAB: 9,
	RETURN: 13,
	ESC: 27,
	UP: 38,
	DOWN: 40
};
/*-- Utils --------------------------------------------*/
Suggest.copyProperties = function(dest, src) {
	for (var property in src) {
		dest[property] = src[property];
	}
	return dest;
};
/*-- values --------------------------------------------*/
Suggest.areaCode = null;
Suggest.oldDestinationText = null;

/*-- Suggest.Local ------------------------------------*/
Suggest.Local = function() {
	this.initialize.apply(this, arguments);
};
Suggest.Local.prototype = {
	initialize: function(input, suggestArea, candidateList, areaCode) {
		this.input = this._getElement(input);
		this.suggestArea = this._getElement(suggestArea);
		this.areaArray = candidateList.slice();
		this.candidateList = property(candidateList, "name");
		
		var row = predicate(areaCode, this.areaArray);
		this.setInputText(this.areaArray[row].name);
		
		this.oldText = Suggest.oldDestinationText = this.getInputText();
		if (arguments[3]) this.setOptions(arguments[3]);
		// reg event
		this._addEvent(this.input, 'focus', this._bind(this.checkLoop));
		this._addEvent(this.input, 'blur', this._bind(this.inputBlur));
		this._addEvent(this.suggestArea, 'blur', this._bind(this.inputBlur));
		this._addEvent(this.input, 'keydown', this._bindEvent(this.keyEvent));
		// init
		this.clearSuggestArea();
	},
	// options
	interval: 0,
	dispMax: 10,
	listTagName: 'li',
	prefix: false,
	ignoreCase: true,
	highlight: false,
	dispAllKey: false,
	classMouseOver: 'over',
	classSelect: 'select',
	hookBeforeSearch: function() {},
	setOptions: function(options) {
		Suggest.copyProperties(this, options);
	},
	inputBlur: function() {
		setTimeout(this._bind(function() {
			if (document.activeElement == this.suggestArea || document.activeElement ==
				this.input) {
				// keep suggestion
				return;
			}
			this.changeUnactive();
			this.oldText = this.getInputText();
			if (this.timerId) clearTimeout(this.timerId);
			this.timerId = null;
			setTimeout(this._bind(this.clearSuggestArea), 500);
		}, 500));
	},
	checkLoop: function() {
		var text = this.getInputText();
		if (text != this.oldText) {
			this.oldText = text;
			this.search();
		}
		if (this.timerId) clearTimeout(this.timerId);
		this.timerId = setTimeout(this._bind(this.checkLoop), this.interval);
	},
	search: function() {
		// init
		this.clearSuggestArea();
		var text = this.getInputText().trim();
		if (text == '' || text == null) return;
		this.hookBeforeSearch(text);
		var resultList = this._search(text);
		if (resultList.length != 0) {
			this.createSuggestArea(resultList);

			// エリアコードの取得(デフォルト値)
			var selectLi = this.suggestArea.children[0].id;
			Suggest.areaCode = this.areaArray[selectLi].code;
		} else {
			Suggest.areaCode = null;
		}
	},
	_search: function(text) {
		var resultList = [];
		var temp;
		this.suggestIndexList = [];
		for (var i = 0, length = this.candidateList.length; i < length; i++) {
			if ((temp = this.isMatch(this.candidateList[i], text)) != null) {
				resultList.push(temp);
				this.suggestIndexList.push(i);
				if (this.dispMax != 0 && resultList.length >= this.dispMax) break;
			}
		}
		return resultList;
	},
	isMatch: function(value, pattern) {
		if (value == null) return null;
		var pos = (this.ignoreCase) ? value.toLowerCase().indexOf(pattern.toLowerCase()) :
			value.indexOf(pattern);
		if ((pos == -1) || (this.prefix && pos != 0)) return null;
		if (this.highlight) {
			return (this._escapeHTML(value.substr(0, pos)) + '<strong>' + this._escapeHTML(
				value.substr(pos, pattern.length)) + '</strong>' + this._escapeHTML(
				value.substr(pos + pattern.length)));
		} else {
			return this._escapeHTML(value);
		}
	},
	clearSuggestArea: function() {
		this.suggestArea.innerHTML = '';
		this.suggestArea.style.display = 'none';
		this.suggestList = null;
		this.suggestIndexList = null;
		this.activePosition = null;
	},
	createSuggestArea: function(resultList) {
		this.suggestList = [];
		this.inputValueBackup = this.input.value;
		for (var i = 0, length = resultList.length; i < length; i++) {
			var element = document.createElement(this.listTagName);
			var areaName = document.createElement('div');
			var hierarchy = document.createElement('div');
			element.id = this.suggestIndexList[i];
			areaName.innerHTML = resultList[i];
			areaName.className = 'areaName';
			hierarchy.className = 'hierarchyName';
			// 階層の組み立て
			// 県ではない
			if (this.areaArray[element.id].code.slice(-4) !== '0000') {
				var kenCD = this.areaArray[element.id].code.slice(0, 2) + '0000';
				for (key in this.areaArray) {
					if (this.areaArray[key].code === kenCD) {
						hierarchy.innerHTML = ', ' + this.areaArray[key].name;
						// 大エリアではない
						if (this.areaArray[element.id].code.slice(-2) !== '00') {
							var lrgCD = this.areaArray[element.id].code.slice(0, 4) + '00';
							for (key2 in this.areaArray) {
								if (this.areaArray[key2].code === lrgCD) {
									hierarchy.innerHTML = ', ' + this.areaArray[key2].name + hierarchy.innerHTML;
									break;
								}
							}
						}
						break;
					}
				}
			}
			element.appendChild(areaName);
			element.appendChild(hierarchy);
			this.suggestArea.appendChild(element);
			this._addEvent(element, 'click', this._bindEvent(this.listClick, i));
			this._addEvent(element, 'mouseover', this._bindEvent(this.listMouseOver, i));
			this._addEvent(element, 'mouseout', this._bindEvent(this.listMouseOut, i));
			this.suggestList.push(element);
		}
		this.suggestArea.style.display = '';
		this.suggestArea.scrollTop = 0;
	},
	getInputText: function() {
		return $(this.input).val();
	},
	setInputText: function(text) {
		this.input.value = text;
		$(this.input).css("color", "rgb(70, 70, 70)");
	},
	// key event
	keyEvent: function(event) {
		if (!this.timerId) {
			this.timerId = setTimeout(this._bind(this.checkLoop), this.interval);
		}
		if (this.dispAllKey && event.ctrlKey && this.getInputText() == '' && !this.suggestList &&
			event.keyCode == Suggest.Key.DOWN) {
			// dispAll
			this._stopEvent(event);
			this.keyEventDispAll();
		} else if (event.keyCode == Suggest.Key.UP || event.keyCode == Suggest.Key.DOWN) {
			// key move
			if (this.suggestList && this.suggestList.length != 0) {
				this._stopEvent(event);
				this.keyEventMove(event.keyCode);
			}
		} else if (event.keyCode == Suggest.Key.RETURN) {
			// fix
			if (this.suggestList && this.suggestList.length != 0) {
				this._stopEvent(event);
				this.keyEventReturn();
			}
		} else if (event.keyCode == Suggest.Key.ESC) {
			// cancel
			if (this.suggestList && this.suggestList.length != 0) {
				this._stopEvent(event);
				this.keyEventEsc();
			}
		} else {
			this.keyEventOther(event);
		}
	},
	keyEventDispAll: function() {
		// init
		this.clearSuggestArea();
		this.oldText = this.getInputText();
		this.suggestIndexList = [];
		for (var i = 0, length = this.candidateList.length; i < length; i++) {
			this.suggestIndexList.push(i);
		}
		this.createSuggestArea(this.candidateList);
	},
	keyEventMove: function(keyCode) {
		this.changeUnactive();
		if (keyCode == Suggest.Key.UP) {
			// up
			if (this.activePosition == null) {
				this.activePosition = this.suggestList.length - 1;
			} else {
				this.activePosition--;
				if (this.activePosition < 0) {
					this.activePosition = null;
					this.input.value = this.inputValueBackup;
					this.suggestArea.scrollTop = 0;
					return;
				}
			}
		} else {
			// down
			if (this.activePosition == null) {
				this.activePosition = 0;
			} else {
				this.activePosition++;
			}
			if (this.activePosition >= this.suggestList.length) {
				this.activePosition = null;
				this.input.value = this.inputValueBackup;
				this.suggestArea.scrollTop = 0;
				return;
			}
		}
		this.changeActive(this.activePosition);
	},
	keyEventReturn: function() {
		// エリアコードの取得
		var selectLi = this.suggestArea.children[this.activePosition].id;
		Suggest.areaCode = this.areaArray[selectLi].code;	
	
		this.clearSuggestArea();
		this.moveEnd();
	},
	keyEventEsc: function() {
		this.clearSuggestArea();
		this.input.value = this.inputValueBackup;
		this.oldText = this.getInputText();
		if (window.opera) setTimeout(this._bind(this.moveEnd), 5);
	},
	keyEventOther: function(event) {},
	changeActive: function(index) {
		this.setStyleActive(this.suggestList[index]);
		this.setInputText(this.candidateList[this.suggestIndexList[index]]);
		this.oldText = this.getInputText();
		this.input.focus();
	},
	changeUnactive: function() {
		if (this.suggestList != null && this.suggestList.length > 0 && this.activePosition !=
			null) {
			this.setStyleUnactive(this.suggestList[this.activePosition]);
		}
	},
	listClick: function(event, index) {

		// エリアコードの取得
		var selectLi = this.suggestArea.children[index].id;
		Suggest.areaCode = this.areaArray[selectLi].code;

		this.changeUnactive();
		this.activePosition = index;
		this.changeActive(index);
		this.clearSuggestArea();
		this.moveEnd();
	},
	listMouseOver: function(event, index) {
		this.setStyleMouseOver(this._getEventElement(event));
	},
	listMouseOut: function(event, index) {
		if (!this.suggestList) return;
		var element = this._getEventElement(event);
		if (index == this.activePosition) {
			this.setStyleActive(element);
		} else {
			this.setStyleUnactive(element);
		}
	},
	setStyleActive: function(element) {
		if (element.tagName.toLowerCase() === 'div') element.parentNode.className =
			this.classSelect;
		else element.className = this.classSelect;
		// auto scroll
		var offset = element.offsetTop;
		var offsetWithHeight = offset + element.clientHeight;
		if (this.suggestArea.scrollTop > offset) {
			this.suggestArea.scrollTop = offset
		} else if (this.suggestArea.scrollTop + this.suggestArea.clientHeight <
			offsetWithHeight) {
			this.suggestArea.scrollTop = offsetWithHeight - this.suggestArea.clientHeight;
		}
	},
	setStyleUnactive: function(element) {
		if (element.tagName.toLowerCase() === 'div') element.parentNode.className =
			'';
		else element.className = '';
	},
	setStyleMouseOver: function(element) {
		if (element.tagName.toLowerCase() === 'div') element.parentNode.className =
			this.classMouseOver;
		else element.className = this.classMouseOver;
	},
	moveEnd: function() {
		if (this.input.createTextRange) {
			this.input.focus(); // Opera
			var range = this.input.createTextRange();
			range.move('character', this.input.value.length);
			range.select();
		} else if (this.input.setSelectionRange) {
			this.input.setSelectionRange(this.input.value.length, this.input.value.length);
		}
	},
	// Utils
	_getElement: function(element) {
		return (typeof element == 'string') ? document.getElementById(element) :
			element;
	},
	_addEvent: (window.addEventListener ? function(element, type, func) {
		element.addEventListener(type, func, false);
	} : function(element, type, func) {
		element.attachEvent('on' + type, func);
	}),
	_stopEvent: function(event) {
		if (event.preventDefault) {
			event.preventDefault();
			event.stopPropagation();
		} else {
			event.returnValue = false;
			event.cancelBubble = true;
		}
	},
	_getEventElement: function(event) {
		return event.target || event.srcElement;
	},
	_bind: function(func) {
		var self = this;
		var args = Array.prototype.slice.call(arguments, 1);
		return function() {
			func.apply(self, args);
		};
	},
	_bindEvent: function(func) {
		var self = this;
		var args = Array.prototype.slice.call(arguments, 1);
		return function(event) {
			event = event || window.event;
			func.apply(self, [event].concat(args));
		};
	},
	_escapeHTML: function(value) {
		return value.replace(/\&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g,
			'&gt;').replace(/\"/g, '&quot;').replace(/\'/g, '&#39;');
	}
};
/*-- Suggest.LocalMulti ---------------------------------*/
Suggest.LocalMulti = function() {
	this.initialize.apply(this, arguments);
};
Suggest.copyProperties(Suggest.LocalMulti.prototype, Suggest.Local.prototype);
Suggest.LocalMulti.prototype.delim = ' '; // delimiter
Suggest.LocalMulti.prototype.keyEventReturn = function() {
	this.clearSuggestArea();
	this.input.value += this.delim;
	this.moveEnd();
};
Suggest.LocalMulti.prototype.keyEventOther = function(event) {
	if (event.keyCode == Suggest.Key.TAB) {
		// fix
		if (this.suggestList && this.suggestList.length != 0) {
			this._stopEvent(event);
			if (!this.activePosition) {
				this.activePosition = 0;
				this.changeActive(this.activePosition);
			}
			this.clearSuggestArea();
			this.input.value += this.delim;
			if (window.opera) {
				setTimeout(this._bind(this.moveEnd), 5);
			} else {
				this.moveEnd();
			}
		}
	}
};
Suggest.LocalMulti.prototype.listClick = function(event, index) {
	this.changeUnactive();
	this.activePosition = index;
	this.changeActive(index);
	this.input.value += this.delim;
	this.clearSuggestArea();
	this.moveEnd();
};
Suggest.LocalMulti.prototype.getInputText = function() {
	var pos = this.getLastTokenPos();
	if (pos == -1) {
		return this.input.value;
	} else {
		return this.input.value.substr(pos + 1);
	}
};
Suggest.LocalMulti.prototype.setInputText = function(text) {
	var pos = this.getLastTokenPos();
	if (pos == -1) {
		this.input.value = text;
	} else {
		this.input.value = this.input.value.substr(0, pos + 1) + text;
	}
};
Suggest.LocalMulti.prototype.getLastTokenPos = function() {
	return this.input.value.lastIndexOf(this.delim);
};
Suggest.areaCodeClear = function(inputTag) {
//	Suggest.areaCode = null;
};

// 言語判定
function langDecision() {
	var langCD;
    var max = 0, hash = "", array = "";
    var pathLangCD = window.location.pathname.slice(1,3);
    var queryStr = window.location.search;

    //?を取り除くため、1から始める。複数のクエリ文字列に対応するため、&で区切る
    hash  = queryStr.slice(1).split('&');    
    max = hash.length;
    for (var i = 0; i < max; i++) {
        array = hash[i].split('=');    //keyと値に分割。
        if(array[0] === 'langCd') {
        	langCD = array[1];
        	break;
        }
    }

	// クエリから取れない場合、pathから取る
	if(!langCD)	{
		switch(pathLangCD) {
			case 'kr':
				langCD = 'ko_KR';
				break;
			case 'cn':
				langCD = 'zh_CN';
				break;
			case 'tn':
				langCD = 'zh_TW';
				break;
			case 'th':
				langCD = 'th_TH';
				break;
			case 'id':
				langCD = 'in_ID';
				break;
			case 'my':
				langCD = 'ms_MY';
				break;
			case 'en':
			default:
				langCD = 'en_US';
				break;
		}
	}
	return langCD;
}
