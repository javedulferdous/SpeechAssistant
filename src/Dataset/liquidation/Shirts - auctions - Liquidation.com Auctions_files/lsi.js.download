var lsi = {
	cookieDomain: function() {
		return ".liquidation.com";
	},
	cookieName: function() {
		return "WWW_SESSION_ID_USER";
	},
	sessionCookieName: function() {
		return "WWW_SESSION_ID";
	},
	currencySymbol: function() {
		return "$";
	},
	wwwDomain: function() {
		return "www.liquidation.com";
	},
	emAppKey: function() {
		return "1";
	},
	emSSOURL: function() {
		return "https://emsso.liquidityservices.com";
	},
	emAPIURL: function() {
		return "http://mule.prod.lqdt.com/em";
	},
	emActiveFlag: function() {
		return true;
	},
	isMobile: function() {
		if (navigator.userAgent && navigator.userAgent.match(/Mobile|Android|BlackBerry/))
			return true;
		else return false;
	},
	_i18n: {
		
	},
	i18n: function(el, params, opts) {
		function replace_vars(str, vars) {
			str = str.replace(/%{(\w+)}/g, function(match, $1, offset, original) {
				return vars[$1];
			});
			return str;
		}
		var locale = opts !== undefined && opts['locale'] ? opts['locale'] : lsi.getLocale();
		if (!(locale in lsi._i18n) || !(el in lsi._i18n[locale])) {
			if (locale != "en") {
				return lsi.i18n(el, params, { locale: "en" });
			} else {
				return "";
			}
		}
		var str = lsi._i18n[locale][el];
		if (typeof params == "object" && "vars" in params)
			str = replace_vars(str, params.vars);
		return str;
	},
	localeURLPrefix: function() {
		return '/' + lsi.getLocale();
	},
	getLocale: function() {
		var locale = "en";
		var matches = window.location.pathname.match(/^\/(\w\w)\//);
		if (matches && matches.length > 0)
			locale = matches[1];
		return locale;
	},
	readCookie: function(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for(var i=0;i < ca.length;i++) {
			var c = ca[i];
			while (c.charAt(0)==' ') c = c.substring(1,c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
		}
		return null;
	},
	translationFromEnglish: function(en) {
		if (lsi._i18n === undefined || lsi._i18n['en'] === undefined || lsi.getLocale() == 'en' )
			return en;
		var translation_key = '';
		for (var key in lsi._i18n['en']) {
			if ( lsi._i18n['en'][key] == en )
				translation_key = key;
			}
		return translation_key != '' ? lsi.i18n(translation_key) : en;
	}
};
