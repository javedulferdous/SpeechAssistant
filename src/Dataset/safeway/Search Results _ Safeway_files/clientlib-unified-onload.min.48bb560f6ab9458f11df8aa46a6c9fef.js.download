var SWY = SWY || {};

//Javascript Component
SWY.CONFIGSERVICE = {};
SWY.OKTA = {};
SWY.ENFORCEMENT = {};
SWY.ENFORCEMENTUTILS = {};
SWY.RESTRICTEDRESOURCE = {};
SWY.USERTYPESTATE = {};
SWY.STORESELECTION ={};
SWY.QUERYSTRING = {};

//Global Variable
SWY.configService = {};
SWY.popularSearches = {};
//SWY.userState = {};
SWY.allowedUserTypes = {};
SWY.redirections = {};
SWY.allowedZipcodeModal = {};
SWY.isGuestAuthAllowed = {};
SWY.isEscapeSSOAllowed = {};

// Added for SLice 3 deeplinking flows
SWY.deepLinkData = {};

// API URI
SWY.authenticateGuestPath = '/bin/safeway/authenticate/guest';
SWY.storeInfoPath = '/bin/safeway/store';
SWY.ssoPath = '/bin/safeway/sso';

var AB = AB || {};

//jQuery Library
AB.$ = null; //this jquery library is for syndication header and footer

//Javascript Component
AB.COMMON = {};
AB.ALERT = {};
AB.MINICART = {};
AB.RECIPECAROUSEL = {};
AB.PRINT = {};
AB.RIGHTDRAWER = {};
AB.PRODUCTGRID = {};
AB.BREADCRUMB = {};
//AB.DATALAYER = {};
AB.CART = {};
AB.DELIVERYPREF = {};
AB.PROMOTIONS = {};
AB.VALIDATOR = {};
AB.ARIA = {};
AB.NOTIFYME = {};
// AB.FIXEDHEADER = {};
AB.COUPON = {};
AB.WWWHEADER = {};
AB.SLICKCAROUSEL = {};
AB.VALIDATION = {};
AB.UCACURRENTORDER = {};
AB.UCAREWARDS = {};
AB.UCASERVICES = {};
AB.UCASUBSCRIPTIONSERVICES = {};
AB.COMMUNICATIONPREF = {};
AB.COMMUNICATIONPREF_V2 = {};
AB.UCAFULFILLMENTPREFERENCE ={};
AB.UCAUPDATEDELIVERYADDRESS ={};
AB.GETPROFILE={};
AB.FILTERS = {};
AB.POPULARSEARCH = {};
AB.AUTOSUGGEST = {};
AB.EDITORDER = {};
AB.LAZYLOAD = {};
AB.CHECKPROFILE = {};
AB.SHOPBYCATEGORY = {
    Carousel: {},
    Util: {},
    ABTest: {}
};
AB.checkCategoryTileL3View = '';

//core
AB.SETSTORE = {};

//J4U js that will be moved to wcax-j4u
AB.WEEKLYADWIDGET = {};
AB.ISL = {};
AB.AUTOCLIP_MESSAGES = {};

AB.BOXTOPS = {};
AB.GASGROCERY = {};
AB.SYNDICATEDCOOKIE = {};

//Global Variable
AB.dealGridList = {};
AB.productGridList = [];
AB.departmentsFilterList = [];

AB.gridDataURL = '';
AB.objDisasterInfo = {};
AB.userInfo = {};
AB.previousLogin = {};
AB.storeInfo = {};
// AB.OMS_ORDERSUMMARY = {};
AB.anchorTags = ["#prop65-title", "#bookmark-disclaimer", "#error"];

AB.attendDeliveryTxt = 'Available only with Attended Delivery';
AB.itemNotAvailableTxt  = 'This item is not available right now';
AB.unattendedDeliveryIsEnabled = false;
AB.rewardSummaryTime = 10000;  //this is the time for rewards summary to take from local storage in miliseconds
AB.slotLSTime = 2*60*60*1000; //this is the time for which the slot info is kept in local storage in miliseconds (2H)
AB.ucaRewardsTrigger = true;
AB.productCardTest = '';
AB.categoryTileL3Test = '';
AB.RightDrawerTest = '';

//URL Path
// AB.miniCartPath = '/bin/safeway/cart';
// AB.cartSummaryPath = '/bin/safeway/cart/summary';
AB.pendingOrderPath = '/bin/safeway/order/pending/alert.json';
AB.addToCartPath = '/bin/safeway/cart/add';
AB.productPriceDetailPath = '/bin/safeway/product/price';
AB.reserveTimePath = '/bin/safeway/order/selected/slot';
AB.removeProductHistoryPath = '/bin/safeway/product/historylist';
AB.validationPath = '/ecom/api/modern1/route';
AB.authenticateGuestPath = '/bin/safeway/authenticate/guest';
AB.viewSimilarLinkPath = '/bin/safeway/product/similar';
AB.storeInfoPath = '/bin/safeway/store';
AB.promoSearchUrl = '/bin/safeway/promos.single.json?includeAds=Y&searchTerms=';
//AB.aemAislePath = '/bin/safeway/product/aemaisle';
AB.offerPath = '/bin/safeway/ecomgallery?offerProgram=ALL';
AB.j4uPath = '/abs/dvpub/web/j4u/api/offers/gallery/anonymous?storeId=1786';
AB.j4uPathAuthorized = '/abs/dvpub/web/j4u/api/offers/gallery?storeId=1953&amp;offerPgm=PD-CC';
AB.couponClipPath = '/abs/dvpub/web/j4u/api/offers/clip';
AB.getDeliveryAddressPath = '/apps/wcax-commons/clientlibs/clientlib-site/shop-commons/datastore/deliveryAddress.json';
AB.getDugStorePath = '/apps/wcax-commons/clientlibs/clientlib-site/shop-commons/datastore/dugStore.json';
AB.getEditCartOrderIdPath = '/bin/safeway/editcart/orderid';
AB.updatePendingOrderPath = '/bin/safeway/pendingorder/update';
AB.dealsFilter = '/bin/safeway/department';
AB.storeLocator = '/bin/safeway/store/locator';
AB.storeResolverPath = '/bin/safeway/store/resolver';
AB.offerDetailXfPath = '/content/experience-fragments/www/(banner)/en/generic_content/offer-detail-xf/offer-detail-xf/jcr:content/root/responsivegrid';
AB.offerDisclaimerXfPath = '/content/experience-fragments/www/Disclaimers/Offer-Disclaimer/offer-disclaimer.content.html';
// flag to check if localStorage is enabled or disabled
AB.isLSEnable = false;
AB.cookie = {};

// Unused Properties used in JS. Can be removed as part of JS clean up

AB.deliveryPreferencePagePath = '/content/shop/{banner}/en/welcome/delivery-preference';


var MEALS = MEALS || {};
MEALS.COMMON = {};
MEALS.CONFIGSERVICE = {};
AB.preInitializeObject = function () {
    AB.loadDynamicURL();

    Object.defineProperty(AB, 'userInfoPath', {
        configurable: true,
        get: function () {
            var userInfoPath = '/bin/safeway/unified/userinfo';
            userInfoPath += '?rand=' + (Math.floor((Math.random() * 1000000)));

            return userInfoPath + '&banner=' + SWY.CONFIGSERVICE.getResolvedBanner();
        }
    });

    Object.defineProperty(AB, 'isWWW', {
        configurable: true,
        get: function () {
            var bannerType = $('meta[name=bannerType]').attr("content");
            if (typeof bannerType !== 'undefined' && bannerType !== null) {
                if (bannerType === "www") {
                    return true;
                }
                else if (bannerType === "shop") {
                    return false;
                }
            }
            else {
                return false;
            }
        }
    });

    Object.defineProperty(AB, 'htmlProductDetailPath', {
        configurable: true,
        get: function () {
            var strProductDetailPath = '/shop/product-details.(bpn).html';
            return strProductDetailPath;
        }
    });

    Object.defineProperty(AB, 'htmlOfferDetailPathShop', {
        configurable: true,
        get: function () {
            return '/content/shop/' + SWY.CONFIGSERVICE.getResolvedBanner() + '/en/offer-details';
        }
    });

    Object.defineProperty(AB, 'htmlOfferDetailPathWww', {
        configurable: true,
        get: function () {
            return '/content/www/' + SWY.CONFIGSERVICE.getResolvedBanner() + '/en/justforu/offer-details';
        }
    });

    Object.defineProperty(AB, 'htmlRewardDetailPathWww', {
        configurable: true,
        get: function () {
            return '/content/www/' + SWY.CONFIGSERVICE.getResolvedBanner() + '/en/justforu/rewards/reward-details';
        }
    });

    Object.defineProperty(AB, 'signInLinkPath', {
        configurable: true,
        get: function () {
            return '/content/www/' + SWY.CONFIGSERVICE.getResolvedBanner() + '/en/account/sign-in.html';
        }
    });

    Object.defineProperty(AB, 'aisleHTMLPath', {
        configurable: true,
        get: function () {
            let content = '/content/shop/' + SWY.CONFIGSERVICE.getResolvedBanner() + '/en/aisles/jcr:content/root/responsivegrid/column_control/par_1/productaislelist';

            if (typeof AB.userInfo !== 'undefined' && typeof AB.userInfo.branchId !== 'undefined') {
                content += '.' + AB.userInfo.branchId + '.html';
            }
            else {
                const storeID = JSON.parse(AB.COMMON.getCookie('ECommTokens'));
                if (typeof storeID.branchId !== 'undefined' || typeof storeID.branchId !== undefined) {
                    content += '.' + storeID.branchId + '.html';
                }
            }

            return content;
        }
    });

    Object.defineProperty(AB, 'aisleHTMLTitlePath', {
        configurable: true,
        get: function () {
            let content = '/content/shop/' + SWY.CONFIGSERVICE.getResolvedBanner() + '/en/aisles/jcr:content/root/responsivegrid/column_control/par_1/simple_page_title';

            if (typeof AB.userInfo !== 'undefined' && typeof AB.userInfo.branchId !== 'undefined') {
                content += '.' + AB.userInfo.branchId + '.html';
            }
            else {
                const storeID = JSON.parse(AB.COMMON.getCookie('ECommTokens'));
                if (typeof storeID.branchId !== 'undefined' || typeof storeID.branchId !== undefined) {
                    content += '.' + storeID.branchId + '.html';
                }
            }

            return content;
        }
    });

    Object.defineProperty(AB, 'promoRule', {
        configurable: true,
        get: function () {
            return SWY.CONFIGSERVICE.getConfigforPromoDesc();
        }
    });

    Object.defineProperty(AB, 'storeRewardsMapping', {
        configurable: true,
        get: function () {
            return {	//@@ToDo - verify correct mapping for each to customFields in yext Get Locations response
                'hasGroceryDeliveryCF': '24995',
                'hasDUGCF': '23763',
                'hasRushDeliveryCF': '23762',
                'hasGroceryRewardsCF': '24424',
                'gasRewardsIdCF': '18784',
                'rewardsProgramIdCF': '18786',
                'partnerFuelLogoCF': '24491',
                'partnerMaxRedemptionCF': '31023',
                'ownMaxRedemptionCF': '31022'
            };
        }
    });

    Object.defineProperty(AB, 'j4uHttpOptions', {
        configurable: true,
        get: function () {
            var httpOptions = {
                'X-SWY_VERSION': '1.0',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'X-IBM-Client-Id': SWY.CONFIGSERVICE.getDatapowerConfig().clientId,
                'X-IBM-Client-Secret': SWY.CONFIGSERVICE.getDatapowerConfig().clientSecret,
                'Content-Type': 'application/json',
                'X-SWY_API_KEY': 'emjou'
            };
            if (AB.COMMON.authorize()) {
                httpOptions['X-swyConsumerDirectoryPro'] = AB.userInfo.SWY_SHOP_TOKEN;
                httpOptions['SWY_SSO_TOKEN'] = AB.userInfo.SWY_SHOP_TOKEN;
                httpOptions['x-swy-correlation-id'] = AB.COMMON.generateUUID(AB.userInfo.houseId, AB.userInfo.firstName)
            }else{
                httpOptions['x-swy-correlation-id'] = AB.COMMON.generateUUID()
            }
            return httpOptions;
        }
    });
	
	Object.defineProperty(AB, 'j4uHttpOptions11', {
        configurable: true,
        get: function () {
            var httpOptions = {
                'X-SWY_VERSION': '1.1',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'X-IBM-Client-Id': SWY.CONFIGSERVICE.getDatapowerConfig().clientId,
                'X-IBM-Client-Secret': SWY.CONFIGSERVICE.getDatapowerConfig().clientSecret,
                'Content-Type': 'application/json',
                'X-SWY_API_KEY': 'emjou'
            };
            if (AB.COMMON.authorize()) {
                httpOptions['X-swyConsumerDirectoryPro'] = AB.userInfo.SWY_SHOP_TOKEN;
                httpOptions['SWY_SSO_TOKEN'] = AB.userInfo.SWY_SHOP_TOKEN;
                httpOptions['x-swy-correlation-id'] = AB.COMMON.generateUUID(AB.userInfo.houseId, AB.userInfo.firstName)
            }else{
                httpOptions['x-swy-correlation-id'] = AB.COMMON.generateUUID()
            }
            return httpOptions;
        }
    });

    Object.defineProperty(AB, 'preUcaHttpOptions', {
        get: function () {
            var currentTime = new Date();

            return {
                'Accept': 'application/vnd.safeway.v1+json',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                'Content-Type': 'application/vnd.safeway.v1+json',
                'x-swy-client-id': 'web-portal',
                'x-swy-correlation-id': AB.COMMON.generateUUID(),
                'x-swy-date': currentTime,
                'Cache-Control': 'no-cache'
            };
        }
    });

    Object.defineProperty(AB, 'companionOffersxAPIHttpOptions', {
        configurable: true,
        get: function () {
            var httpOptions = {
                'Content-Type': 'application/vnd.safeway.v2+json',
                'Accept' : 'application/json',
                'X-SWY-APPLICATION-TYPE': 'web',
                'X-SWY_API_KEY': 'emjou',
                'X-SWY_VERSION': '1.1',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner()
            };

            if (AB.COMMON.authorize()) {
                httpOptions['Authorization'] = 'Bearer' + " " + AB.userInfo.SWY_SHOP_TOKEN;
            }
            return httpOptions;
        }
    });
    
    Object.defineProperty(AB, 'offerDetailxAPIHttpOptions', {
        configurable: true,
        get: function () {
            var httpOptions = {
                'X-SWY_VERSION': '1.1',
                'Content-Type': 'application/json',
                'X-SWY_API_KEY': 'emjou',
                'X-SWY-APPLICATION-TYPE': 'web'
            };

            if (AB.COMMON.authorize()) {
                httpOptions['Authorization'] = 'Bearer' + " " + AB.userInfo.SWY_SHOP_TOKEN;
            }
            return httpOptions;
        }
    });

};

AB.postInitializeObject = function () {

    Object.defineProperty(AB, 'ucaHttpOptionsPatch', {
        get: function () {
            var currentTime = new Date();

            return {
                'Accept': 'application/vnd.safeway.v1+json',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                'Content-Type': 'application/vnd.safeway.v1.merge-patch+json',
                'x-swy-client-id': 'web-portal',
                'x-swy-correlation-id': AB.COMMON.generateUUID(),
                'x-swy-date': currentTime,
                'Cache-Control': 'no-cache'
            };
        }
    });

    Object.defineProperty(AB, 'ucaHttpOptions', {
        get: function () {
            var currentTime = new Date();

            return {
                'Accept': 'application/vnd.safeway.v1+json',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                'Content-Type': 'application/vnd.safeway.v1+json',
                'x-swy-client-id': 'web-portal',
                'x-swy-correlation-id': AB.COMMON.generateUUID(),
                'x-swy-date': currentTime,
                'Cache-Control': 'no-cache'
            };
        }
    });

    Object.defineProperty(AB, 'ucaHttpOptionsUpdateProfile', {
            get: function () {
                var currentTime = new Date();

                return {
                    'Accept': 'application/vnd.safeway.v1+json',
                    'Authorization' : 'Bearer '+ AB.userInfo.SWY_SHOP_TOKEN,
                    'SWY_SSO_TOKEN' : AB.userInfo.SWY_SHOP_TOKEN,
                    'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                    'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                    'Content-Type': 'application/vnd.safeway.v1+json',
                    'x-swy-client-id': 'web-portal',
                    'x-swy-correlation-id': 'dc1ddfce-39ed-11e8-b467-0ed5f89f718b',
                    'x-swy-date': currentTime,
                    'Cache-Control': 'no-cache'
                };
            }
        });

    Object.defineProperty(AB, 'ucaHttpOptionsGetProfile', {
        get: function () {
            var currentTime = new Date();

            return {
                'Accept': 'application/vnd.safeway.v2+json',
                'Authorization' : 'Bearer '+ AB.userInfo.SWY_SHOP_TOKEN,
                'SWY_SSO_TOKEN' : AB.userInfo.SWY_SHOP_TOKEN,
                'x-swy-banner': SWY.CONFIGSERVICE.getResolvedBanner(),
                'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                'Content-Type': 'application/vnd.safeway.v2+json',
                'x-swy-correlation-id': 'dc1ddfce-39ed-11e8-b467-0ed5f89f718b',
                'x-swy-date': currentTime,
                'x-swy-client-name': 'web-portal',
                'Cache-Control': 'no-cache'
            };
        }
    });
    Object.defineProperty(AB, 'ucaCSMSHttpOptions', {
        get: function () {
            var currentTime = new Date();

            return {
                'Accept': 'application/vnd.safeway.v1+json',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                'x-swy-correlation-id': AB.COMMON.generateUUID(),
                'Accept-Encoding' : 'gzip, deflate',
                'Content-Type': 'application/vnd.safeway.v1+json',
                'x-swy-client-name': 'web-portal',
                'Cache-Control': 'no-cache'
            };
        }
    });
    Object.defineProperty(AB, 'ucaHttpOptionsV2', {
        get: function () {
            var currentTime = new Date();

            return {
                'Accept': 'application/vnd.safeway.v2+json',
                'x-swy-banner': SWY.CONFIGSERVICE.getResolvedBanner(),
                'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                'Content-Type': 'application/vnd.safeway.v2+json',
                'x-swy-client-name': 'web-portal',
                'x-swy-correlation-id': AB.COMMON.generateUUID(),
                'x-swy-date': currentTime,
                'Cache-Control': 'no-cache'

            };
        }
    });

    Object.defineProperty(AB, 'payeezyHttpOptions', {
        get: function () {
            var currentTime = new Date();
            return {
                'Accept': 'application/vnd.safeway.v1+json',
                'Authorization' : 'Bearer '+ AB.userInfo.SWY_SHOP_TOKEN,
                'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                'Content-Type': 'application/vnd.safeway.v1+json',
                'x-swy-correlation-id': AB.COMMON.generateUUID(),
                'Date': currentTime,
                'x-swy-client-name': 'web-portal',
                'Cache-Control': 'no-cache',
                'x-swy-request-id' : AB.COMMON.generateUUID()
            };
        }
    });

    Object.defineProperty(AB, 'kmsiHttpOptions', {
        get: function () {
            var options = {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                timeZoneName: 'short'
            };
            var dateKMSI = new Date();
            var dateKMSIstr = dateKMSI.toLocaleDateString("en-US", options);

            return {
                "Accept": "application/vnd.safeway.v1+json",
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                'X-IBM-Client-Id': SWY.CONFIGSERVICE.getDatapowerConfig().clientId,
                'X-IBM-Client-Secret': SWY.CONFIGSERVICE.getDatapowerConfig().clientSecret,
                'Content-Type': 'application/vnd.safeway.v1+json',
                'x-swy-client-id': 'web-portal',
                'x-swy-correlation-id': AB.COMMON.generateUUID(),
                'x-swy-date': dateKMSIstr,
                "Cache-Control": "yes"
            };
        }
    });

    Object.defineProperty(AB, 'ecommHttpOptions', {
        //Further more has to be added, it is not ready to use

        get: function () {

            return {
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'X-IBM-Client-Id': SWY.CONFIGSERVICE.getDatapowerConfig().clientId,
                'X-IBM-Client-Secret': SWY.CONFIGSERVICE.getDatapowerConfig().clientSecret,
                'SWY_SHOP_TOKEN': AB.userInfo.SWY_SHOP_TOKEN
            };
        }
    });

    Object.defineProperty(AB, 'emrbRewardsHeader', {
        //Further more has to be added, it is not ready to use

        get: function () {

            var headerVariables = {
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'X-IBM-Client-Id': SWY.CONFIGSERVICE.getDatapowerConfig().extClientId,
                'X-IBM-Client-Secret': SWY.CONFIGSERVICE.getDatapowerConfig().extClientSecret,
                'Cache-Control': 'no-cache'
            };
            if (AB.COMMON.authorize()) {
                headerVariables['SWY_SSO_TOKEN'] = AB.userInfo.SWY_SHOP_TOKEN;
            }
            return headerVariables;
        }
    });

    Object.defineProperty(AB, 'ecommHttpOptionsErums', {
        //Further more has to be added, it is not ready to use

        get: function () {

            return {
                "accept": "application/json",
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + AB.userInfo.SWY_SHOP_TOKEN,
                'ocp-apim-subscription-key': SWY.CONFIGSERVICE.erumsConfig["apim.key"]

            };
        }
    });

    Object.defineProperty(AB, 'deliverySubHttpOptions', {
        get: function () {
            return {
                'Authorization': 'Bearer ' + AB.userInfo.SWY_SHOP_TOKEN,
                'Accept': 'application/vnd.safeway.v1+json',
                'banner': SWY.CONFIGSERVICE.getResolvedBanner(),
                'X-IBM-Client-Id': SWY.CONFIGSERVICE.getDatapowerConfig().clientId,
                'X-IBM-Client-Secret': SWY.CONFIGSERVICE.getDatapowerConfig().clientSecret,
                'Content-Type': 'application/json',
                'x-swy-client-id': 'web-portal',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'cache-control': 'no-cache'
            };
        }
    });

    Object.defineProperty(AB, 'deliverySubJavaHttpOptions', {
            get: function () {
                return {
                    'Authorization': 'Bearer ' + AB.userInfo.SWY_SHOP_TOKEN,
                    'Accept': 'application/vnd.safeway.v1+json',
                    'banner': SWY.CONFIGSERVICE.getResolvedBanner(),
                    'ocp-apim-subscription-key': SWY.CONFIGSERVICE.erumsConfig["apim.key"],
                    'Content-Type': 'application/json',
                    'x-swy-client-id': 'web-portal',
                    'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                    'cache-control': 'no-cache'
                };
            }
        });

    Object.defineProperty(AB, 'ucaSubHttpOptions', {
        get: function () {
            var currentTime = new Date();

            return {
                'Authorization': 'Bearer ' + AB.userInfo.SWY_SHOP_TOKEN,
                'Accept': 'application/vnd.safeway.v1+json',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                'X-IBM-Client-Id': SWY.CONFIGSERVICE.getDatapowerConfig().clientId,
                'X-IBM-Client-Secret': SWY.CONFIGSERVICE.getDatapowerConfig().clientSecret,
                'Content-Type': 'application/vnd.safeway.v1+json',
                'x-swy-client-id': 'web-portal',
                'x-swy-correlation-id': AB.COMMON.generateUUID(),
                'Cache-Control': 'no-cache'
            };
        }
    });

    Object.defineProperty(AB, 'companionOffersxAPIHttpOptions', {
        configurable: true,
        get: function () {
            var httpOptions = {
                'Content-Type': 'application/vnd.safeway.v2+json',
                'Accept' : 'application/json',
                'X-SWY-APPLICATION-TYPE': 'web',
                'X-SWY_API_KEY': 'emjou',
                'X-SWY_VERSION': '1.1',
                'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner()
            };

            if (AB.COMMON.authorize()) {
                httpOptions['Authorization'] = 'Bearer' + " " + AB.userInfo.SWY_SHOP_TOKEN;
            }
            return httpOptions;
        }
    });

    Object.defineProperty(AB, 'lastOrderErumsHttpOptions', {
        configurable: true,
        get: function () {
            var httpOptions = {
                'ocp-apim-subscription-key': SWY.CONFIGSERVICE.erumsConfig["apim.key"]
            };

            if (AB.COMMON.authorize()) {
                httpOptions['Authorization'] = 'Bearer' + " " + AB.userInfo.SWY_SHOP_TOKEN;
            }
            return httpOptions;
        }
    });

    Object.defineProperty(AB, 'xAPIstoreResolverHttpOptions', {
            configurable: true,
            get: function () {
                var httpOptions = {
                		'ocp-apim-subscription-key': AB.wcaxXapiApimKey
                };

                return httpOptions;
            }
        });

    Object.defineProperty(AB, 'ucaDecryptionApiHttpOptions', {
            configurable: true,
            get: function () {
                var httpOptions = {
                    'Content-Type': 'application/vnd.safeway.v2+json',
                    'Accept' : 'application/vnd.safeway.v2+json' ,
                     'x-swy-client-id' : 'web-portal',
                     'x-swy-correlation-id' :AB.COMMON.generateUUID(),
                     'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                };
                return httpOptions;
            }
        });

    Object.defineProperty(AB, 'j4UEligibilityOfferOption', {
                configurable: true,
                get: function () {
                    var httpOptions = {
                        'Accept' : 'application/vnd.safeway.v1+json' ,
                        'x-swy-correlation-id' :AB.COMMON.generateUUID(),
                    };
                    return httpOptions;
                }
         });

    Object.defineProperty(AB, 'ucaHttpOptionsV2UpdatedHeader', {
            get: function () {
                var currentTime = new Date();

                return {
                    'Accept': 'application/vnd.safeway.v2+json',
                    'X-SWY_BANNER': SWY.CONFIGSERVICE.getResolvedBanner(),
                    'Ocp-Apim-Subscription-Key' : SWY.CONFIGSERVICE.getDatapowerConfig().cncSubscriptionKey,
                    'Content-Type': 'application/vnd.safeway.v2+json',
                    'x-swy-client-id': 'web-portal',
                    'x-swy-correlation-id': AB.COMMON.generateUUID(),
                    'x-swy-date': currentTime,
                    'Cache-Control': 'no-cache'
                };
            }
        });
};

AB.loadDynamicURL = function () {
    var pcfFlag = SWY.CONFIGSERVICE.nimbusConfig.usePcfEndpoint;
    //J4U data power URL
    var dpConf = SWY.CONFIGSERVICE.getDatapowerConfig();
    var baseUrl = dpConf.clientHost + dpConf.datapowerBasePath;
    var xAPIBaseUrl = dpConf.clientHost + dpConf.datapowerxAPIBasePath;
    var apimJ4uBaseUrl = dpConf.clientHost + dpConf.apimPcfJ4uBasePath;
    var extBaseUrl = dpConf.clientHost + dpConf.extBasePath;
    var j4uBaseUrl = pcfFlag ? apimJ4uBaseUrl : baseUrl;
    var j4uUrlPrefix = pcfFlag ? '' : '/web/j4u/api';
    // cncCtx Path
    var cncCtxBaseURL = dpConf.clientHost + dpConf.cncCtxPath;
    var cncServiceBasePath = dpConf.clientHost + dpConf.cncServiceBasePath;

    AB.offerGuestPath = j4uBaseUrl + j4uUrlPrefix + '/ecomgallery/anonymous';
    AB.offerRegisterPath = j4uBaseUrl + j4uUrlPrefix + '/ecomgallery';
    AB.offerDetailPath = j4uBaseUrl + j4uUrlPrefix + '/offer';
    AB.offerDetailxAPIPath = xAPIBaseUrl + '/xapi/offers';
    AB.offerPersonalizedContent = j4uBaseUrl + j4uUrlPrefix + "/personalizedcontent";
    AB.couponClipPath = j4uBaseUrl + j4uUrlPrefix + '/offers/clip';
    AB.couponUnclipPath = j4uBaseUrl + j4uUrlPrefix + '/offers/unclip';
    AB.myListPath = j4uBaseUrl + j4uUrlPrefix + '/mylist';
    AB.myListCountPath = j4uBaseUrl + j4uUrlPrefix + '/mylist/count';
    AB.rewardPath = j4uBaseUrl + j4uUrlPrefix + '/grocery/rewards/offers';
    //AB.rewardsHeaderSummaryPath = baseUrl + '/web/j4u/api/grocery/rewards';
    AB.rewardsHeaderSummaryPath = baseUrl + '/api/uca/customers/{customerId}/rewards';
    AB.xAPIgalleryPath = xAPIBaseUrl + '/xapi/offers/companiongalleryoffer';
    AB.instantAllocation = xAPIBaseUrl + '/xapi/offers/instantAllocationGallery';
    AB.galleryGuestPath = j4uBaseUrl + j4uUrlPrefix + '/offers/gallery/anonymous';
    AB.galleryRegisterPath = j4uBaseUrl + j4uUrlPrefix + '/offers/gallery';
    AB.infiniteScroll = 'client';
    AB.selectedRewardsPath = j4uBaseUrl + j4uUrlPrefix + '/grocery/rewards/mylist';
    AB.hiddenEventsPath = j4uBaseUrl + j4uUrlPrefix + '/CC/offer/allocations?view=campaign&_dc=1537490356206&';
    AB.eligibleOfferDetailxAPIPath = xAPIBaseUrl + '/xapi/offers/event/new_registration/offers';

    //UCA Configuration
    AB.resetPasswordPath = cncServiceBasePath + '/api/uca/pwd';
    AB.csmsResetPasswordPath = cncCtxBaseURL + '/csmsservice/api/csms/pwd/token';
    AB.rewardsInfoPath = cncServiceBasePath + '/api/uca/customers/{customerId}/rewards';
    AB.currentOrderPath = baseUrl + '/web/ecom/api/order';
    AB.cancelOrderPath = baseUrl + '/web/ecom/api/orderdelete/';
    AB.deliveryAddressPath = cncServiceBasePath + '/api/uca/customers/{customerId}/addresses';
    AB.storeAddressPath = cncServiceBasePath + '/api/uca/customers/{customerId}/stores';
    AB.profileAddressPath = cncServiceBasePath + '/api/uca/customers/{customerId}/profile';
    AB.getProfileFullInfo = cncServiceBasePath + '/api/uca/customers/{customerId}/profile?full=y';
    AB.fullRegPath = cncServiceBasePath + '/api/uca/customers/register';
    AB.stepupRegPath = cncServiceBasePath + '/api/uca/customers/register/stepup';
    AB.getProfileInfo = cncServiceBasePath + '/api/uca/customers';
    AB.getprofileAddressPath = cncServiceBasePath + '/api/uca/customers/{customerId}/profile';
    AB.shortRegPath = cncServiceBasePath + '/api/uca/customers/register';
    AB.subscriptionDetailsPath = cncServiceBasePath + '/api/uca/customers/{customerId}/subscriptions';
    AB.userProfilePath = cncServiceBasePath + '/api/uca/customers/{customerId}/profile';
    AB.loyaltyPartnersPath = cncServiceBasePath + '/api/uca/customers/{customerId}/loyaltypartners';
    AB.getLocationinfo = baseUrl + '/location/api/accounts/me/locations/geosearch?api_key=843b2f10cedf121969b2e44eab5f15aa&amp;v=20180530&amp;location=';
    AB.kmsiPath = cncServiceBasePath + '/api/uca/customers/kmsi';
    AB.anonymousUnsubscribe = cncServiceBasePath + '/api/uca/unsubscribe';
    AB.pendingOrderMessage = baseUrl + '/web/ecom/api/ecomdb/commdata';
    AB.fulfillmentPreferences = cncServiceBasePath + '/api/uca/customers/{customerId}/preferences/fulfillment';
    AB.erumsApiOrdersSummary = SWY.CONFIGSERVICE.erumsConfig["orders.service.endpoint"] + '/orders/summary';
    AB.erumsApiCancelOrder = SWY.CONFIGSERVICE.erumsConfig["orders.service.endpoint"] + '/orders/';
    AB.reserveTimePathErums = SWY.CONFIGSERVICE.erumsConfig["erums.slot.service.endpoint"]+'/reservationDetails/';
    AB.erumsOrderDelivery = SWY.CONFIGSERVICE.erumsConfig["orders.service.endpoint"] + '/orders/';
    AB.getZipCodeInfo = baseUrl + '/api/uca/cities/{zipCode}';
    AB.profileTokenDecryptionService = cncServiceBasePath + '/api/uca/customers/profile/token';
    AB.creditCardInfoPath = cncCtxBaseURL + '/cwmsservice/api/cwms/customers/{customerId}/tenders';

    //Delivery Subscription URL's
    AB.deliverySubDotnetPaymentURL = '/ecom/modern1/subs/enrollment?subscriptioncode=';
    AB.deliverySubAemPaymentURL = '/delivery-subscription/payment.html?subscriptioncode=';

    //Stacking Limit URL
    AB.stackingLImitAPIPath = extBaseUrl + '/rewardshub/stackinglimit';

    //Get Rewards Summary
    AB.emrbGetRewardSummary = extBaseUrl + '/rewardshub/getRewards';

    AB.storeLocatorDerivedEcom = xAPIBaseUrl + '/api/services/locator/store/derivedecom';
};

(function () {
    this.SWY_SHOP_TOKEN = '';
    this.banner = '';
    this.branchId = '';
    this.deliveryAddress = '';
    this.deliveryPreference = '';
    this.displayableBanner = '';
    this.driveUpAndGoIsEnabled = '';
    this.extendedType = '';
    this.orderCount = '';
    this.pickupAddress = '';
    this.registered = '';
    this.unattendedDeliveryIsEnabled = '';
    this.userId = '';
    this.userType = '';
    this.zipcode = '';
    this.houseId = '';
    this.clubCard = '';
    this.boxTopAuth = false;
    this.firstName = '';
    this.isInNoServiceArea = '';
    this.orderNumber = '';
    this.expireTime = '';
    this.earlyInitialize = true;
    this.resolveEcomStore = false;
    this.dprefVisited = '';
    this.userData = {};
    this.preferenceMode = '';
	this.selectionType = '';
    //J4U
    this.j4u = {};
    this.j4u.zipcode = '';
    this.j4u.storeId = '';
    this.j4u.isStoreIdEmpty = false;
    this.j4u.userData = {};
    //Object for store specific data
    this.j4u.storeData = {};
    //store specific rewards
    this.j4u.storeData.storeRewards = {};
    this.j4u.storeData.storeRewards.storeId = '';
    this.j4u.storeData.storeRewards.hasGroceryDelivery = '';
    this.j4u.storeData.storeRewards.hasDUG = '';
    this.j4u.storeData.storeRewards.hasRushDelivery = '';
    this.j4u.storeData.storeRewards.hasGroceryRewards = '';
    this.j4u.storeData.storeRewards.gasRewardsId = '';
    this.j4u.storeData.storeRewards.rewardsProgramId = '';
    this.j4u.storeData.storeRewards.partnerFuelLogo = '';
    this.j4u.storeData.storeRewards.partnerMaxRedemption = '';
    this.j4u.storeData.storeRewards.ownMaxRedemption = '';
    this.j4u.storeData.storeLocation = {};
    var emptyStoreId = ['',0,undefined,'undefined',null,"0","PRIMARY","null"];
    // Geolocation object.
    this.geolocation = {'zipcodeJ4U': null, 'storeIDJ4U': null, 'zipcodeSHOP': null, 'storeIDSHOP': null, 'storeData': null};
    this.geoYextAJAXCall = '';
    this.triggerUserInfoAJAXCall = false;

    this.prepareSharedInfo = function() {
        var sharedUserInfo = null;

        sharedUserInfo = AB.COMMON.getCookie('SWY_SHARED_SESSION_INFO');
        if (sharedUserInfo != "") {
            try {
                sharedUserInfo = unescape(sharedUserInfo);
                sharedUserInfo = JSON.parse(sharedUserInfo);
            }catch(e) {
                console.error("sharedInfo: Parsing failed", e);
                sharedUserInfo = {'info':''};
            }
            AB.userInfo.mapSharedInfo(sharedUserInfo);
        }
    }

    this.mapSharedInfo = function (sharedInfo) {
        if (!AB.COMMON.isEmpty(sharedInfo.info)) {
        	if ( !AB.COMMON.isEmpty(sharedInfo.info.COMMON) ) {
        		// map dprefVisited value from session cookie COMMON section
        		if ( sharedInfo.info.COMMON.dprefVisited !== undefined &&  sharedInfo.info.COMMON.dprefVisited !== null ){
        			this.dprefVisited = sharedInfo.info.COMMON.dprefVisited;
                }
                if (sharedInfo.info.COMMON.preference) {
                    this.preferenceMode = sharedInfo.info.COMMON.preference;
                }
				if (sharedInfo.info.COMMON.Selection) {
					this.selectionType = sharedInfo.info.COMMON.Selection;
				}
        		this.userType = (sharedInfo.info.COMMON.userType !== undefined) ? sharedInfo.info.COMMON.userType : '';

        		if(sharedInfo.info.COMMON.isClosed) {
        		    this.isClosed = sharedInfo.info.COMMON.isClosed === "true" ? true : false;
        		}
        	}
            if (!AB.COMMON.isEmpty(sharedInfo.info.SHOP)) {
                var shopSharedInfo = sharedInfo.info.SHOP;

                this.branchId = (shopSharedInfo.storeId !== undefined) ? shopSharedInfo.storeId : '';

                //check if pending order store number exists
                if (AB.COMMON.checkPendingOrder()) {
                    this.orderNumber = AB.COMMON.getCookie('OrderNumber');
                    // get .NET pending order BranchNumber cookie
                    var pendingOrderBranchNumber = AB.COMMON.getCookie('BranchNumber');
                    if (pendingOrderBranchNumber != undefined && pendingOrderBranchNumber != null && pendingOrderBranchNumber != '') {
                        // override user info branch id with the branch number (needed for aisle url)
                        this.branchId = pendingOrderBranchNumber;
                    }
                }
                else {
                    this.orderNumber = '';
                }

                this.zipcode = (shopSharedInfo.zipcode !== undefined) ? shopSharedInfo.zipcode : '';

                if (shopSharedInfo.banner == undefined || shopSharedInfo.banner == null || shopSharedInfo.storeId == '') {
                    this.banner = SWY.CONFIGSERVICE.getResolvedBanner();
                } else {
                    this.banner = shopSharedInfo.banner;
                }
                if (shopSharedInfo.userData) {
                    this.expireTime = (shopSharedInfo.userData.expireTime !== undefined) ? shopSharedInfo.userData.expireTime : '';
                }

                this.userData = (shopSharedInfo.userData !== undefined) ? shopSharedInfo.userData : {};
            }
            if (!AB.COMMON.isEmpty(sharedInfo.info.J4U)) {
                var j4uSharedInfo = sharedInfo.info.J4U;
                this.j4u.zipcode = (j4uSharedInfo.zipcode !== undefined) ? j4uSharedInfo.zipcode : '';
                
                this.j4u.storeId = (j4uSharedInfo.storeId !== undefined) ? j4uSharedInfo.storeId : '';
                // check for pending order storeId
                if ( AB.COMMON.checkForEditOrderMode() ) {
                	let orderStoreId = AB.COMMON.getCookie('BranchNumber')
                	if ( this.j4u.storeId !== orderStoreId ) {
                		this.j4u.storeId = orderStoreId;
                	}
                }
                
                this.j4u.userData = (j4uSharedInfo.userData !== undefined) ? j4uSharedInfo.userData : {};
            }
            if (!AB.COMMON.isEmpty(sharedInfo.info.COMMON)) {
                var shopSharedInfoCommon = sharedInfo.info.COMMON; 
                this.houseId = (shopSharedInfoCommon.houseId !== undefined) ? shopSharedInfoCommon.houseId : '';
                this.clubCard = (shopSharedInfoCommon.clubCard !== undefined) ? shopSharedInfoCommon.clubCard : '';
            }
        }
    };

    this.mapStoreLocationFromLocalStorage = function () {
        var storeData = localStorage.getItem('storeData');
        if (storeData) {
            var storeDataObj = JSON.parse(unescape(storeData));
            if (!AB.COMMON.isEmpty(storeDataObj.storeLocation)) {
                for(var i in storeDataObj.storeLocation) {
                    AB.userInfo.j4u.storeData.storeLocation[i] = storeDataObj.storeLocation[i];
                }
                AB.userInfo.j4u.storeId = AB.userInfo.j4u.storeData.storeLocation.storeId;
            }
        }
    };

    this.resolveDisplayableBanner = function () {
        this.banner = SWY.CONFIGSERVICE.resolvedBanner;
        this.displayableBanner = SWY.CONFIGSERVICE.displayableBanner;
    };

    
    this.prepareUserInfo = function(objResponse) {
        try {
            if (typeof objResponse == 'string') {
                AB.userInfo.mapUserInfo(JSON.parse(objResponse));
                PastOrdersComp.init();
            }
        }
        catch(e) {
            console.error("Userinfo: Parsing failed", e);
        }
    }

    this.mapUserInfo = function (userInfo) {
        if (!AB.COMMON.isEmpty(userInfo)) {
            if((userInfo.clubCard !== undefined)) {
                this.clubCard =  userInfo.clubCard;
            }
            if((userInfo.houseId !== undefined)) {
                this.houseId =  userInfo.houseId;
            }
            //Each property we have checked the condition each property because do not want to expose the user info if user is anonymous
            /*if((userInfo.branchId !== undefined)) {
                this.branchId =  userInfo.branchId;
            }*/
            if ((userInfo.SWY_SHOP_TOKEN !== undefined)) {
                this.SWY_SHOP_TOKEN = userInfo.SWY_SHOP_TOKEN;
            }
            if ((userInfo.customerId !== undefined)) {
                this.customerId = userInfo.customerId;
            }
            if ((userInfo.deliveryAddress !== undefined)) {
                this.deliveryAddress = userInfo.deliveryAddress;
            }
            if ((userInfo.deliveryPreference !== undefined)) {
                this.deliveryPreference = userInfo.deliveryPreference;
            }
            if ((userInfo.driveUpAndGoIsEnabled !== undefined)) {
                this.driveUpAndGoIsEnabled = userInfo.driveUpAndGoIsEnabled;
            }
            if ((userInfo.orderCount !== undefined)) {
                this.orderCount = userInfo.orderCount;
            }
            if ((userInfo.extendedType !== undefined)) {
                this.extendedType = userInfo.extendedType;
            }
            if ((userInfo.pickupAddress !== undefined)) {
                this.pickupAddress = userInfo.pickupAddress;
            }
            if ((userInfo.registered !== undefined)) {
                this.registered = userInfo.registered;
            }
            if ((userInfo.userId !== undefined)) {
                this.userId = userInfo.userId;
            }
            if ((userInfo.firstName !== undefined)) {
                this.firstName = userInfo.firstName;
            }
            if ((userInfo.unattendedDeliveryIsEnabled !== undefined)) {
                this.unattendedDeliveryIsEnabled = userInfo.unattendedDeliveryIsEnabled;
            }
            if (userInfo.isInNoServiceArea !== undefined) {
                this.isInNoServiceArea = userInfo.isInNoServiceArea;
            }
        }
    };

    _getAppBranchId = function (ctx) {
        if(ctx.j4u.storeId){
            return ctx.j4u.storeId;
        }
        return ctx.branchId;
    };

    this.getValue = function (placeHolder) {
        let strValue;
        switch (placeHolder) {
            case 'appBranchId':
                strValue = _getAppBranchId(this);
                break;
            default:
                strValue = AB.userInfo[placeHolder];
                break;
        }
        return strValue;
    };

    this.updateTokenRefreshProperty = function() {
        var sharedInfo = SWY.CONFIGSERVICE.getCookie('SWY_SHARED_SESSION_INFO');

        if (sharedInfo != "") {
            sharedInfo = unescape(sharedInfo);
            sharedInfo = JSON.parse(sharedInfo);

            if(!AB.COMMON.isEmpty(sharedInfo.info)) {
                if (!AB.COMMON.isEmpty(sharedInfo.info.SHOP)) {
                    var shopSharedInfo = sharedInfo.info.SHOP;

                    this.userType = (shopSharedInfo.userType !== undefined) ? shopSharedInfo.userType : '';

                    if (shopSharedInfo.userData) {
                        this.expireTime = (shopSharedInfo.userData.expireTime !== undefined) ? shopSharedInfo.userData.expireTime : '';
                    }
                }

                if (!AB.COMMON.isEmpty(sharedInfo.info.J4U)) {
                    var j4uSharedInfo = sharedInfo.info.J4U;
                    this.j4u.userType = (j4uSharedInfo.userType !== undefined) ? j4uSharedInfo.userType : '';
                }
            }
        }
    }


    this.updateSessionCookies = function(sharedSessionInfoObj) {
        // Set new cookie for Anonymous users to be Guest with default zipcode. Custom use with seconds and minutes.
        var d = new Date();
        var isOktaExpiration = 'true';
        d.setTime(d.getTime() + (SWY.CONFIGSERVICE.oktaConfig.maxAge * 1000));

        if (SWY.CONFIGSERVICE.oktaConfig.maxAge > 0) {
            var expires = 'expires=' + d.toUTCString();
            SWY.CONFIGSERVICE.setCookie('SWY_SHARED_SESSION_INFO', encodeURIComponent(JSON.stringify(sharedSessionInfoObj)), expires, isOktaExpiration);
        }
        else {
            SWY.CONFIGSERVICE.setCookie('SWY_SHARED_SESSION_INFO', encodeURIComponent(JSON.stringify(sharedSessionInfoObj)));
        }
    }


    /**
     * This function is used to guest session setting, where it decides what store / preference to
     * give the user based on what information it finds in the cookies.
     * 
     */
    this.establishUnifiedGuestSession = function () {
        if ( SWY.deepLinkData.info ) {
        	let deepLinkInfo = SWY.deepLinkData.info;
        	
        	// set session with deep link values
        	AB.userInfo.generateEstablishmentSession(deepLinkInfo.J4U.zipcode ,
													 deepLinkInfo.J4U.storeId , 
													 deepLinkInfo.SHOP.zipcode,
												     deepLinkInfo.SHOP.storeId , 
							                         deepLinkInfo.COMMON.preference , 
                                                     deepLinkInfo.COMMON.Selection);
        }
        else if (SWY.ENFORCEMENTUTILS.isPreviouslyLoggedInWWW()) {
            if (emptyStoreId && (emptyStoreId.indexOf(SWY.previousLogin.info.SHOP.storeId) == -1) && (emptyStoreId.indexOf(SWY.previousLogin.info.J4U.storeId) == -1) ) {
            	let previousLoginInfo = SWY.previousLogin.info;
            	
                // set session with previous login values
                //When setting session with abs_previouslogin cookie set selection type always as user so guest users won't see default behaviour.
            	AB.userInfo.generateEstablishmentSession(previousLoginInfo.J4U.zipcode,
														 previousLoginInfo.J4U.storeId, 
													     previousLoginInfo.SHOP.zipcode,
									 					 previousLoginInfo.SHOP.storeId,
												         previousLoginInfo.COMMON.preference,
													     'user');
            } else {
            	let storeConfig = SWY.CONFIGSERVICE.storeResolutionConfig;
            	
            	// set session with banner default values
            	AB.userInfo.generateEstablishmentSession(storeConfig.bannerDefaultZipcode,
 														 storeConfig.bannerDefaultStoreId,
														 null, 
													     null,
								  				 	     'J4U',
														 'default');
            }
        } else {
        	let storeConfig = SWY.CONFIGSERVICE.storeResolutionConfig;
            
        	// set session with banner default values
           	AB.userInfo.generateEstablishmentSession(storeConfig.bannerDefaultZipcode,
												     storeConfig.bannerDefaultStoreId,
													 null,
													 null,
													 'J4U',
												     'default');  
        }
    };
    
    
    /**
     * This function takes the values decided by this.establishUnifiedGuestSession() , and sends them to the 
     * common updateUserSession() method in a json object
     * 
     */
    this.generateEstablishmentSession = function(j4uZip , j4uStoreId , shopZip , shopStoreId , preference , selection) {
    	let swySessionObj 	 = { 'info': { 'COMMON': {}, 'J4U': {}, 'SHOP': {} } };
    	
    	swySessionObj.info.COMMON.Selection 	= selection;
    	swySessionObj.info.COMMON.preference 	= preference;
    	swySessionObj.info.COMMON.userType 		= 'G';
    	
    	if ( preference == 'J4U') {
    		swySessionObj.info.COMMON.zipcode 	= j4uZip;
    	} else {
    		swySessionObj.info.COMMON.zipcode 	= shopZip;
    	}

		swySessionObj.info.COMMON.banner 		= AB.userInfo.banner;
    	
    	swySessionObj.info.J4U.zipcode			= j4uZip;
    	swySessionObj.info.J4U.storeId			= j4uStoreId.toString();
    	
    	if ( shopZip === null ) {
    		swySessionObj.info.SHOP.zipcode		= j4uZip;
        	swySessionObj.info.SHOP.storeId		= j4uStoreId.toString();    	
    	} else {
    		swySessionObj.info.SHOP.zipcode		= shopZip; 
        	swySessionObj.info.SHOP.storeId		= shopStoreId.toString();
    	}	 	
    	    	   	
    	// setting base window AB values
        AB.userInfo.userType 			= 'G';
        AB.userInfo.zipcode 			= swySessionObj.info.SHOP.zipcode;
        AB.userInfo.branchId 			= swySessionObj.info.SHOP.storeId;
        AB.userInfo.userData 			= swySessionObj.info.SHOP.userData;
        AB.userInfo.preferenceMode 		= preference;

        AB.userInfo.j4u.zipcode 		= swySessionObj.info.J4U.zipcode;
        AB.userInfo.j4u.storeId 		= swySessionObj.info.J4U.storeId;

        // Call common method to set session cookies
        AB.COMMON.updateUserSession(swySessionObj);   	    	
    };

}).call(AB.userInfo);
(function () {
    // public variable(s)
    this.queryParams = {};
    this.referrerUrl = null;
    // private variable(s)
    var _parsedQueryParams = null;

    /**
     * Initializes query string config service.
     */
    this.init = function () {
        // declare function variable(s)
    	//var savedParams = decodeURIComponent(SWY.ENFORCEMENT.getCookie('ECommMarketing'));
        var currentParams = window.location.search;
        var marketingParams = null;
        var funcName = 'SWY.QUERYSTRING.init';

        console.debug(funcName + ' ENTRY');
        // check if marketing params already stored in the cookie
       /* if (savedParams) {
        	currentParams = savedParams;
        }*/
        // check if query string exists in the URL
        if (currentParams) {
        	if (currentParams.indexOf('?') == 0) {
                // remove ? from the query string
                currentParams = currentParams.substring(1);
        	}
            console.debug(funcName + ' currentParams=' + currentParams);
            // check if there's at least one query parameter
            if (currentParams.length > 0) {
                // parse query string to string array
                _parsedQueryParams = this.parseQueryString(currentParams);
                console.debug(funcName + ' _parsedQueryParams=' + _parsedQueryParams);
                // filter url parameters with marketing parameters
                this.filterParameters(_parsedQueryParams);
            }
        }
        else {
        	// if there's no marketing email ids being passed as params, then add just the referer
        	SWY.QUERYSTRING.addReferrerToQueryParams(false);
        }
        // check if there's at least one marketing parameter
        /*if (this.queryParams) {
        	// build query string for marketing parameters and encode the whole string
        	marketingParams = encodeURIComponent(this.buildUrlParameters());
            // set ECommMarketing cookie
            SWY.ENFORCEMENT.setCookie('ECommMarketing', marketingParams, 0);
        }     */
        console.debug(funcName + ' EXIT: queryParams=' + this.queryParams);
    };
    
    this.checkParams = function (params) {
    	// declare function variable(s)
    	var queries = null;
    	var temp = null;
    	var name = '';
    	var value = '';
    	var nvp = '';
    	var queryParams = '';
    	
    	// check if r parameter exists, then encode it
    	if (params) {
    		queries = params.split('&');
    		for (i = 0, l = queries.length; i <l; i++) {
    			temp = queries[i].split('=');
				name = temp[0];
				value = queries[i].substr(name.length + 1);
    			if (name == 'r') {
    				value = encodeURIComponent(value);
    			}
    			nvp = name + '=' + value;
    			if (i == 0) {
    				queryParams = nvp;
    			}
    			else {
    				queryParams += '&' + nvp;
    			}
    		}
    	}
    	
    	return queryParams;
    }

    /**
     * Parses query string into a string array.
     *
     * @param {String} currentParams        the current request query string
     */
    this.parseQueryString = function (currentParams) {
        // declare function variable(s)
        var queries = null;
        var temp = null;
        var params = {};
        var val = '';
        var funcName = 'SWY.QUERYSTRING.parseQueryString';

        console.debug(funcName + ' ENTRY: currentParams=' + currentParams);
        // check if there's at least one request url parameter
        if (currentParams) {
            // split into key/value pairs
            queries = currentParams.split('&');
            // loop through each parameter
            for (i = 0, l = queries.length; i < l; i++) {
                // split parameter into name and value pair
                temp = queries[i].split('=');
                // get parameter value
                val = queries[i].substr(temp[0].length + 1);
                // set it to a parameter list
                params[temp[0]] = val;
            }
        }
        console.debug(funcName + ' EXIT: params=' + params);

        return params;
    };

    /**
     * Filter current request parameters with only marketing parameters.
     *
     * @param {String[]} parsedQueryParams            the list of request parameters
     */
    this.filterParameters = function (parsedQueryParams) {
        var idx = -1;
        var paramName = null;
        var paramValue = null;
        var funcName = 'SWY.QUERYSTRING.parseQueryString';

        console.debug(funcName + ' ENTRY: parsedQueryParams=' + parsedQueryParams);
        if (parsedQueryParams) {
            // loop through each parsed query param
            for (paramName in parsedQueryParams) {
                // get parameter value
                paramValue = parsedQueryParams[paramName];
                // check if query string parameter is in the query string defined list
                if (this.isParameterInList(paramName)) {
                    // add key and value to the query string list (AB.queryParams)
                    this.queryParams[paramName] = paramValue;
                }
            }
        }
        SWY.QUERYSTRING.addReferrerToQueryParams(false);
        console.debug(funcName + ' EXIT: queryParams=' + this.queryParams);
    };
    
    /**
     * Add referer to global query params.
     * 
     * @param {Boolean}		the flag to determine if referer query string needs to be included
     */
    this.addReferrerToQueryParams = function(includeQueryString) {
    	var referer = '';
        var funcName = 'SWY.QUERYSTRING.addReferrerToQueryParams';

        // get page referrer
        referer = SWY.QUERYSTRING.getReferrer(includeQueryString);
        // check if r is already added and referrer exists
        if (!this.queryParams['r'] && referer) {
            this.queryParams['r'] = referer;
        }    	
    }

    /**
     * Check if parameter name is in the list of defined marketing parameter names.
     *
     * @param {String} paramName            the url parameter name
     */
    this.isParameterInList = function (paramName) {
        var queryStringConfig = null;
        var groupParamName = null;
        var paramNames = null;
        var idx = -1;
        var isInList = false;

        if (paramName) {
            queryStringConfig = SWY.CONFIGSERVICE.queryStringConfig;
            if (queryStringConfig) {
                for (groupParamName in queryStringConfig) {
                    if (isInList) {
                        break;
                    }
                    if (queryStringConfig.hasOwnProperty(groupParamName)) {
                        paramNames = queryStringConfig[groupParamName];
                        for (idx in paramNames) {
                            console.debug('parameter name == ' + paramNames[idx]);
                            if (paramNames[idx] === paramName) {
                                isInList = true;
                                break;
                            }
                        }
                    }
                }
            }
        }

        return isInList;
    };

    /**
     * Build URL parameters only to include marketing campaign parameters.
     */
    this.buildUrlParameters = function () {
        // declare function variable(s)
    	//var savedParams = decodeURIComponent(SWY.ENFORCEMENT.getCookie('ECommMarketing'));
        var paramName = null;
        var paramValue = null;
        var paramNameValuePair = null;
        var queryString = '';

//        // check if marketing params are saved in the cookie
//        if (savedParams) {
//        	queryString = savedParams;
//        } // check if there's at least one query string parameter
//        else
            if (this.queryParams) {
            // loop through each query param
            for (paramName in this.queryParams) {
                // get parameter value
                paramValue = this.queryParams[paramName];
                // generate parameter name value pair
                paramNameValuePair = this.generateUrlParameter(paramName, paramValue);
                // check if generated url parameter string has at least one parameter
                if (queryString) {
                    // add &
                    queryString = queryString + '&';
                }
                // add name value pair
                queryString = queryString + paramNameValuePair;
            }
        }

        return queryString;
    };

    /**
     * Generate URL parameter with name and value pair.
     *
     * @param name {String}            the parameter name
     * @param value {String}        the parameter value
     */
    this.generateUrlParameter = function (name, value) {
        // declare function variable(s)
        var nameValuePair = null;

        if (name) {
            // create a name value pair as equal sign is the delimiter
            nameValuePair = name + '=' + value;
        }

        return nameValuePair;
    };

    /**
     * Get current URI with query string parameters.
     */
    this.getCurrentURI = function (includeQueryString) {
        // declare function variable(s)
        var redirectUri = null;

        // get current path name and search query strings
        redirectUri = location.pathname;
        if (includeQueryString) {
        	redirectUri += window.location.search;
        }

        return redirectUri;
    };

    /**
     * Get current URI adding marketing campaign query parameters.
     */
    this.getURIWithMarketingParams = function () {
        // declare function variable(s)
        var redirectUri = null;
        var marketingParams = null;
        
        // generate query string with marketing parameters
        marketingParams = SWY.QUERYSTRING.buildUrlParameters();
        // if marketing params exist, then generate uri with marketing params
        if (marketingParams) {
        	redirectUri = this.getCurrentURI(false);
        	redirectUri += '?' + marketingParams;
        }
        else {
            // get current uri without marketing params
            redirectUri = this.getCurrentURI(true);        	
        }

        return redirectUri;
    };
    
    /**
     * Check if marketing or analytics campaign ids being passed to the URL.
     */
    this.hasMarketingParams = function () {
        // check if there's at least one campaign id being passed to the URL
        return (!(Object.getOwnPropertyNames(this.queryParams).length == 0));
    };

    /**
     * Add referrer url to URI as a query parameter.
     *
     * @param uri {String}        the URI to append referrer to
     */
    this.addReferrerToURI = function (uri) {
        // declare function variable(s)
        var referrer = null;
        var idx = -1;

        // get the referrer url
        referrer = SWY.QUERYSTRING.getReferrer();
        //referrer = 'https://www.twitter.com';
        // check if the page requested from somewhere
        if (referrer) {
            // check if query parameter exists
            idx = uri.indexOf('?');
            // check if there's no parameter being passed
            if (idx < 0) {
                // add ?
                uri += '?r=';
                uri += referrer;
            }	// check if there is at least one parameter being passed
            else if (idx > 0 && idx < uri.length) {
            	if (uri.indexOf('?r=') < 0 && uri.indexOf('&r=') < 0) {
                    uri += '&r=';
                    uri += referrer;            		
            	}
            }
        }

        return uri;
    };
    
    /**
     * Get page referrer.
     */
    this.getReferrer = function(includeParams) {
    	// declare function variable(s)
    	var referrer = null;
    	var urlParts = null;
    	var r = '';
    	
    	referrer = document.referrer;
    	if (referrer) {
    		r = encodeURIComponent(referrer);
    		if (!includeParams) {
	        	urlParts = referrer.split('?', 2);   
	        	r = encodeURIComponent(urlParts[0]);    			
    		}
    	}    	
    	
    	return r;
    }
    
    /**
     * Merge target marketing parameters with the new url parameters. If the new parameter does exist in 
     * the target parameters, then no update needed.
     */
    this.mergeMarketingParams = function(targetParams, newParams) {
    	// declare function variable(s)
    	var mergedParams = targetParams;
    	var newParamList = null;
    	var nvp = null;
    	var val = '';
    	var param = null;
    	
    	if (newParams) {
    		newParamList = newParams.split('&');
    		if (newParamList) {
    			for (var i in newParamList) {
        			nvp = newParamList[i].split('=');
                	// check if new param does not exist in old parameters
        			if (!SWY.QUERYSTRING.hasParam(nvp[0], targetParams)) {
        				// get the entire value of the parameter
        				val = newParamList[i].substr(nvp[0].length + 1);
        				// generate url param
        				param = SWY.QUERYSTRING.generateUrlParameter(nvp[0], val);
        				// check if merged params object does have at least one parameter
        				if (mergedParams) {
                    		// add a new param to mergedParams
            				mergedParams += '&' + param;        					
        				}
        				else {
        					// add the first param to mergedParams
        					mergedParams += '?' + param;
        				}
        			}    				
    			}
    		}    		
    	}
    	
    	return mergedParams;
    }
    
    /**
     * Check if parameter is in the query string.
     */
    this.hasParam = function(name, uri) {
    	// declare function variable(s)
    	var re = new RegExp('([?&])*' + name + '=.*?(&|$)', 'i');
    	var found = false;
    	
    	if (uri.match(re)) {
    		found = true;
    	}
    	
    	return found;
    }
}).call(SWY.QUERYSTRING);
(function () {
    /**
     * Initializes config service.
     *
     * @param {String} configService        the config service
     */
    this.popularSearchesConfig = {'popularSearches': {}};
    this.bannerDomainMap = {};
    this.nonShopBanners = {};
    this.carouselOfferAPIBased;
    this.carouselProductAPIBased;
    this.carouselRolloutBanners = {};

    this.init = function (configService, strBanner, bannerConventionsJson) {
        SWY.configService = JSON.parse(configService);
        // Declare function variable(s)
        this.resolvedBanner = '';
        this.displayableBanner = '';

        
        // check if local storage is enabled or disabled
        AB.isLSEnabled = this.isLSCompatible();

        if(strBanner) {
            var objBanner = JSON.parse(strBanner);
            this.resolvedBanner = objBanner.banner;
            this.displayableBanner = objBanner.displayableBanner;
        }

        this.bannerConventionsJson = {};
        if ('' != bannerConventionsJson) {
            this.bannerConventionsJson = JSON.parse(bannerConventionsJson);
        }

        this.getPreUserInfo();

        this.checkGotoReferralURL();
        this.checkLocalStorageRefresh();

        this.initElevaateEvent();

        if (SWY.configService.nonShopBanners) {
            this.nonShopBanners = SWY.configService.nonShopBanners;
        }

        // Disable logs based on environment's config
        if (window.location.search.indexOf('log=true') === -1) {
            this.disableLog();
        }
    

        /*
        this.oktaConfig = {
                "host" : "abs-qa1.oktapreview.com",
                "authApiEndpoint" : "/oauth2/ausdvuyculRIYitXg0h7/v1",
                "authorizationServerId" : "ausdvuyculRIYitXg0h7",
                "mobileClientId" : "0oad8aiwt7ZA7sWcz0h7",
                "mobileClientSecret" : "thQi8zkx3iRxbJ_l9bNz9G2wnDt9rSqX2fLgrKpW",
                "appClientId" : "",
                "appClientSecret" : "",
                "webClientId" : "0oadvi6nvsQ3z9hKh0h7",
                "webClientSecret" : "8Vb0od4NfGan_XorHiiHfYb6NAuMe8aBxF0e_JqL",
                "serviceClientId" : "",
                "serviceClientSecret" : "",
                "loginRedirectURI" : "http://localhost:4502/bin/safeway/sso/authorize",
                "logoutRedirectURI": "http://localhost:4502/bin/safeway/logout",
                "url" : "https://abs-qa1.oktapreview.com",
                "authorizeEndpoint" : "https://abs-qa1.oktapreview.com/oauth2/ausdvuyculRIYitXg0h7/v1/authorize",
                "issuer" : "https://abs-qa1.oktapreview.com/oauth2/ausdvuyculRIYitXg0h7",
                "tokenEndpoint" : "https://abs-qa1.oktapreview.com/oauth2/ausdvuyculRIYitXg0h7/v1/token"
        }
        */
    };

    this.initPopularSearches = function (popularSearches) {
        if (popularSearches !== '') {
            this.popularSearchesConfig = JSON.parse(popularSearches);
        }
    };

    this.initNimbusConfig = function (nimbusConfig,isGetAllProductOffers) {
        if (nimbusConfig !== '') {
            this.nimbusConfig = JSON.parse(nimbusConfig);
        } else {
            this.nimbusConfig = {};
        }
        if(isGetAllProductOffers !==''){
            this.nimbusConfig.isGetAllProductOffers = isGetAllProductOffers;
        }else {
            this.nimbusConfig.isGetAllProductOffers = "true";
        }
    };
    
     this.initFeatureToggleConfig = function (featureToggleConfig) {
        if (featureToggleConfig !== '') {
            this.featureToggleConfig = JSON.parse(featureToggleConfig);
        } else {
            this.featureToggleConfig = {};
        }
    };
    
    this.initDatapowerConfig = function (dpConf) {
        if (dpConf !== '') {
            this.datapowerConfig = JSON.parse(dpConf);
        } else {
            this.datapowerConfig = {};
        }
    };

    this.initOktaConfig = function (oktaConfig) {

        if (oktaConfig != '') {
            this.oktaConfig = JSON.parse(oktaConfig);
            //Be sure it takes the browser url as the root domain
            this.oktaConfig.logoutRedirectURI = window.location.origin + this.oktaConfig.logoutRedirectURI;
            //this.oktaConfig.loginRedirectURI = window.location.origin+this.oktaConfig.loginRedirectURI;
        }
        else {
            this.oktaConfig = {};
        }
    };

    this.initStoreResolutionConfig = function (storeResolutionConfig) {
        if (storeResolutionConfig != '') {
            this.storeResolutionConfig = JSON.parse(storeResolutionConfig);
        }
        else {
            this.storeResolutionConfig = {};
        }
    };

    this.initBannerDomainMapConfig = function (bannerDomainMap) {
        if (bannerDomainMap != '') {
            this.bannerDomainMap = JSON.parse(bannerDomainMap);
        }
    };

    this.initQueryStringConfig = function (queryStringConfig) {
        if (queryStringConfig !== '') {
            this.queryStringConfig = JSON.parse(queryStringConfig);
        } else {
            this.queryStringConfig = {};
        }
    };

    this.initSearchConfig = function (searchConfig) {
        if (searchConfig !== '') {
            this.searchConfig = JSON.parse(searchConfig);
        }
        else {
            this.searchConfig = {};
        }
    };
    this.initDeliverySubscriptionConfig = function (DSConfig) {
        if (DSConfig !== '') {
            this.DSConfig = JSON.parse(DSConfig);
        }
        else {
            this.DSConfig = {};
        }
    };
    this.initErumsConfig = function (erumsConfig) {
        if (erumsConfig !== '') {
            this.erumsConfig = JSON.parse(erumsConfig);
            window['AB'].cartbaseurl = this.erumsConfig['cart.service.endpoint'];
            window['AB'].cartapimkey = this.erumsConfig['cart.apim.key'];
            window['AB'].cartapimtrace = this.erumsConfig['cart.apim.trace'];
            window['AB'].carturl = this.erumsConfig['cart.path'];
            window['AB'].getcartbycusturl = this.erumsConfig['cart.by.customer.path'];
            window['AB'].storebaseurl = this.erumsConfig['store.service.endpoint'];
            window['AB'].storeapimkey = this.erumsConfig['store.apim.key'];
            window['AB'].storeapimtrace = this.erumsConfig['store.apim.trace'];
            window['AB'].erumsflag = this.erumsConfig['erums.enabled'];
            window['AB'].checkouturl = this.erumsConfig['checkout.endpoint'];
            window['AB'].fullcarturl = this.erumsConfig['fullcart.endpoint'];
            window['AB'].omsOrderSummaryBaseUrl = this.erumsConfig['oms.ordersummary.basepath'];
            window['AB'].omsOrderSummaryEndPoint = this.erumsConfig['oms.ordersummary.endpoint'];
        } else {
            this.erumsConfig = {};
        }
    };

    this.initOMSConfig = function (omsConfig) {
            if (omsConfig !== '') {
                this.omsConfig = JSON.parse(omsConfig);
                window['AB'].omsOrderSummaryBaseUrl = this.omsConfig['oms.ordersummary.basepath'];
               // window['AB'].omsOrderCountEndPoint = this.omsConfig['oms.ordercount.endpoint'];
            }
            else {
                this.omsConfig = {};
            }
        };

    this.initCatalogConfig = function (catalogConfig) {
        if (catalogConfig !== '') {
            this.catalogConfig = JSON.parse(catalogConfig);
            //window['AB'].catalogServiceEnable = this.catalogConfig['catalog.service.enable'];
            window['AB'].catalogServiceEnable = this.catalogConfig['catalog.xapi.enable'];
            window['AB'].catalogServiceBaseurl = this.catalogConfig['swy.api.apim.catalog.service.baseurl'];
            window['AB'].catalogServiceEndpoint = this.catalogConfig['swy.api.catalog.service.endpoint'];
            window['AB'].catalogServiceSubscriptionKey = this.catalogConfig['swy.api.catalog.service.apim.key'];
            window['AB'].catalogXapiProductsBpnEndpoint = this.catalogConfig['apim.api.catalog.path'] + this.catalogConfig['apim.api.catalog.product.bpn.endpoint'];
            window['AB'].catalogXapiProductsUpcEndpoint = this.catalogConfig['apim.api.catalog.path'] + this.catalogConfig['apim.api.catalog.product.upc.endpoint'];

        } else {
            this.catalogConfig = {};
        }
    };

    /* wcax xapi inti configs */
    this.initWcaxXapiConfig = function (wcaxXapiConfig) {
        if (wcaxXapiConfig !== '') {
            this.wcaxXapiConfig = JSON.parse(wcaxXapiConfig);
            window['AB'].wcaxXapiApimKey = this.wcaxXapiConfig['wcax.xapi.apim.key'];
            window['AB'].storeResolverAllEndpoint = this.wcaxXapiConfig['store.resolver.all.endpoint'];
            window['AB'].storeResolverInstoreEndpoint = this.wcaxXapiConfig['store.resolver.instore.endpoint'];
            window['AB'].storeResolverPickupEndpoint = this.wcaxXapiConfig['store.resolver.pickup.endpoint'];
            window['AB'].storeResolverDeliveryEndpoint = this.wcaxXapiConfig['store.resolver.delivery.endpoint'];
            window['AB'].storeResolverValidateEndpoint = this.wcaxXapiConfig['store.resolver.validate.endpoint'];
            window['AB'].storeResolverStoreAddressEndpoint = this.wcaxXapiConfig['store.resolver.storeaddress.endpoint'];
            window['AB'].storeResolverDerivedEcomEndpoint = this.wcaxXapiConfig['store.resolver.derivedecom.endpoint'];
            window['AB'].storeResolverZipToCityEndpoint = this.wcaxXapiConfig['store.resolver.ziptocity.endpoint'];
            window['AB'].storeResolverZipcodeToShoppingEndpoint = this.wcaxXapiConfig['store.resolver.zipcodetoshopping.endpoint'];
            window['AB'].storeResolverStoreToShoppingEndpoint = this.wcaxXapiConfig['store.resolver.storetoshopping.endpoint'];
            this.carouselOfferAPIBased = this.wcaxXapiConfig['carousel.offer.apibased.flag'];
            this.carouselProductAPIBased = this.wcaxXapiConfig['carousel.product.apibased.flag'];
            this.carouselRolloutBanners = this.wcaxXapiConfig['carousel.rollout.banners'];
        } else {
            this.wcaxXapiConfig = {};
        }
    };

    /* Past Order Status api init configs*/
    this.initPastOrderStatusConfig = function (pastOrderStatusConfig) {
        if (pastOrderStatusConfig !== '') {
            this.pastOrderStatusConfig = JSON.parse(pastOrderStatusConfig);
            window['AB'].pastOrderStatusApimKey = this.pastOrderStatusConfig['past.order.status.apim.key'];
            window['AB'].pastOrderStatusEndpoint = this.pastOrderStatusConfig['past.order.status.endpoint'];
        } else {
            this.pastOrderStatusConfig = {};
        }
    };
    
    /**
     * 
     * Replaces a part of a string (token) with some string.
     *
     * @param {String} path                    the page resource path
     * @param {String} strToReplace            the string to replace
     * @param {String} replacementStr        the replacement string
     *
     * @return {String} newStr                the new string or replaced string
     */
    this.getReplacedString = function (path, strToReplace, replacementStr) {
        // declare function variable(s)
        var newStr = null;
        var funcName = 'SWY.CONFIGSERVICE.getReplacedString';

        console.debug(funcName + ' ENTRY: path=' + path + ', strToReplace=' + strToReplace + ', replacementStr=' + replacementStr);
        // check if path has value
        if (path != null) {
            // replace string
            newStr = path.replace(strToReplace, replacementStr);
        }
        else {
            // retain string
            newStr = path;
        }
        console.debug(funcName + ' EXIT: newStr=' + newStr);

        return newStr;
    };

    this.getBannerConventions = function () {
        return this.bannerConventionsJson;
    };

    this.getConfigforPromoDesc = function () {
        var arrPromo = [];
        var promo = '';

        var buyOneGetOneFree = {};
        buyOneGetOneFree.rule = new RegExp('(buy.*get.*one)', "gi");
        promo = this.getBannerConventions().buy_one_get_one_free;
        buyOneGetOneFree.value = (typeof promo !== 'undefined') ? promo : '';
        buyOneGetOneFree.priceColor = false;
        buyOneGetOneFree.showStrikeThrough = false;
        buyOneGetOneFree.offerText = this.getBannerConventions().bogoOfferText;

        arrPromo.push(buyOneGetOneFree);

        var rewardCardPrice = {};
        rewardCardPrice.rule = new RegExp('(reward|club|sale|alert|remarkable)\\s(card|price|now)', "gi");
        promo = this.getBannerConventions().promoDescription;
        rewardCardPrice.value = (typeof promo !== 'undefined') ? promo : '';
        rewardCardPrice.priceColor = true;
        rewardCardPrice.offerText = '';
        rewardCardPrice.showStrikeThrough = true;
        arrPromo.push(rewardCardPrice);

        return arrPromo;
    };


    /**
     * Gets banner from either ECommUserState cookie or part of hostname.
     *
     * @return {String} banner        the current banner
     */
    this.getResolvedBanner = function () {
        return this.resolvedBanner;
    };

    /**
    * Gets boolean true or false based on configured non shop banners in nonShopBanners - WCAXConfigServiceImpl.xml.
    *
    * @return {boolean} for current banner
    */
    this.isNonShopBanner = function (bannerKey) {
        return Object.values(this.nonShopBanners).indexOf(bannerKey) !== -1;
    };

    /**
     * Gets boolean true or false based on configured cookiesSecureFlag - WCAXConfigServiceImpl.xml.
     *
     * @return {boolean} for current environment
     */
    this.tagCookiesSecure = function () {
        return (typeof SWY.configService.cookiesSecureFlag !== "undefined" && SWY.configService.cookiesSecureFlag !== null &&
            SWY.configService.cookiesSecureFlag !== '' && SWY.configService.cookiesSecureFlag === 'false' ) ? false : true;
    }

    /**
     * Gets boolean true or false based on configured enablePrebookSlotModalFlag - WCAXConfigServiceImpl.xml.
     *
     * @return {boolean} for current environment
     */
    this.enablePrebookSlotModal = function () {
        return (typeof SWY.configService.enablePrebookSlotModalFlag !== "undefined" && SWY.configService.enablePrebookSlotModalFlag !== null &&
            SWY.configService.enablePrebookSlotModalFlag !== '' && SWY.configService.enablePrebookSlotModalFlag === 'false' ) ? false : true;
    }

    /**
     * Generates redirect url based on page path and banner.
     *
     * @param {String} pagePath        the page resource path
     * @param {String} banner        the current banner
     *
     * @return {String} redirectUrl        the redirect url
     */
    this.generateRedirectUrl = function (pagePath, banner) {
        // declare function variable(s)
        var url = null;
        var redirectUrl = null;
        var funcName = 'SWY.CONFIGSERVICE.generateRedirectUrl';

        console.debug(funcName + ' ENTRY: pagePath=' + pagePath + ', banner=' + banner);
        url = pagePath;
        if(!SWY.ENFORCEMENTUTILS.isHtmlPage(url) || !SWY.ENFORCEMENTUTILS.isDotNetPage(url)) {
            url += '.html';
        }
        console.debug(funcName + ' url=' + url);
        redirectUrl = this.getReplacedString(url, '{banner}', banner);
        //redirectUrl = this.addMarketingParameters(redirectUrl);
        console.debug(funcName + ' EXIT: redirectUrl=' + redirectUrl);

        return redirectUrl;
    };

    /**
     * Add marketing parameters to the current (old) redirect url.
     */
    this.addMarketingParameters = function (oldRedirectUrl) {
        // declare function variable(s)
        var newRedirectUrl = null;
        var urlParts = null;
        var mergedParams = null;
        var funcName = 'SWY.CONFIGSERVICE.addMarketingParameters';

        console.debug(funcName + ' ENTRY: oldRedirectUrl=' + oldRedirectUrl);
        // by default, set new redirect url to old one
        newRedirectUrl = oldRedirectUrl;
        // get stored marketing params
        /*marketingParams = decodeURIComponent(SWY.ENFORCEMENT.getCookie('ECommMarketing'));
        // check if we stored marketing params
        if (marketingParams) {
        	// split old redirect url into two parts
        	urlParts = oldRedirectUrl.split('?', 2);
        	if (urlParts) {
            	// merged stored marketing params with query string from old redirect url
            	mergedParams = SWY.QUERYSTRING.mergeMarketingParams(marketingParams, urlParts[1]);
            	// generate new redirect url with merged marketing params
            	newRedirectUrl = urlParts[0] + '?' + mergedParams;
            	mergedParams = encodeURIComponent(mergedParams);
                // set ECommMarketing cookie
                SWY.ENFORCEMENT.setCookie('ECommMarketing', mergedParams, 0);        		
        	}
        }*/
        //}
        console.debug(funcName + ' EXIT: newRedirectUrl=' + newRedirectUrl);

        return newRedirectUrl;
    };

    /**
     * Checks if page is in the list.
     *
     * @param {List} pages                    list of pages configured in service
     *
     * @return {boolean} isInTheList        the flag determines if page is in the list
     */
    this.isPageInTheList = function (pages, path) {
        // declare function variable(s)
        var currentPath = null;
        var page = null;
        var isInTheList = false;
        var funcName = 'SWY.CONFIGSERVICE.isPageInTheList';

        console.debug(funcName + ' ENTRY: pages=' + pages);
        if (pages != null && pages.length > 0) {
            // check if path is not undefined, not null and not empty
            if (path) {
                // set current path to path
                currentPath = path;
            }
            else {
                //currentPath = location.pathname.substring(1);
                currentPath = location.pathname;
            }
            console.debug(funcName + ' currentPath=' + currentPath);
            if (currentPath != null) {
                for (var i in pages) {
                    page = pages[i];
                    if (currentPath.indexOf(page.trim()) !== -1) {
                        console.debug(funcName + ' page=' + page);
                        isInTheList = true;
                    }
                }
            }
        }
        console.debug(funcName + ' EXIT: isInTheList=' + isInTheList);

        return isInTheList;
    };

    this.getOktaConfig = function () {
        var oktaloginredirect = window.location.origin + SWY.CONFIGSERVICE.oktaConfig.unifiedLoginRedirectURI;

        return {
            url: SWY.CONFIGSERVICE.oktaConfig.url,
            clientId: SWY.CONFIGSERVICE.oktaConfig.webClientId,
            redirectUri: oktaloginredirect,
            signOutLink: SWY.CONFIGSERVICE.oktaConfig.logoutRedirectURI,
            issuer: SWY.CONFIGSERVICE.oktaConfig.issuer,
            authParams: {
                responseType: ['code'],
                responseMode: 'form_post',
                scope: ['openid', 'profile', 'email']
            }


        };
    };

    this.getNimbusConfig = function () {
        return SWY.CONFIGSERVICE.nimbusConfig;
    };
    
    this.getFeatureToggleConfig = function () {
        return SWY.CONFIGSERVICE.featureToggleConfig;
    };

    this.getDatapowerConfig = function () {
        return SWY.CONFIGSERVICE.datapowerConfig;
    };

    this.setCookie = function (cname, cvalue, exdays, isOktaExpiration) {
        var d = new Date();
        var expires = '';
        var isOkta = false;
        
        if (isOktaExpiration && isOktaExpiration === 'true'){
        	expires = exdays;
        	isOkta = true;
        } else {
        	d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        	expires = 'expires=' + d.toUTCString();
        }
        // check if cookie is enabled
        if (SWY.CONFIGSERVICE.isCookieEnabled()) {
            if (exdays > 0 || isOkta) {
                if(SWY.CONFIGSERVICE.tagCookiesSecure()){
                    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;secure;";
                }
                else{
                    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
                }
            }
            else {
                if(SWY.CONFIGSERVICE.tagCookiesSecure()){
                    document.cookie = cname + "=" + cvalue + ";path=/;secure;";
                }
                else {
                    document.cookie = cname + "=" + cvalue + ";path=/";
                }
            }
        }
        else {
            AB.cookie[cname] = {'value': cvalue, 'expires': d.toUTCString()};
        }
    };

    this.setDomainCookie = function (cname, cvalue, domain, exdays) {
        var d = new Date();

        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        // check if cookie is enabled
        if (SWY.CONFIGSERVICE.isCookieEnabled()) {
            if (exdays > 0) {
                var expires = 'expires=' + d.toUTCString();
                if(SWY.CONFIGSERVICE.tagCookiesSecure()){
                    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/" + ";secure;domain=." + domain;
                }
                else 
                {
                    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/" + ";domain=." + domain;
                }
            }
            else {
                if(SWY.CONFIGSERVICE.tagCookiesSecure()){
                    document.cookie = cname + "=" + cvalue + ";path=/" + ";secure;domain=." + domain;
                }
                else{
                    document.cookie = cname + "=" + cvalue + ";path=/" + ";domain=." + domain;
                }
            }
        }
        else {
            AB.cookie[cname] = {'value': cvalue, 'expires': d.toUTCString()};
        }
    };

    this.getCookie = function (cname) {
        var cvalue = '';
        // check if cookie is enabled
        if (SWY.CONFIGSERVICE.isCookieEnabled()) {
            var name = cname + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    cvalue = c.substring(name.length, c.length);
                }
            }
        }
        else {
            if (typeof AB.cookie[cname] != 'undefined' && this.hasTimeExpired(AB.cookie[cname]['expires']) == false) {
                cvalue = decodeURIComponent(AB.cookie[cname]['value']);
            }
        }

        return cvalue;
    };

    this.checkGotoReferralURL = function () {
        // check if local storage is enabled
        if (this.isLSCompatible()) {
            var referralUrl = localStorage.getItem("referralUrl");
            if (referralUrl != null) {
                //Go to referralURL
                //window.location.replace(referralUrl);
                localStorage.removeItem("referralUrl");
            } else {
                console.log("nothing to redirect");
            }
        }
    };

    this.getPreUserInfo = function () {

        AB.userInfo.prepareSharedInfo();

        AB.userInfo.resolveDisplayableBanner();

        AB.preInitializeObject();
    };

    // this.getUserCartState = function (cartCount) {
    //     var cartState = this.getCookie('SWY_SHARED_SESSION_INFO');
    //     if (cartState != '') {
    //         cartState = JSON.parse(cartState);
    //         cartState.info.SHOP.cart_state = cartCount;
    //         AB.userInfo.updateSessionCookies(cartState);
    //     }
    // };

    this.isLSCompatible = function () {

        var test = 'test';
        try {
            if (typeof this.isLSEnabled == 'undefined') {
                localStorage.setItem(test, test);
                localStorage.removeItem(test);
                this.isLSEnabled = true;
            }
        } catch (e) {
            this.isLSEnabled = false;
        }
        return this.isLSEnabled;
    };

    /**
     * Below method clear the local storage
     **/
    this.clearLocalStroage = function () {
        if (this.isLSCompatible()) {
            const storeData = localStorage.getItem('storeData');
            if(storeData){
            localStorage.setItem('previousStoreData', storeData);
            }
            localStorage.removeItem("abCoupons");
            localStorage.removeItem("abCart");
            localStorage.removeItem("abRewards");
            localStorage.removeItem("abJ4uCoupons");
            localStorage.removeItem("storeData");
            localStorage.removeItem("cartId");
            localStorage.removeItem("showBoxtop");
            localStorage.removeItem("abSlot");
            localStorage.removeItem("abOrderCount");
			localStorage.removeItem("absdefaultecom");
        } else {
            document.cookie = "cartId=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
            this.setCookie('abSlot', '', -1);
        }
        document.cookie = "OrderNumber=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        document.cookie = "OrderStoreId=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        document.cookie = "SlotInfo=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    };

    this.getProp65Details = function () {
        var objProp65 = {};

        objProp65['prop65Flag'] = (SWY.configService.prop65WarningFlag === true || SWY.configService.prop65WarningFlag === "true");
        objProp65['prop65Title'] = (this.getBannerConventions().prop65WarningHeader) ? this.getBannerConventions().prop65WarningHeader : "";
        objProp65['prop65PDPTitle'] = (this.getBannerConventions().proposition65WarningHeader) ? this.getBannerConventions().proposition65WarningHeader : "";

        return objProp65;

    };

    this.isWCMModeDisabled = function () {
        var wcmModeCookie = this.getCookie('wcmmode');
        return !(wcmModeCookie && wcmModeCookie === 'edit');
    };

    this.isAuthor = function () {
            var wcmModeCookie = this.getCookie('wcmmode');
            return !(wcmModeCookie && (wcmModeCookie === 'edit' || wcmModeCookie ==='preview'));
     };

   this.checkLocalStorageRefresh = function() {

       if (SWY.ENFORCEMENTUTILS.checkReInitSite("wwwlocal")) {
           if (this.isLSCompatible()) {
               localStorage.removeItem("abRewards");
               localStorage.removeItem("abJ4uCoupons");
               localStorage.removeItem("abCoupons");
               localStorage.removeItem("storeData");
           }
           SWY.ENFORCEMENTUTILS.removeReInitSite('wwwlocal');
        }
        else if(AB.COMMON.isAnonymous() || AB.userInfo.j4u.storeId == "") {
            if(this.isLSCompatible()) {
                localStorage.removeItem("abRewards");
                localStorage.removeItem("abJ4uCoupons");
                localStorage.removeItem("abCoupons");
            }
        }

        if(SWY.ENFORCEMENTUTILS.checkReInitSite("shoplocal")) {
                if(this.isLSCompatible()) {
                    localStorage.removeItem("abCart");
                    localStorage.removeItem("abSlot");
                    localStorage.removeItem("abCoupons");
                }
                else {
                    this.setCookie('abSlot', '', -1);
                }
                //this.setCookie('ECommCartPrice', '', -1);
                //this.setCookie('ECommCartQty', '', -1);
                SWY.ENFORCEMENTUTILS.updateReInitSite('slot');

                SWY.ENFORCEMENTUTILS.removeReInitSite('shoplocal');   
        }
  };

  this.initElevaateEvent = function () {
       var p = 'elevaateData';
       window[p]=window[p]|| [];
       window[p].push({event:'elevaate', start:new Date().getTime()});
  };

    this.initDomainConfig = function (domainConfig) {
        if (domainConfig !== '') {
            this.domainConfig = JSON.parse(domainConfig);
        } else {
            this.domainConfig = {};
        }
    };

    this.isCookieEnabled = function() {
        var isEnabled = (navigator.cookieEnabled) ? true : false;

        // if not IE4+ nor NS6+
        if (typeof navigator.cookieEnabled == 'undefined' && !isEnabled) {
            document.cookie = 'testcookie';
            isEnabled = (document.cookie.indexOf('testcookie') != -1) ? true : false;
        }

        // return to see if cookie is enabled from browser
        return isEnabled;
    }

    this.hasTimeExpired = function(expiry) {
        var hasExpired = false;
        var currentTime = null;
        var expiryTime = null;

        try {
            if (expiry) {
                 currentTime = (new Date()).getTime();
                 expiryTime = new Date(expiry).getTime();
                 hasExpired = currentTime > expiryTime;
            }
        }
        catch (e) {
            hasExpired = true;
        }

        return hasExpired;
    }

    this.checkPropertyInFeatureFlagConfig = function(key) {
               let result = true;
                if(SWY.CONFIGSERVICE && SWY.CONFIGSERVICE.featureToggleConfig && SWY.CONFIGSERVICE.featureToggleConfig.length > 0) {
                    let arr = SWY.CONFIGSERVICE.featureToggleConfig;
                    result = ! arr.some(ele => ele.hasOwnProperty(key))
                }
                return result;
            }
   
    /** 
     * Disable verbose levels of console outputs.
     */
    this.disableLog = function () {
        window.console.log   = function () {};
        window.console.debug = function () {};
        window.console.info  = function () {};
    };        

}).call(SWY.CONFIGSERVICE);

var SWY = SWY || {};

// adjectives to be used to generate random string
SWY.adjectives = ['aback', 'abaft', 'abandoned', 'abashed', 'aberrant', 'abhorrent', 'abiding', 'abject', 'ablaze', 'able', 'abnormal', 'aboard', 'aboriginal', 'abortive', 'abounding', 'abrasive', 'abrupt', 'absent', 'absorbed', 'absorbing', 'abstracted', 'absurd', 'abundant', 'abusive', 'acceptable', 'accessible', 'accidental', 'accurate', 'acid', 'acidic', 'acoustic', 'acrid', 'action', 'active', 'actual', 'actually', 'adamant', 'adaptable', 'addicted', 'addicting', 'adept', 'adhesive', 'adjoining', 'adorable', 'adored', 'adroit', 'adventurous', 'affectionate', 'afraid', 'aggressive', 'agile', 'agonizing', 'agreeable', 'ahead', 'airy', 'ajar', 'alcoholic', 'alert', 'alike', 'alive', 'alleged', 'alluring', 'aloof', 'alter', 'amazing', 'ambiguous', 'ambitious', 'amiable', 'ample', 'amuck', 'amused', 'amusing', 'ancient', 'angry', 'animated', 'annoyed', 'annoying', 'anxious', 'apathetic', 'apt', 'aquatic', 'ardent', 'aromatic', 'arrogant', 'ashamed', 'aspiring', 'assorted', 'astonishing', 'astute', 'attractive', 'august', 'auspicious', 'automatic', 'available', 'average', 'avid', 'awake', 'aware', 'awesome', 'awful', 'axiomatic', 'bad', 'balmy', 'barbarous', 'bashful', 'bawdy', 'beautiful', 'beefy', 'befitting', 'belligerent', 'beneficial', 'benevolent', 'bent', 'berserk', 'best', 'better', 'bewildered', 'big', 'billowing', 'billowy', 'bitter', 'bizarre', 'black', 'blessed', 'bloody', 'blue', 'blushing', 'boiling', 'bold', 'boorish', 'bored', 'boring', 'boss', 'bouncy', 'boundless', 'brainy', 'brash', 'brave', 'brawny', 'breakable', 'breezy', 'brief', 'bright', 'brisk', 'broad', 'broken', 'brown', 'bumpy', 'burly', 'bustling', 'busy', 'cagey', 'calculating', 'callous', 'calm', 'can', 'canny', 'capable', 'capricious', 'cared', 'careful', 'careless', 'caring', 'casual', 'cautious', 'ceaseless', 'celestial', 'certain', 'changeable', 'charming', 'cheap', 'cheerful', 'chemical', 'chic', 'chief', 'childlike', 'chilly', 'chivalrous', 'choice', 'chosen', 'chubby', 'chummy', 'chunky', 'civic', 'civil', 'clammy', 'classy', 'clean', 'clear', 'clever', 'cloistered', 'close', 'closed', 'cloudy', 'clumsy', 'cluttered', 'cogent', 'coherent', 'cold', 'colorful', 'colossal', 'combative', 'comfortable', 'common', 'complete', 'complex', 'composed', 'concerned', 'condemned', 'confused', 'conscious', 'cooing', 'cool', 'cooperative', 'coordinated', 'cosmic', 'courageous', 'cowardly', 'cozy', 'crabby', 'craven', 'crazy', 'creepy', 'crooked', 'crowded', 'cruel', 'cuddly', 'cultured', 'cumbersome', 'curious', 'curly', 'curved', 'curvy', 'cut', 'cute', 'cynical', 'daffy', 'daily', 'dainty', 'damaged', 'damaging', 'damp', 'dandy', 'dangerous', 'dapper', 'daring', 'dark', 'dashing', 'dazzling', 'dead', 'deadpan', 'deafening', 'dear', 'debonair', 'decent', 'decisive', 'decorous', 'deep', 'deeply', 'defeated', 'defective', 'defiant', 'deft', 'delicate', 'delicious', 'delightful', 'delirious', 'deluxe', 'demonic', 'dependent', 'depressed', 'deranged', 'descriptive', 'deserted', 'detailed', 'determined', 'devilish', 'devout', 'didactic', 'different', 'difficult', 'diligent', 'direct', 'direful', 'dirty', 'disagreeable', 'disastrous', 'discreet', 'disgusted', 'disgusting', 'disillusioned', 'dispensable', 'distinct', 'disturbed', 'divergent', 'divine', 'dizzy', 'domineering', 'doted', 'doting', 'doubtful', 'drab', 'draconian', 'dramatic', 'dreamy', 'dreary', 'driven', 'drunk', 'dry', 'dull', 'dusty', 'dynamic', 'dysfunctional', 'eager', 'early', 'earsplitting', 'earthy', 'easy', 'eatable', 'economic', 'educated', 'efficacious', 'efficient', 'eight', 'elastic', 'elated', 'elderly', 'electric', 'elegant', 'elfin', 'elite', 'embarrassed', 'eminent', 'empty', 'enchanted', 'enchanting', 'encouraging', 'end', 'endurable', 'energetic', 'energized', 'enigmatic', 'enormous', 'entertaining', 'enthusiastic', 'envious', 'equable', 'equal', 'erect', 'erratic', 'ethereal', 'evanescent', 'evasive', 'even', 'evil', 'exact', 'excellent', 'excited', 'exciting', 'exclusive', 'exotic', 'expensive', 'expert', 'exuberant', 'exultant', 'fabulous', 'faded', 'faint', 'fair', 'faithful', 'fallacious', 'false', 'famed', 'familiar', 'famous', 'fanatical', 'fancy', 'fantastic', 'far', 'fascinated', 'fast', 'fat', 'faulty', 'fearful', 'fearless', 'feeble', 'feigned', 'female', 'fertile', 'festive', 'few', 'fierce', 'fiery', 'filthy', 'fine', 'finicky', 'first', 'fit', 'five', 'fixed', 'flagrant', 'flaky', 'flashy', 'flat', 'flawless', 'fleet', 'flimsy', 'flippant', 'flowery', 'flowing', 'fluent', 'fluffy', 'fluttering', 'flying', 'foamy', 'fond', 'foolish', 'for', 'foregoing', 'forgetful', 'forlorn', 'fortunate', 'four', 'fragile', 'frail', 'frank', 'frantic', 'free', 'freezing', 'frequent', 'fresh', 'fretful', 'friendly', 'frightened', 'frightening', 'full', 'fumbling', 'fun', 'functional', 'funny', 'furry', 'furtive', 'fuscia', 'future', 'futuristic', 'fuzzy', 'gabby', 'gainful', 'gamy', 'gaping', 'garrulous', 'gas', 'gaudy', 'general', 'genial', 'gentle', 'giant', 'giddy', 'gifted', 'gigantic', 'giving', 'glad', 'glamorous', 'gleaming', 'glib', 'glistening', 'glorious', 'glossy', 'gnarly', 'godly', 'gold', 'golden', 'good', 'goodly', 'goofy', 'gorgeous', 'graceful', 'grand', 'grandiose', 'grateful', 'gratis', 'gray', 'greasy', 'great', 'greedy', 'green', 'grey', 'grieving', 'groovy', 'grotesque', 'grouchy', 'grubby', 'gruesome', 'grumpy', 'guarded', 'guided', 'guiltless', 'gullible', 'gusty', 'gutsy', 'guttural', 'habitual', 'half', 'hallowed', 'haloed', 'halting', 'handsome', 'handsomely', 'handy', 'hanging', 'hapless', 'happy', 'hard', 'hardy', 'harmonious', 'harsh', 'hateful', 'heady', 'healthy', 'heartbreaking', 'hearty', 'heavenly', 'heavy', 'hellish', 'helpful', 'helpless', 'heroic', 'hesitant', 'hideous', 'high', 'highfalutin', 'hilarious', 'hip', 'hissing', 'historical', 'holistic', 'hollow', 'holy', 'homeless', 'homely', 'honest', 'honorable', 'horrible', 'hospitable', 'hot', 'huge', 'hulking', 'human', 'humane', 'humble', 'humdrum', 'humorous', 'hungry', 'hunky', 'hurried', 'hurt', 'hushed', 'husky', 'hypnotic', 'hysterical', 'icky', 'icy', 'ideal', 'idiotic', 'ignorant', 'ill', 'illegal', 'illustrious', 'imaginary', 'immense', 'imminent', 'immune', 'impartial', 'imperfect', 'impolite', 'important', 'imported', 'impossible', 'incandescent', 'incompetent', 'inconclusive', 'incredible', 'indigo', 'industrious', 'inexpensive', 'infamous', 'innate', 'innocent', 'inquisitive', 'insidious', 'instinctive', 'intelligent', 'interesting', 'internal', 'invincible', 'irate', 'irritating', 'itchy', 'jaded', 'jagged', 'jazzed', 'jazzy', 'jealous', 'jittery', 'jobless', 'jolly', 'jovial', 'joyful', 'joyous', 'jubilant', 'judicious', 'juicy', 'jumbled', 'jumpy', 'just', 'juvenile', 'kaput', 'keen', 'khaki', 'kind', 'kindhearted', 'kindly', 'kingly', 'knotty', 'knowing', 'knowledgeable', 'known', 'labored', 'lackadaisical', 'lacking', 'lame', 'lamentable', 'languid', 'large', 'last', 'late', 'laughable', 'lavish', 'lawful', 'lazy', 'lean', 'learned', 'left', 'legal', 'legit', 'lethal', 'level', 'lewd', 'light', 'like', 'likeable', 'liked', 'likely', 'limber', 'limitless', 'limping', 'literate', 'little', 'lively', 'living', 'lonely', 'long', 'longing', 'loose', 'lopsided', 'loud', 'lousy', 'loutish', 'loved', 'lovely', 'loving', 'low', 'lowly', 'loyal', 'lucid', 'lucky', 'ludicrous', 'lumpy', 'lush', 'luxuriant', 'lying', 'lyrical', 'macabre', 'macho', 'maddening', 'madly', 'magenta', 'magical', 'magnificent', 'main', 'majestic', 'major', 'makeshift', 'male', 'malicious', 'mammoth', 'maniacal', 'many', 'marked', 'married', 'marvelous', 'massive', 'master', 'material', 'materialistic', 'mature', 'max', 'maxed', 'mean', 'measly', 'meaty', 'medical', 'meek', 'mellow', 'melodic', 'melted', 'merciful', 'mere', 'merry', 'messy', 'mighty', 'military', 'milky', 'mindless', 'miniature', 'minor', 'mint', 'mirthful', 'miscreant', 'misty', 'mixed', 'moaning', 'modern', 'modest', 'moldy', 'momentous', 'money', 'moonlit', 'moral', 'motionless', 'mountainous', 'moving', 'mucho', 'muddled', 'mundane', 'murky', 'mushy', 'mute', 'mutual', 'mysterious', 'naive', 'nappy', 'narrow', 'nasty', 'native', 'natural', 'naughty', 'nauseating', 'near', 'neat', 'nebulous', 'necessary', 'needed', 'needless', 'needy', 'neighborly', 'nervous', 'new', 'next', 'nice', 'nifty', 'nimble', 'nine', 'nippy', 'noble', 'noiseless', 'noisy', 'nonchalant', 'nondescript', 'nonstop', 'normal', 'nostalgic', 'nosy', 'noted', 'novel', 'noxious', 'null', 'numberless', 'numero', 'numerous', 'nutritious', 'nutty', 'oafish', 'obedient', 'obeisant', 'obese', 'obnoxious', 'obscene', 'obsequious', 'observant', 'obsolete', 'obtainable', 'oceanic', 'odd', 'offbeat', 'okay', 'old', 'omniscient', 'one', 'onerous', 'open', 'opposite', 'optimal', 'orange', 'ordinary', 'organic', 'ossified', 'outgoing', 'outrageous', 'outstanding', 'oval', 'overconfident', 'overjoyed', 'overrated', 'overt', 'overwrought', 'pacific', 'painful', 'painstaking', 'pale', 'paltry', 'panicky', 'panoramic', 'parallel', 'parched', 'parsimonious', 'past', 'pastoral', 'pathetic', 'peaceful', 'peachy', 'penitent', 'peppy', 'perfect', 'periodic', 'permissible', 'perpetual', 'petite', 'phobic', 'physical', 'picayune', 'pink', 'piquant', 'pithy', 'placid', 'plain', 'plant', 'plastic', 'plausible', 'pleasant', 'plucky', 'plum', 'poetic', 'pointless', 'poised', 'polite', 'political', 'poor', 'posh', 'possessive', 'possible', 'potent', 'powerful', 'precious', 'premium', 'present', 'pretty', 'previous', 'pricey', 'prickly', 'prime', 'primo', 'private', 'prized', 'pro', 'probable', 'productive', 'profuse', 'prompt', 'proper', 'protective', 'proud', 'psychedelic', 'psychotic', 'public', 'puffy', 'pumped', 'punchy', 'puny', 'pure', 'purple', 'purring', 'pushy', 'puzzled', 'puzzling', 'quack', 'quaint', 'quarrelsome', 'questionable', 'quick', 'quickest', 'quiet', 'quirky', 'quixotic', 'quizzical', 'rabid', 'racial', 'rad', 'radioactive', 'ragged', 'rainy', 'rambunctious', 'rampant', 'rapid', 'rare', 'raspy', 'ratty', 'reach', 'ready', 'real', 'rebel', 'receptive', 'recondite', 'red', 'redundant', 'reflective', 'regal', 'regular', 'relieved', 'remarkable', 'reminiscent', 'repulsive', 'resilient', 'resolute', 'resonant', 'responsible', 'rhetorical', 'rich', 'right', 'righteous', 'rightful', 'rigid', 'ripe', 'ritzy', 'roasted', 'robust', 'romantic', 'roomy', 'rooted', 'rosy', 'rotten', 'rough', 'round', 'royal', 'ruddy', 'rude', 'rugged', 'rural', 'rustic', 'ruthless', 'sable', 'sad', 'safe', 'salty', 'same', 'sassy', 'satisfying', 'saucy', 'savory', 'savvy', 'scandalous', 'scarce', 'scared', 'scary', 'scattered', 'scenic', 'scientific', 'scintillating', 'scrawny', 'screeching', 'second', 'secret', 'secretive', 'sedate', 'seemly', 'selective', 'selfish', 'sensitive', 'separate', 'serene', 'serious', 'shaggy', 'shaky', 'shallow', 'sharp', 'shiny', 'shivering', 'shocking', 'short', 'showy', 'shrewd', 'shrill', 'shut', 'shy', 'sick', 'silent', 'silky', 'silly', 'simple', 'simplistic', 'sincere', 'six', 'skillful', 'skinny', 'sleek', 'sleepy', 'slick', 'slim', 'slimy', 'slippery', 'sloppy', 'slow', 'small', 'smart', 'smelly', 'smiley', 'smiling', 'smoggy', 'smooth', 'snappy', 'snazzy', 'sneaky', 'snobbish', 'snotty', 'snowy', 'snugly', 'social', 'soft', 'soggy', 'sole', 'solid', 'solitary', 'somber', 'sophisticated', 'sordid', 'sore', 'sound', 'sour', 'spacial', 'sparkling', 'special', 'spectacular', 'spicy', 'spiffy', 'spiky', 'spiritual', 'spiteful', 'splendid', 'spooky', 'spotless', 'spotted', 'spotty', 'spry', 'spurious', 'squalid', 'square', 'squealing', 'squeamish', 'stable', 'staking', 'stale', 'standing', 'star', 'stark', 'statuesque', 'steadfast', 'steady', 'steep', 'stereotyped', 'sticky', 'stiff', 'stimulating', 'stingy', 'stoic', 'stormy', 'straight', 'strange', 'striped', 'strong', 'stunning', 'stupendous', 'stupid', 'sturdy', 'suave', 'subdued', 'subsequent', 'substantial', 'subtle', 'successful', 'succinct', 'sudden', 'sulky', 'sunny', 'sunset', 'super', 'superb', 'superficial', 'supreme', 'sure', 'swank', 'swanky', 'sweet', 'swell', 'sweltering', 'swift', 'symptomatic', 'synonymous', 'taboo', 'tacit', 'tacky', 'talented', 'tall', 'tame', 'tan', 'tangible', 'tangy', 'tart', 'tasteful', 'tasteless', 'tasty', 'tawdry', 'teal', 'tearful', 'tedious', 'teeny', 'telling', 'temporary', 'ten', 'tender', 'tense', 'tenuous', 'terrible', 'terrific', 'tested', 'testy', 'thankful', 'the', 'therapeutic', 'thick', 'thin', 'thinkable', 'third', 'thirsty', 'thoughtful', 'thoughtless', 'threatening', 'three', 'thriving', 'thundering', 'tidy', 'tight', 'tightfisted', 'timely', 'tiny', 'tired', 'tiresome', 'toothsome', 'top', 'tops', 'torpid', 'tough', 'touted', 'towering', 'tranquil', 'trashy', 'tremendous', 'tricky', 'trim', 'trite', 'tropical', 'troubled', 'truculent', 'true', 'trusty', 'truthful', 'try', 'two', 'typical', 'ubiquitous', 'ugliest', 'ugly', 'ultra', 'unable', 'unaccountable', 'unadvised', 'unarmed', 'unbecoming', 'unbiased', 'uncovered', 'understood', 'undesirable', 'undisturbed', 'unequal', 'unequaled', 'uneven', 'unhealthy', 'uninterested', 'unique', 'united', 'unkempt', 'unknown', 'unnatural', 'unruly', 'unsightly', 'unsuitable', 'untidy', 'unused', 'unusual', 'unwavering', 'unwieldy', 'unwritten', 'upbeat', 'uplifting', 'uppity', 'upset', 'uptight', 'urbane', 'usable', 'used', 'useful', 'useless', 'utmost', 'utopian', 'utter', 'uttermost', 'vacuous', 'vagabond', 'vague', 'valid', 'valuable', 'various', 'vast', 'vengeful', 'venomous', 'verdant', 'versed', 'vestal', 'viable', 'victorious', 'vigorous', 'violent', 'violet', 'vital', 'vivacious', 'vivid', 'vocal', 'vogue', 'voiceless', 'volatile', 'voracious', 'vulgar', 'wacky', 'waggish', 'waiting', 'wakeful', 'wandering', 'wanted', 'wanting', 'warlike', 'warm', 'wary', 'wasteful', 'watery', 'weak', 'wealthy', 'weary', 'wet', 'whimsical', 'whispering', 'white', 'whole', 'wholesale', 'wicked', 'wide', 'wiggly', 'wild', 'willing', 'windy', 'winged', 'wired', 'wiry', 'wise', 'wistful', 'witty', 'woebegone', 'womanly', 'wonderful', 'wooden', 'woozy', 'workable', 'worried', 'worthless', 'worthy', 'wrathful', 'wretched', 'wrong', 'wry', 'xenophobic', 'yellow', 'yielding', 'young', 'youthful', 'yummy', 'zany', 'zealous', 'zesty', 'zippy', 'zonked'];
// nouns to be used to generate random string
SWY.nouns = ['account', 'achiever', 'acoustics', 'act', 'action', 'activity', 'actor', 'addition', 'adjustment', 'advertisement', 'advice', 'aftermath', 'afternoon', 'afterthought', 'agreement', 'air', 'airplane', 'airport', 'alarm', 'amount', 'amusement', 'anger', 'angle', 'animal', 'ants', 'apparatus', 'apparel', 'appliance', 'approval', 'arch', 'argument', 'arithmetic', 'arm', 'army', 'art', 'attack', 'attraction', 'aunt', 'authority', 'babies', 'baby', 'back', 'badge', 'bag', 'bait', 'balance', 'ball', 'base', 'baseball', 'basin', 'basket', 'basketball', 'bat', 'bath', 'battle', 'bead', 'bear', 'bed', 'bedroom', 'beds', 'bee', 'beef', 'beginner', 'behavior', 'belief', 'believe', 'bell', 'bells', 'berry', 'bike', 'bikes', 'bird', 'birds', 'birth', 'birthday', 'bit', 'bite', 'blade', 'blood', 'blow', 'board', 'boat', 'bomb', 'bone', 'book', 'books', 'boot', 'border', 'bottle', 'boundary', 'box', 'boy', 'brake', 'branch', 'brass', 'breath', 'brick', 'bridge', 'brother', 'bubble', 'bucket', 'building', 'bulb', 'burst', 'bushes', 'business', 'butter', 'button', 'cabbage', 'cable', 'cactus', 'cake', 'cakes', 'calculator', 'calendar', 'camera', 'camp', 'can', 'cannon', 'canvas', 'cap', 'caption', 'car', 'card', 'care', 'carpenter', 'carriage', 'cars', 'cart', 'cast', 'cat', 'cats', 'cattle', 'cause', 'cave', 'celery', 'cellar', 'cemetery', 'cent', 'chalk', 'chance', 'change', 'channel', 'cheese', 'cherries', 'cherry', 'chess', 'chicken', 'chickens', 'children', 'chin', 'church', 'circle', 'clam', 'class', 'cloth', 'clover', 'club', 'coach', 'coal', 'coast', 'coat', 'cobweb', 'coil', 'collar', 'color', 'committee', 'company', 'comparison', 'competition', 'condition', 'connection', 'control', 'cook', 'copper', 'corn', 'cough', 'country', 'cover', 'cow', 'cows', 'crack', 'cracker', 'crate', 'crayon', 'cream', 'creator', 'creature', 'credit', 'crib', 'crime', 'crook', 'crow', 'crowd', 'crown', 'cub', 'cup', 'current', 'curtain', 'curve', 'cushion', 'dad', 'daughter', 'day', 'death', 'debt', 'decision', 'deer', 'degree', 'design', 'desire', 'desk', 'destruction', 'detail', 'development', 'digestion', 'dime', 'dinner', 'dinosaurs', 'direction', 'dirt', 'discovery', 'discussion', 'distance', 'distribution', 'division', 'dock', 'doctor', 'dog', 'dogs', 'doll', 'dolls', 'donkey', 'door', 'downtown', 'drain', 'drawer', 'dress', 'drink', 'driving', 'drop', 'duck', 'ducks', 'dust', 'ear', 'earth', 'earthquake', 'edge', 'education', 'effect', 'egg', 'eggnog', 'eggs', 'elbow', 'end', 'engine', 'error', 'event', 'example', 'exchange', 'existence', 'expansion', 'experience', 'expert', 'eye', 'eyes', 'face', 'fact', 'fairies', 'fall', 'fang', 'farm', 'fear', 'feeling', 'field', 'finger', 'fire', 'fireman', 'fish', 'flag', 'flame', 'flavor', 'flesh', 'flight', 'flock', 'floor', 'flower', 'flowers', 'fly', 'fog', 'fold', 'food', 'foot', 'force', 'fork', 'form', 'fowl', 'frame', 'friction', 'friend', 'friends', 'frog', 'frogs', 'front', 'fruit', 'fuel', 'furniture', 'gate', 'geese', 'ghost', 'giants', 'giraffe', 'girl', 'girls', 'glass', 'glove', 'gold', 'government', 'governor', 'grade', 'grain', 'grandfather', 'grandmother', 'grape', 'grass', 'grip', 'ground', 'group', 'growth', 'guide', 'guitar', 'gun', 'hair', 'haircut', 'hall', 'hammer', 'hand', 'hands', 'harbor', 'harmony', 'hat', 'hate', 'head', 'health', 'heat', 'hill', 'history', 'hobbies', 'hole', 'holiday', 'home', 'honey', 'hook', 'hope', 'horn', 'horse', 'horses', 'hose', 'hospital', 'hot', 'hour', 'house', 'houses', 'humor', 'hydrant', 'ice', 'icicle', 'idea', 'impulse', 'income', 'increase', 'industry', 'ink', 'insect', 'instrument', 'insurance', 'interest', 'invention', 'iron', 'island', 'jail', 'jam', 'jar', 'jeans', 'jelly', 'jellyfish', 'jewel', 'join', 'judge', 'juice', 'jump', 'kettle', 'key', 'kick', 'kiss', 'kittens', 'kitty', 'knee', 'knife', 'knot', 'knowledge', 'laborer', 'lace', 'ladybug', 'lake', 'lamp', 'land', 'language', 'laugh', 'leather', 'leg', 'legs', 'letter', 'letters', 'lettuce', 'level', 'library', 'limit', 'line', 'linen', 'lip', 'liquid', 'loaf', 'lock', 'locket', 'look', 'loss', 'love', 'low', 'lumber', 'lunch', 'lunchroom', 'machine', 'magic', 'maid', 'mailbox', 'man', 'marble', 'mark', 'market', 'mask', 'mass', 'match', 'meal', 'measure', 'meat', 'meeting', 'memory', 'men', 'metal', 'mice', 'middle', 'milk', 'mind', 'mine', 'minister', 'mint', 'minute', 'mist', 'mitten', 'mom', 'money', 'monkey', 'month', 'moon', 'morning', 'mother', 'motion', 'mountain', 'mouth', 'move', 'muscle', 'name', 'nation', 'neck', 'need', 'needle', 'nerve', 'nest', 'night', 'noise', 'north', 'nose', 'note', 'notebook', 'number', 'nut', 'oatmeal', 'observation', 'ocean', 'offer', 'office', 'oil', 'orange', 'oranges', 'order', 'oven', 'page', 'pail', 'pan', 'pancake', 'paper', 'parcel', 'part', 'partner', 'party', 'passenger', 'payment', 'peace', 'pear', 'pen', 'pencil', 'person', 'pest', 'pet', 'pets', 'pickle', 'picture', 'pie', 'pies', 'pig', 'pigs', 'pin', 'pipe', 'pizzas', 'place', 'plane', 'planes', 'plant', 'plantation', 'plants', 'plastic', 'plate', 'play', 'playground', 'pleasure', 'plot', 'plough', 'pocket', 'point', 'poison', 'pollution', 'popcorn', 'porter', 'position', 'pot', 'potato', 'powder', 'power', 'price', 'produce', 'profit', 'property', 'prose', 'protest', 'pull', 'pump', 'punishment', 'purpose', 'push', 'quarter', 'quartz', 'queen', 'question', 'quicksand', 'quiet', 'quill', 'quilt', 'quince', 'quiver', 'rabbit', 'rabbits', 'rail', 'railway', 'rain', 'rainstorm', 'rake', 'range', 'rat', 'rate', 'ray', 'reaction', 'reading', 'reason', 'receipt', 'recess', 'record', 'regret', 'relation', 'religion', 'representative', 'request', 'respect', 'rest', 'reward', 'rhythm', 'rice', 'riddle', 'rifle', 'ring', 'rings', 'river', 'road', 'robin', 'rock', 'rod', 'roll', 'roof', 'room', 'root', 'rose', 'route', 'rub', 'rule', 'run', 'sack', 'sail', 'salt', 'sand', 'scale', 'scarecrow', 'scarf', 'scene', 'scent', 'school', 'science', 'scissors', 'screw', 'sea', 'seashore', 'seat', 'secretary', 'seed', 'selection', 'self', 'sense', 'servant', 'shade', 'shake', 'shame', 'shape', 'sheep', 'sheet', 'shelf', 'ship', 'shirt', 'shock', 'shoe', 'shoes', 'shop', 'show', 'side', 'sidewalk', 'sign', 'silk', 'silver', 'sink', 'sister', 'sisters', 'size', 'skate', 'skin', 'skirt', 'sky', 'slave', 'sleep', 'sleet', 'slip', 'slope', 'smash', 'smell', 'smile', 'smoke', 'snail', 'snails', 'snake', 'snakes', 'sneeze', 'snow', 'soap', 'society', 'sock', 'soda', 'sofa', 'son', 'song', 'songs', 'sort', 'sound', 'soup', 'space', 'spade', 'spark', 'spiders', 'sponge', 'spoon', 'spot', 'spring', 'spy', 'square', 'squirrel', 'stage', 'stamp', 'star', 'start', 'statement', 'station', 'steam', 'steel', 'stem', 'step', 'stew', 'stick', 'sticks', 'stitch', 'stocking', 'stomach', 'stone', 'stop', 'store', 'story', 'stove', 'stranger', 'straw', 'stream', 'street', 'stretch', 'string', 'structure', 'substance', 'sugar', 'suggestion', 'suit', 'summer', 'sun', 'support', 'surprise', 'sweater', 'swim', 'swing', 'system', 'table', 'tail', 'talk', 'tank', 'taste', 'tax', 'teaching', 'team', 'teeth', 'temper', 'tendency', 'tent', 'territory', 'test', 'texture', 'theory', 'thing', 'things', 'thought', 'thread', 'thrill', 'throat', 'throne', 'thumb', 'thunder', 'ticket', 'tiger', 'time', 'tin', 'title', 'toad', 'toe', 'toes', 'tomatoes', 'tongue', 'tooth', 'toothbrush', 'toothpaste', 'top', 'touch', 'town', 'toy', 'toys', 'trade', 'trail', 'train', 'trains', 'tramp', 'transport', 'tray', 'treatment', 'tree', 'trees', 'trick', 'trip', 'trouble', 'trousers', 'truck', 'trucks', 'tub', 'turkey', 'turn', 'twig', 'twist', 'umbrella', 'uncle', 'underwear', 'unit', 'use', 'vacation', 'value', 'van', 'vase', 'vegetable', 'veil', 'vein', 'verse', 'vessel', 'vest', 'view', 'visitor', 'voice', 'volcano', 'volleyball', 'voyage', 'walk', 'wall', 'war', 'wash', 'waste', 'watch', 'water', 'wave', 'waves', 'wax', 'way', 'wealth', 'weather', 'week', 'weight', 'wheel', 'whip', 'whistle', 'wilderness', 'wind', 'window', 'wine', 'wing', 'winter', 'wire', 'wish', 'woman', 'women', 'wood', 'wool', 'word', 'work', 'worm', 'wound', 'wren', 'wrench', 'wrist', 'writer', 'writing', 'yak', 'yam', 'yard', 'yarn', 'year', 'yoke', 'zebra', 'zephyr', 'zinc', 'zipper', 'zoo'];
//third word added if UsedCredentials
SWY.cities = ['bangor', 'orono', 'augusta', 'portland', 'camden', 'verona', 'bucksport', 'hampden', 'brewer', 'hermon', 'kennebunkport', 'acadia', 'barharbor', 'presqueisle', 'etna', 'waterville', 'scaroborough', 'perry', 'eastport', 'freeport'];
//fourth word added if coming from resign in page
SWY.names = ['annie', 'brielle', 'bill', 'arvind', 'sumit', 'sriram', 'ashutosh', 'lee', 'tahla', 'umair', 'jen', 'bernardo', 'sean', 'gerard', 'harsha', 'uma', 'hatim', 'edwin', 'shamal', 'girish'];
(function () {

    this.init = function () {
        //working in progress to keep Federation OKTA session alive
        _initializeOktaSDK();

    };

    _initializeOktaSDK = function () {
        console.log("Okta: _initializeOktaSDK");
        var authClient = new OktaAuth(SWY.CONFIGSERVICE.getOktaConfig());
        authClient.session.get()
            .then(function (session) {
                if (session.status === 'ACTIVE') {
                    //Temporal display while sign out implementation is done
                    window.alert('Welcome back, ' + session.login);
                    console.log('Welcome back, ' + session.login);
                    return;
                }
            })
            .catch(function (err) {
                console.log("authClient.session.get() ERROR", err);
            });
    };

//OKTA review of session active with Cross-Domain
    this.reviewOKTASessionToRefresh = function (event) {
        var oktaVar = SWY.CONFIGSERVICE.getOktaConfig();
        var baseUrl = oktaVar.url;
        $.ajax({
            url: baseUrl + '/api/v1/sessions/me/lifecycle/refresh',
            type: 'POST',
            xhrFields: {withCredentials: true},
            accept: 'application/json'
        }).done(function (data) {
            // check if data response and status have values
            if (data && data.status) {
                if (data.status == 'ACTIVE') {
                    // set ECommSSOActive cookie
                    SWY.CONFIGSERVICE.setCookie('ECommSSOActive', 'Y', 0);
                    // set ECommSignInCount cookie - reset this cookie when SSO session is active
                    SWY.CONFIGSERVICE.setCookie('ECommSignInCount', 0, 0);

                }
                else {
                    // set ECommSSOActive and ECommDeliveryVisited cookies
                    SWY.CONFIGSERVICE.setCookie('ECommSSOActive', 'N', 0);
                }
            }
            else {
                // set ECommSSOActive and ECommDeliveryVisited cookies
                SWY.CONFIGSERVICE.setCookie('ECommSSOActive', 'N', 0);
            }
            console.log('Session is Active');
            //alert(data);
        })
            .fail(function (xhr, textStatus, error) {
                var title, message;
                switch (xhr.status) {
                    case 403 :
                        title = xhr.responseJSON.errorSummary;
                        message = 'Check if OKTA session can be refreshed.';
                        //SWY.OKTA.refreshSession(event);
                        // set ECommSSOActive and ECommDeliveryVisited cookies
                        SWY.CONFIGSERVICE.setCookie('ECommSSOActive', 'N', 0);
                        break;
                    case 404 :
                        title = xhr.responseJSON.errorSummary;
                        message = 'Check if OKTA session can be refreshed.';
                        //SWY.OKTA.refreshSession(event);
                        // set ECommSSOActive and ECommDeliveryVisited cookies
                        /*SWY.CONFIGSERVICE.setCookie('ECommSSOActive', 'N', 0);
                        // check if user is logged out of Okta but logged in ECom
                        if (AB.userInfo && (AB.userInfo.userType === 'R' || AB.userInfo.userType === 'C')) {
                            // refresh okta session
                            SWY.OKTA.refreshSession(event);
                        }*/
                        break;
                    case 429 :
                        title = 'Too many requests';
                        message = 'The request is failing because of too many requests. Ignore this error.';
                        break;
                    default :
                        title = 'Invalid URL or Cross-Origin Request Blocked';
                        message = 'You must explicitly add this site (' + window.location.origin + ') to the list of allowed websites in your administrator UI';
                        /*// set ECommSSOActive and ECommDeliveryVisited cookies
                        SWY.CONFIGSERVICE.setCookie('ECommSSOActive', 'N', 0);
                        // check if user is logged out of Okta but logged in ECom
                        if (AB.userInfo && (AB.userInfo.userType === 'R' || AB.userInfo.userType === 'C')) {
                            // refresh okta session
                            SWY.OKTA.refreshSession(event);
                        }*/
                        break;
                }
                // alert(title + ': ' + message);
                console.log('Status: ' +  xhr.status + " " + title + ': ' + message);
            });
    };


//OKTA Sign out integrations
    this.signOut = function (event, userClicked) {
        
        // AB.EDITORDER.checkForOrderEdits(event, 'logout');
        SWY.OKTA.signOutFromOkta(event);
        localStorage.refresh = 'do refresh';
        SWY.CONFIGSERVICE.setDomainCookie('SAFEWAY_KMSI', "logout", SWY.CONFIGSERVICE.resolvedBanner + '.com', 0 );
        if (userClicked != undefined) {
            localStorage.setItem('analyticsLogoutFlag', userClicked);
        } else {
            localStorage.setItem('analyticsLogoutFlag', true);
        }
    	return false;
  
    };
    
    this.signOutFromOkta = function(event) {
        var url = SWY.CONFIGSERVICE.oktaConfig.url;
        var logoutRedirectUrl = SWY.CONFIGSERVICE.oktaConfig.logoutRedirectURI;

        //Take the origin url and append the servelt to be sure it works on the user domain
        //logoutRedirectUrl = window.location.origin+'/bin/safeway/logout'
        console.log("logoutRedirectUrl", logoutRedirectUrl);
        SWY.CONFIGSERVICE.clearLocalStroage();
        var redirectLogout = url + '/login/signout?fromURI=' + logoutRedirectUrl;
        window.location.replace(redirectLogout);    	
    };

//OKTA refresh session
    this.refreshSession = function (event) {
        console.log("Okta: refreshSession");
        var authClient = new OktaAuth(SWY.CONFIGSERVICE.getOktaConfig());
        authClient.session.refresh()
            .then(function (session) {
                console.log("Existing session is refreshed");
            })
            .catch(function (err) {
                // there was a problem refreshing (the user may not have an existing session)
                console.log("Session can not be refreshed - Forced sign-out");
                SWY.OKTA.signOut(event);
                SWY.OKTA.system_error_logout();
            });
    };

//Detecting kmsi selection for OKTA Sign in integrations
    this.signIn = function (event) {
        //Display spinner
        let username = $('#label-email').val().trim();
        let password = $('#label-password').val().trim();
        let signinForm = $('#idform');
        if(username.length <=0 || ($("#errorMsgEmail") && $("#errorMsgEmail")[0].innerHTML.length > 0)){
            $('#label-email').focus();
        } else if (password.length <=0 || ($("#errorMsgPwd") && $("#errorMsgPwd")[0].innerHTML.length > 0)){
            $('#label-password').focus();
        }

        event.preventDefault();
        $('#idform').validator('validate');

        if(!$('#btnSignIn').hasClass('disabled')) {
            $('#loaderSignIn').removeClass('mask').addClass('unmask');
            $('#signInLoadingEmpty').removeClass('unmask').addClass('mask');
            $('#btnSignIn').prop('disabled', true).addClass('button-disable-color');
            $('#btnSignIn').attr('aria-disabled', 'true');

            var rememberMeCheckbox = $('#rememberMe');
            //var rememberMeCheckbox = $ ( '.check' );
            var kmsiFlag = false;

            if (rememberMeCheckbox.prop("checked") == true) {
                kmsiFlag = true;
                console.log("kmsi true");
                this.kmsi_Add(kmsiFlag);
            }
            else {
                kmsiFlag = false;
                console.log("kmsi false");
                this.signInOKTA(kmsiFlag);
            }
        }
        SWY.CONFIGSERVICE.setDomainCookie('SAFEWAY_KMSI', kmsiFlag, SWY.CONFIGSERVICE.resolvedBanner + '.com', 0 );
        return false;
    };


//OKTA Sign in integrations
    this.signInOKTA = function (kmsiFlag) {
        var authClient = new OktaAuth(SWY.CONFIGSERVICE.getOktaConfig());
        var username = $('#label-email').val();
        var password = $('#label-password').val();

        //SWY.CONFIGSERVICE.setCookie('ECommDeliveryVisited', 'false', 0);

        SWY.CONFIGSERVICE.clearLocalStroage();

        //Display spinner
        $('#loaderSignIn').removeClass('mask').addClass('unmask');
        $('#signInLoadingEmpty').removeClass('unmask').addClass('mask');
        $('#btnSignIn').prop('disabled', true).addClass('button-disable-color');

        $('#error-message').empty();

        if (username.length == 0 || password.length == 0) {
            $('#loaderSignIn').removeClass('unmask').addClass('mask');
            $('#signInLoadingEmpty').removeClass('mask').addClass('unmask');
            $('#btnSignIn').prop('disabled', false).removeClass('button-disable-color');
            $('#btnSignIn').attr('aria-disabled', 'false');
        }
        if ((username.length > 0) && (password.length > 0)) {
            var resetPasswordUrl = AB.resetPasswordPath;
            console.log('resetPasswordUrl', resetPasswordUrl);
            var randomStateStr = SWY.OKTA.generateWords(4);

            authClient.signIn({'username': username, 'password': password})
                .then(function (res) {
                    if (res.status === 'SUCCESS') {
                        console.log('res.status == SUCCESS');
                        AB.DATALAYER.handleReSignIn();
                        $('#signin-success-msg').html('Login Sucessful');
						if (SWY.CONFIGSERVICE.isLSEnabled) {
							localStorage.setItem('userSignInSuccess', true);
						}
                        // perform remember me logic when user successfully logged in
                        if (($("#idform").attr('data-idp')) == 'true'){
                            console.debug('data-idp is true, no prompt set');
                            authClient.token.getWithRedirect({
                                sessionToken: res.sessionToken,
                                responseType: 'code',
                                state: randomStateStr,
                                scope: ['openid', 'profile', 'email', 'offline_access', 'used_credentials']
                            });
                        }
                        else{
                            console.debug('data-idp is false, prompt set to none');
                            authClient.token.getWithRedirect({
                                sessionToken: res.sessionToken,
                                responseType: 'code',
                                prompt: 'none',
                                state: randomStateStr,
                                scope: ['openid', 'profile', 'email', 'offline_access', 'used_credentials']
                            });         
                        }
                    }
                    else if (res.status === 'PASSWORD_EXPIRED') {
                        console.log('res.status == PASSWORD_EXPIRED');

                        var resetPasswordLink = $('#resetPasswordLink').val();
                        window.location = resetPasswordLink;

                        //window.location = resetPasswordLink + '.html';
                        //SWY.ENFORCEMENT.sendRedirect(resetPasswordLinkPath, false, null);
                    }
                    else if (res.status === 'LOCKED_OUT') {
                        $('#error-message').html('<span class="error-wrong-pwd" tabindex="-1">Because of multiple login attempts your account has been temporarily locked for security reasons, please try again in 1 hour.</span>');
                        $('#loaderSignIn').removeClass('unmask').addClass('mask');
                        $('#signInLoadingEmpty').removeClass('mask').addClass('unmask');
                        $('#btnSignIn').prop('disabled', false).removeClass('button-disable-color');
                        $('#btnSignIn').attr('aria-disabled', 'false');    
                    }
                    else {
                        $('#loaderSignIn').removeClass('unmask').addClass('mask');
                        $('#signInLoadingEmpty').removeClass('mask').addClass('unmask');
                        $('#btnSignIn').prop('disabled', false).removeClass('button-disable-color');
                        $('#btnSignIn').attr('aria-disabled', 'false');
                    }
                })
                .catch(function (err) {
                    console.log("Login failed", err);
                    $('#loaderSignIn').removeClass('unmask').addClass('mask');
                    $('#signInLoadingEmpty').removeClass('mask').addClass('unmask');
                    $('#error-message').removeClass('d-none');
                    // UCA-662 - If forgot password URL is authored, it'll take preference.
                    if ($("#btnSignIn").attr('data-forgotPwdLink')) {
                        resetPasswordUrl = $("#btnSignIn").attr('data-forgotPwdLink') + ".html";
                    }
                    // Modified error messaging UCA-1258
                    var errorMessage ='';
                    // update analytics data layer
                    if (err.errorCode == 'E0000004') {
                         $('#error-message').html('<span class="error-wrong-pwd" tabindex="-1">The email address or password entered doesn&#x27;t match our records. Please make sure your email is correct or create a new account <a style=\"text-decoration: underline;color: #dd1e25;\" href="/account/short-registration.html"> here</a>.</span>');
                        errorMessage = $(".error-wrong-pwd").text();
                        AB.DATALAYER.setError(err.errorCode, "sign_in_error", errorMessage);
                    } else if(err.xhr.status === 0){
                        $('#error-message').html('<span class="error-wrong-pwd" tabindex="-1">Sorry, we&#x27;re having technical difficulties, please check back later.</span>');
                    } else {
                        $('#error-message').html('<span class="error-wrong-pwd" tabindex="-1">Sorry, we&#x27;re having technical difficulties and working on fixing them, please check back later.</span>');
                        errorMessage = $(".error-wrong-pwd").text();
                        if(err.errorCode){
                            AB.DATALAYER.setError(err.errorCode, "sign_in_error", err.errorMessage);
                        } else{
                            AB.DATALAYER.setError('E00000041', "sign_in_error", err.errorMessage);
                        }
                    }
                    $('#btnSignIn').prop('disabled', false).removeClass('button-disable-color');
                    $('#btnSignIn').attr('aria-disabled', 'false');
                    $('.error-wrong-pwd').blur();
                    $('.error-wrong-pwd').focus();
                });
        }
        else {
            console.log("Email and password are required");
            $('#btnSignIn').prop('disabled', false).removeClass('button-disable-color');
            $('#btnSignIn').attr('aria-disabled', 'false');
        }

        return false;
    };

    this.ssoSignIn = function (banner, modalLink) {
        // declare function variable(s)
        var funcName = 'ssoSignIn';

        //remove ECommSignInCount before redirecting to new banner
        SWY.CONFIGSERVICE.setCookie('ECommSignInCount', 1, 0);

        console.debug(funcName + ' ENTRY: targetBanner=' + banner);

        var signInURL = SWY.CONFIGSERVICE.bannerDomainMap[banner] + SWY.ssoPath;
        if (modalLink) {
            signInURL += "?ml=" + modalLink;
        }
        console.debug(funcName + ' signInURL=' + signInURL);

        window.location.href = signInURL;
    };

    /**
     * Generates random string delimited by hyphen.
     *
     * @param numOfWords        the number of words being generated in a string
     *
     * @return (String)            the generated words hyphen delimited
     */
    this.generateWords = function (numOfWords) {
        // declare function variable(s)
        var result = new Array(numOfWords);
        var numOfGenWords = numOfWords / 2 + 1;
        var selectedAdjectiveIndices = new Array(numOfGenWords);
        var selectedNounIndices = new Array(numOfGenWords);
        var workingSet = null;
        var workingSetCities = SWY.cities;
        var workingSetNames = SWY.names;
        var workingIndices = null;
        var randomString = null;
        var randomString2 = null;
        var randomIndex = -1;
        var funcName = 'SWY.OKTA.generateWords';
        var resign = $("#resign-in").text();

        // find random word(s)
        for (i = 0; i < numOfWords; i++) {
            // check if index is even, use random adjective
            if (i % 2 == 0) {
                // set working set to adjectives
                workingSet = SWY.adjectives;
                // set working indices to selected adjective indices
                workingIndices = selectedAdjectiveIndices;

            }
            else {	// if index is odd, use random noun
                // set working set to nouns
                workingSet = SWY.nouns;
                // set working indices to selected noun indices
                workingIndices = selectedNounIndices;
            }

            console.debug(funcName + ' workingSet=' + workingSet);
            // reset random index
            randomIndex = -1;
            // do generate random
            do {
                // get random index int until max number of words (adjectives or nouns)
                randomIndex = SWY.OKTA.getRandomInt(workingSet.length);
            } while (workingIndices.indexOf(randomIndex) > -1);	// get random index if it's not being used yet
            console.debug(funcName + ' randomIndex=' + randomIndex);
            // set random index to the working indices array
            workingIndices.push(randomIndex);
            // set result element to found word
            result[i] = workingSet[randomIndex];
            console.debug(funcName + ' result[' + i + ']=' + result[i]);
        }
        randomString = result[0] + '-' + result[1];
        randomString2 = result[2] + '-' + result[3];

        var randCity = workingSetCities[Math.floor(Math.random() * workingSetCities.length)];
        var randName = workingSetNames[Math.floor(Math.random() * workingSetNames.length)];


        //user coming from resign in page
        if (resign == 'true') {
            randomString += '-' + randCity + '-' + randName;
        }
        //user coming from regular sign in page
        else if (resign == 'false') {
            randomString += '-' + randCity + '-' + result[2];
        }
        //default
        else {
            randomString += '-' + randomString2;
        }

        return randomString;

    };


    /**
     * Gets random integer between 0 and max
     *
     * @param max            the integer upper limit
     */
    this.getRandomInt = function (max) {
        // return random int between 0 and max
        return Math.floor(Math.random() * Math.floor(max));
    };

    //KMSI-Add user to OKTA-KMSI group
    this.kmsi_Add = function (kmsiFlag) {
        var kmsiRequestHeader = AB.kmsiHttpOptions;
        var username = $('#label-email').val();
        var password = $('#label-password').val();
        var kmsi_params = JSON.stringify({emailId: username, password: password});
        $.ajax({
            url: AB.kmsiPath,
            type: 'POST',
            data: kmsi_params,
            headers: kmsiRequestHeader,
            success: function (data) {
                //kmsiID local storage
                localStorage.setItem('kmsiID', JSON.stringify(data));
                SWY.OKTA.signInOKTA(kmsiFlag);
                console.log("kmsi SUCESS:");
            },
            error: function (error) {
                //Even if KMSI fails forcing okta login
                SWY.OKTA.signInOKTA(kmsiFlag);
                console.log("kmsi ERROR:", error);
            }
        });
    };

    //KMSI-Delete user to OKTA-KMSI group
    this.kmsi_Delete = function (retrievedId) {
        var kmsiRequestHeader = AB.kmsiHttpOptions;
        $.ajax({
            url: AB.kmsiPath + '/' + retrievedId,
            type: 'DELETE',
            headers: kmsiRequestHeader,
            success: function (data) {
                console.log("kmsi-deleted success:", data);
                localStorage.removeItem("kmsiID");
            },
            error: function (error) {
                console.log("kmsi deleted error:", error);
            }
        });
    };

    this.kmsi_prefilled_check = function(){
    // checking SAFEWAY_KMSI cookie for auto selecting KMSI
          var kmsiVal = false;
          var rememberMeCheckbox = $('#rememberMe');
           kmsiVal = SWY.ENFORCEMENT.getCookie('SAFEWAY_KMSI');
               if ( kmsiVal == 'true' ){
                 rememberMeCheckbox.prop("checked",true);
               }
    }

    this.system_error_logout = function(){
        var cookie = SWY.CONFIGSERVICE.getCookie('SAFEWAY_KMSI');
        if(cookie){
        SWY.CONFIGSERVICE.setDomainCookie('SAFEWAY_KMSI', 'Error', SWY.CONFIGSERVICE.resolvedBanner + '.com', 0 );
        }
    }

    this.autoSignInWithSessionToken = function(sessionToken){

        if(sessionToken && sessionToken.length > 0) {

            var oktaRequest = SWY.CONFIGSERVICE.getOktaConfig().issuer
                            + '/v1/authorize?client_id=' + SWY.CONFIGSERVICE.getOktaConfig().clientId +
                '&redirect_uri=' + SWY.CONFIGSERVICE.getOktaConfig().redirectUri +
                '&response_type=code' +
                '&response_mode=query' +
                '&state=spooky-system-' + SWY.OKTA.generateWords(4) +
                '&nonce=ovJgrUobDYQKhiownVT9jU1GvtkRdpC4Eoyal2SfgGu6ezXG5b03393l08xbDGw8' +
                '&scope=openid%20profile%20email%20offline_access%20used_credentials' +
                '&sessionToken=' + sessionToken;

            SWY.CONFIGSERVICE.checkLocalStorageRefresh();

            AB.COMMON.userNotifyReloadPage('Password successfully updated!');

            localStorage.setItem('analyticsPwdResetSuccess', true);

            window.location.href = oktaRequest;


            /*authClient.token.getWithRedirect({
                sessionToken: sessionToken,
                responseType: 'code',
                prompt: 'none',
                state: randomStateStr,
                scope: ['openid', 'profile', 'email', 'offline_access', 'used_credentials']
            });*/
        }
    };

}).call(SWY.OKTA);

(function () {

    //check if ie
    var isInternetExplorer = window.ActiveXObject || "ActiveXObject" in window;
    //check if ie emulated from edge
    var isIEFromEdge = /Trident/.test(window.navigator.userAgent);
    // possible action values to perform store intent
    var _actions = ['changeStore'];

    // attach resize event based on current modal
    var attachResize = function (object, modal, modalRef) {
        if (object != null || typeof(object) != 'undefined') {
            if (modal) {
                object.addEventListener('resize', function (event) {
                    var windowWidth = $(object).width();
                    if (windowWidth > 768) {
                        var modalWidth = modalRef.width();
                        var rightMarginValue = "-" + (windowWidth - modalWidth) / 2 + "px";
                        var leftMarginValue = (windowWidth - modalWidth) / 2 + "px";
                        modal.css({"margin-right": rightMarginValue});
                        modal.css({"margin-left": leftMarginValue});
                    }
                    else {
                        modal.css({"margin": 0});
                    }
                });
            }
        }
    };

    this.hostDomain = location.hostname === "localhost" ? "https://shop-dev1-origin.tomthumb.com" : "";

    this.setArrowRightOnEnter = function (event) {
        if (event.keyCode === 13) {
            event.preventDefault();
            $('#disclaimer-content').collapse("toggle");
            this.setArrowRight();
        }
    };

    this.setArrowRight = function () {
        if ($(".svg-icon-Arrow_Right_Red.disclaimer-svg").hasClass("disclaimer-svg-rotate")) {
            $(".svg-icon-Arrow_Right_Red.disclaimer-svg").removeClass("disclaimer-svg-rotate");
        }
        else {
            $(".svg-icon-Arrow_Right_Red.disclaimer-svg").addClass("disclaimer-svg-rotate");
        }
    };

    this.bannerResolutionRedirect = function (newBanner, setReInit, modalLink) {
        if (newBanner !== 'reload') {
            var domain = window.location.hostname.replace(AB.userInfo.banner, newBanner);
            // when setReInit is passed to sso, EcommReInit cookie is set for new banner
            if (setReInit){
                if (modalLink) {
                    window.location.replace(window.location.protocol + '//' + domain + SWY.ssoPath + '?setReInit=true' + "&ml=" + modalLink);
                } else {
                    window.location.replace(window.location.protocol + '//' + domain + SWY.ssoPath + '?setReInit=true');
                }
            } else {
                if(modalLink) {
                    window.location.replace(window.location.protocol + '//' + domain + SWY.ssoPath + "?ml=" + modalLink);
                } else {
                    window.location.replace(window.location.protocol + '//' + domain + SWY.ssoPath);
                }	
            }
        }
        else {
            window.location.reload();
        }
    };

    this.updateStoreSelectionInCookie = function (storeData, resetEcomInfo) {
        var sharedSessionInfo = AB.COMMON.getCookie('SWY_SHARED_SESSION_INFO');
        if (sharedSessionInfo) {
            var sharedSessionInfoObj = '';
            try {
                sharedSessionInfoObj = JSON.parse(sharedSessionInfo);
            }
            catch (e) {
                sharedSessionInfoObj = '';
            }
            if (sharedSessionInfoObj && sharedSessionInfoObj.info) {
                if (!sharedSessionInfoObj.info.J4U) {
                    sharedSessionInfoObj.info.J4U = {};
                }
                if (storeData.storeId) {
                    sharedSessionInfoObj.info.J4U.storeId = storeData.storeId.toString();
                    sharedSessionInfoObj.info.J4U.zipcode = storeData.zipcode;
                    if (!sharedSessionInfoObj.info.J4U.userType || sharedSessionInfoObj.info.J4U.userType === 'A') {
                        sharedSessionInfoObj.info.J4U.userType = "G";
                    }
                    if (!sharedSessionInfoObj.info.J4U.userData) {
                        sharedSessionInfoObj.info.J4U.userData = {};
                    }

                    if (sharedSessionInfoObj.info.J4U.userData.guestStoreId) {
                        sharedSessionInfoObj.info.J4U.userData.guestStoreId = undefined;
                    }
                    if (sharedSessionInfoObj.info.J4U.userData.guestZipCode) {
                        sharedSessionInfoObj.info.J4U.userData.guestZipCode = undefined;
                    }
                }

                if (storeData.defaultStore) {
                    sharedSessionInfoObj.info.J4U.userData.defaultStore = storeData.defaultStore;
                }
                else {
                    sharedSessionInfoObj.info.J4U.userData.defaultStore = false;
                }

                if (storeData.defaultZipcode) {
                    sharedSessionInfoObj.info.J4U.userData.defaultZipcode = storeData.defaultZipcode;
                }
                
                if (typeof resetEcomInfo === 'undefined' ||  resetEcomInfo === 'null') {
                	resetEcomInfo = true;
                }

                if (storeData.eComStoreId && resetEcomInfo) {
                    if (!sharedSessionInfoObj.info.SHOP) {
                        sharedSessionInfoObj.info.SHOP = {};
                    }

                    // set shop storeId when set-store id target is 'shop' and userType is G or A
                    if(storeData.target && storeData.target.toLowerCase() === 'shop')
                    {
                        if (sharedSessionInfoObj.info.SHOP.userType === 'A' || sharedSessionInfoObj.info.SHOP.userType === 'G')
                        {
                              sharedSessionInfoObj.info.SHOP.storeId = storeData.storeId.toString();
                        }
                    }
                    else {
                           sharedSessionInfoObj.info.SHOP.storeId = storeData.eComStoreId.toString();
                    }
                       
                    // set shop zipcode
                    if (storeData.eComZipcode === 'dugonly') {
                    	sharedSessionInfoObj.info.SHOP.zipcode = storeData.zipcode;
                    } else {
                    	sharedSessionInfoObj.info.SHOP.zipcode = storeData.eComZipcode;
                    }   
                    // off banner case - originalZipcode is only populated from resolver when in off banner dug context 
                    if (storeData.resolverResp && typeof storeData.resolverResp.originalZipcode !== 'undefined' && storeData.resolverResp.originalZipcode !== null
                    		&& storeData.resolverResp.originalZipcode.length > 0){
                    	// set shop dugPostalZipcode
                    	sharedSessionInfoObj.info.SHOP.userData.dugPostalZipcode = storeData.resolverResp.zipCode;
                    	// set shop originalZipcode
                    	sharedSessionInfoObj.info.SHOP.userData.originalZipcode = storeData.resolverResp.originalZipcode;
                    	// set shop deliveryBanner
                    	sharedSessionInfoObj.info.SHOP.userData.deliveryBanner = storeData.resolverResp.deliveryBanner;                   	
                    	
                    	// @@@ TODO : need to set dprefVisited = false here in session cookie - new offbanner context 
                    	sharedSessionInfoObj.info.COMMON.dprefVisited = 'false';                  	
                    } else {
                    	sharedSessionInfoObj.info.SHOP.userData.dugPostalZipcode = "";
                    	sharedSessionInfoObj.info.SHOP.userData.originalZipcode = "";
                    	sharedSessionInfoObj.info.SHOP.userData.deliveryBanner = AB.userInfo.banner;                   	
                    }
                    // set shop userType
                    if (!sharedSessionInfoObj.info.SHOP.userType || sharedSessionInfoObj.info.SHOP.userType === 'A') {
                        sharedSessionInfoObj.info.SHOP.userType = "G";
                    }                    
                }
            }
            AB.userInfo.updateSessionCookies(sharedSessionInfoObj);
        }

    };

    this.updateStoreLocationInLocalStorage = function (storeData) {
        if (!AB.COMMON.isEmpty(storeData)) {
            var storeDataObj = localStorage.getItem('storeData') ? JSON.parse(localStorage.getItem('storeData')) : {};
            storeDataObj.storeLocation = {
                storeId: storeData.storeId ? storeData.storeId : storeData.id,
                zipcode: storeData.zipcode ? storeData.zipcode : storeData.zip,
                address: storeData.address,
                banner: storeData.banner,
                city: storeData.city,
                state: storeData.state,
                countryCode: storeData.countryCode
            };
            localStorage.setItem('storeData', JSON.stringify(storeDataObj));
        }
    };

    this.getStoreLocationFromYext = function (storeId, banner, callbackFn, errorCallbackFn) {
        if (storeId) {
            var yextConfig = SWY.CONFIGSERVICE.storeResolutionConfig.yextConfig;
            var url = this.hostDomain + yextConfig.locationsAPIPath.replace('{storeId}', storeId) + '?api_key=' + yextConfig.apiKey + '&v=' + yextConfig.version;
            $.ajax({
                type: "GET",
                headers: AB.j4uHttpOptions,
                dataType: "json",
                url: url,
                success: function (data) {
                    var storeLocationObj = data.response;
                    if (callbackFn) {
                        if (banner) {
                            storeLocationObj.banner = banner;
                        }
                        callbackFn(storeLocationObj);
                    }
                },
                error: function (response, status, error) {
                    if(errorCallbackFn) {
                        errorCallbackFn();
                    }
                }
            });
        }
    };

    this.getBannerLogo = function (bannerKey) {

        var logoUrl;
        var bannerLogoStr = $('#fulfillment-conflict-modal').attr('data-bannerlogomap');

        if (bannerLogoStr) {
            var bannerLogoMap = JSON.parse(decodeURIComponent(bannerLogoStr));
            logoUrl = bannerLogoMap[bannerKey];
        }

        return logoUrl;
    };
    

    this.getUCAStoresAPIPath = function () {
        var customerId = AB.userInfo.customerId ? AB.userInfo.customerId : '111-111-1111111111111';
        return SWY.CONFIGSERVICE.getDatapowerConfig().datapowerBasePath + '/api/uca/customers/' + customerId + '/stores';
        // return 'https://shop-dev3.safeway.com/abs/dvpub/api/uca/customers/' + customerId + '/stores';
    };



    this.reloadPage = function (milsec) {
        var currentUrl = window.location.href;
        setTimeout(function () {
            //location.reload();
            AB.COMMON.checkRedirectParameterReferralUrlPartners(currentUrl);
        }, milsec);
    };

    this.updateSyndicatedHeader = function() {
        var $ = AB.COMMON.resolveJquery();
        $('.current-store-panel-container').removeClass("mask");
        if (AB.userInfo.j4u.storeData.storeLocation.address !== "undefined" && AB.userInfo.j4u.storeData.storeLocation.address !== undefined && AB.userInfo.j4u.storeData.storeLocation.address !== null && AB.userInfo.j4u.storeData.storeLocation.address !== "") {
            $('.current-store-address').html(AB.userInfo.j4u.storeData.storeLocation.address);
        } else {
            var bannerDomainKeyMap = "www-" + AB.userInfo.banner,
                bannerDomainUrl = SWY.CONFIGSERVICE.bannerDomainMap[bannerDomainKeyMap];

            SWY.STORESELECTION.hostDomain = bannerDomainUrl;
            StoreAddressComp.getStoreAddressFromXapi(AB.userInfo.j4u.storeId, bannerDomainUrl , function (storeData) {
                $('.current-store-address').html(storeData.storeAddressModel.address.line1);
            }, function () {
                //error callback
            });
        }
    };

    this.syndicatedChangeStore = function() {
        var encodedCurrentUrl = encodeURIComponent(window.location.href),
            bannerDomainKeyMap = "www-" + AB.userInfo.banner,
            bannerDomainUrl = SWY.CONFIGSERVICE.bannerDomainMap[bannerDomainKeyMap],
            bannerLink,
            generatedTargetUrl;

            if(!bannerDomainUrl) {
                bannerLink = $('.menu-nav__center-container .banner-logo').attr("href");
                bannerDomainUrl = bannerLink.match(/^https:\/\/[^/]+/)
            }

            generatedTargetUrl = bannerDomainUrl + "/home.html?action=changeStore&goto=" + encodedCurrentUrl;

        window.location.href = generatedTargetUrl;
    };

    this.actionStoreModal = function() {
        var actionParam = AB.COMMON.getURLParameterByName("action", false);
        var redirectUrlSyndicated = (SWY.CONFIGSERVICE.isLSCompatible()) ? localStorage.getItem('gotoRedirectUrl') :  '';

        // check if page is NOT a sign in or re-sign in page - store modal must not show up on these pages
        if (!(SWY.ENFORCEMENTUTILS.isPageMatched({configPagePath: SWY.configService.wwwSignInPagePath}) ||
                SWY.ENFORCEMENTUTILS.isPageMatched({configPagePath: SWY.configService.reSignInPagePath}))) {
            // check if store modal will render through deep linking
            if (SWY.STORESELECTION.isStoreModalDeepLink()) {
                // initiate display of store modal
                SWY.STORESELECTION.displayStoreModal();
                // remove url parameters
                window.history.pushState({}, document.title, window.location.pathname);
            }
            else if (actionParam != null && actionParam === "changeStore" && !redirectUrlSyndicated) {
                window['storeFulfillmentModal'].zone.run(function() {
                    window['storeFulfillmentModal'].component.setModalDisplayData(3, null, AB.userInfo.j4u.zipcode, false, true);
                });
                // remove url parameters
                window.history.pushState({}, document.title, window.location.pathname);
            }
        }
    };

    /**
    * Renders store fulfillment modal based on modal type and active tab parameters.
    */
    this.displayStoreModal = function() {
        // declare function variable(s)
        var zipcode = '';
        var modalType = '';
        var activeTab = '';
        var modalTypeInt = 0;
        var modalTabName = '';

        // grab deep linking parameters from URL
        zipcode = AB.COMMON.getURLParameterByName('zipcode');
        modalType = AB.COMMON.getURLParameterByName('modaltype');
        activeTab = AB.COMMON.getURLParameterByName('activetab');
        // check if required parameters are set
        if (zipcode && modalType && activeTab) {
            // get modal type in it
            modalTypeInt = parseInt(modalType);
            // check if tab version is 2 or 3
            if (modalTypeInt > 0) {
                switch(activeTab) {
                    case '1':
                        modalTabName = 'modal-tab-instore';
                        break;
                    case '2':
                        modalTabName = 'modal-tab-delivery';
                        break;
                    case '3':
                        modalTabName = 'modal-tab-pickup';
                        break;
                    default:
                        modalTabName = 'modal-tab-instore';
                }
                window['storeFulfillmentModal'].zone.run(function() {
                    window['storeFulfillmentModal'].component.setModalDisplayData(modalTypeInt, modalTabName, zipcode, false, true);
                });
            }
        }
    }

    /**
    * Checks if action parameter value is valid.
    */
    this.isActionValid = function() {
        // declare function variable(s)
        var actionParam = AB.COMMON.getURLParameterByName('action');
        var actionValid = false;

        // check if action parameter is being set
        if (actionParam) {
            // loop through each possible action value(s)
            _actions.forEach(function(action) {
                // check if action param value is in the action list
                if (action.toLowerCase() === actionParam.toLowerCase()) {
                    actionValid = true;
                }
            });
        }

        return actionValid;
    }

    /**
    * Checks if deep linking to open store intent modal.
    */
    this.isStoreModalDeepLink = function() {
        // declare function variable(s)
        var zipcodeParam = AB.COMMON.getURLParameterByName('zipcode');
        var modalTypeParam = AB.COMMON.getURLParameterByName('modaltype');
        var activeTabParam = AB.COMMON.getURLParameterByName('activetab');
        var showModal = false;

        // check if action parameter for deep linking is valid value
        if (SWY.STORESELECTION.isActionValid()) {
            // check if required parameters are provided
            if (zipcodeParam && modalTypeParam && activeTabParam) {
                showModal = true;
            }
        }

        return showModal;
    }

}).call(SWY.STORESELECTION);
(function () {
    this.init = function () {
        console.log('init erums functions');
    };

    /* Check if the current/user selected store is eRUMS enabled */
    this.getStoreStatus = function() {
        AB.userInfo.isErumStore = true;
        AB.userInfo.erumsGuestEnabled = true;
    };


    /* set cart id */
    this.setCartId = function(cname,cid) {
        if(AB.COMMON.isLSCompatible()){
            localStorage.setItem(cname,cid);
        } else {
            SWY.CONFIGSERVICE.setCookie(cname,cid, -1);
        }
    }

    /* get cart id */
    this.getCartId = function(cname) {
        if(AB.COMMON.isLSCompatible()){
            return localStorage.getItem(cname);
        } else {
            return SWY.CONFIGSERVICE.getCookie(cname);
        }
    }

    /* get cart id */
    this.removeCartId = function(cname) {
        if(AB.COMMON.isLSCompatible()){
            localStorage.removeItem(cname);
        } else {
            document.cookie = cname+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        }
    }

    /* check cart id */
    this.checkCartId = function(cname) {
        if(AB.COMMON.isLSCompatible()){
            if(localStorage.getItem(cname) !== undefined && localStorage.getItem(cname) !== null)
                return true;
            else
                return false;
        } else {
            if(SWY.CONFIGSERVICE.getCookie(cname)!== undefined && SWY.CONFIGSERVICE.getCookie(cname) !== null)
                return true;
            else
                return false;
        }
    }

    /* invalidate cart id */
    this.invalidateCartId = function() {
        if (window['AB']['COMMON'].authorize()) {
            if(AB.COMMON.isLSCompatible())
                localStorage.removeItem("cartId");
            else
                document.cookie = "cartId=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        } else {
            if(AB.COMMON.isLSCompatible())
                localStorage.removeItem("guestCartId");
            else
                document.cookie = "guestCartId=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        }
    }
}).call(AB.COMMON);
(function (key, value) {

    this.doInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.sitePreInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.siteCoreUPreInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.siteUCAPreInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.siteJ4UPreInit = function () { //do not write any code, dynamic method, refer site.js

    };

    this.siteWWWPreInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.siteRecipesPreInit = function () { //do not write any code, dynamic method, refer site.js

    };

    this.doCoreInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.doUCAInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.doJ4UInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.doShopInit = function () {  //do not write any code, dynamic method, refer site.js
    };

    this.doWWWInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.doRecipesInit = function () { //do not write any code, dynamic method, refer site.js
    };

    this.init = function () {
        if(typeof AB.userInfo.geoYextAJAXCall == 'object') {
            //below promise helps to determine the www store first then do functionality
            //Once www store is determined, page will be reload, in that case do not want to any functionality to execute get aborted.
            //ref: common.js -> getGeolocation
            AB.userInfo.geoYextAJAXCall.then(function() {
                if(AB.userInfo.triggerUserInfoAJAXCall == true) {
                    AB.COMMON.getUserInfo();
                }
            });
        }
        else {
            // if ( AB.COMMON.authorize() ) {
            AB.COMMON.getUserInfo();
            // }
        }

        this.reloadForOkta();
    };

    this.commonPreInit = function () {
        /* only enable sticky header if our header is included in the page */
        //        if ($('.global-header').length > 0) {
        //            AB.FIXEDHEADER.init(); // As part of R6, we have to move to Bootstrap sticky header. Hereby I
        // have commented the code } this.updateRedirectURLCookie('');
        AB.postInitializeObject();
        AB.COMMON.trackJustForULocation();
        AB.ARIA.init();
        if (typeof AB.DATALAYER === 'object' && typeof AB.DATALAYER.init === 'function') {
            AB.DATALAYER.init();
        }
		if (SWY.CONFIGSERVICE.isLSEnabled && (localStorage.getItem('absdefaultecom') == null)) {
			if (AB.userInfo.preferenceMode == 'J4U') {
				AB.COMMON.checkForJ4UNonShop();
			} else {
				localStorage.setItem('absdefaultecom', false);
			}
		}
        AB.COMMON.protectLinksByUserState();
        AB.COMMON.updateGlobalNavigation();
        AB.COMMON.authorizeRewards();
        //commneted to be callled aster the erums sotr info call. So calling it in cart.service.ts file
        //AB.ALERT.checkPendingOrderAlert();
        AB.COMMON.focusTabMouse(document);
        AB.COMMON.checkRedirectParameter();
        AB.COMMON.updatePlaceholdersInOtherHref();
        AB.LAZYLOAD.init();
        AB.COMMON.loadCart();
    };

    this.syndicatedPreInit = function () {
        // This method will be called on Syndicated Pages Only which use our syndicated headers/footers
        AB.MINICART.init();
        var $ = AB.COMMON.resolveJquery();
        $('#footerNav').carousel({interval: false});
        AB.COMMON.mapSyndicatedCookie();
        //SWY.STORESELECTION.setCurrentJ4UStoreAddress();
        SWY.STORESELECTION.updateSyndicatedHeader();
        if((typeof(CookieConsent) === "object") && (CookieConsent !== null))
        {
            CookieConsent.init();
        }
    };

    this.resolveJquery = function () {
        var tempJquery = null;
        if (AB.$ != null) {
            tempJquery = AB.$;
        } else {
            tempJquery = jQuery;
        }

        return tempJquery;
    };

    //Deprecated, removed because of performance issues
    //TODO- test if not needed and remove
    this.focusTabMouse = function (d) {
        if (d) {
            var style_element = d.createElement('STYLE'),
                dom_events = 'addEventListener' in d,
                add_event_listener = function (type, callback) {
                    // Basic cross-browser event handling
                    if (dom_events) {
                        d.addEventListener(type, callback);
                    }
                    else {
                        d.attachEvent('on' + type, callback);
                    }
                },
                set_css = function (css_text) {
                    // Handle setting of <style> element contents in IE8
                    !!style_element.styleSheet ? style_element.styleSheet.cssText = css_text : style_element.innerHTML = css_text;
                }
            ;

            d.getElementsByTagName('HEAD')[0].appendChild(style_element);

            // Using mousedown instead of mouseover, so that previously focused elements don't lose focus ring on mouse
            // move
            add_event_listener('mousedown', function () {
                set_css(':focus{outline:0 !important;}::-moz-focus-inner{ outline:0 !important; }');
            });

            add_event_listener('keydown', function () {
                set_css('');
            });
        }
    };

    this.getBreakpoint = function () {
        var wWidth = $(window).width();
        var layout = 'desktop';

        if (wWidth < 768) {
            layout = 'mobile';
        }
        else if (wWidth >= 768 && wWidth < 992) {
            layout = 'tablet';
        }
        else if (wWidth >= 992) {
            layout = 'desktop';
        }

        return layout;
    };

    this.getCarouselItemCount = function () {
        var breakpoint = this.getBreakpoint();
        return this[breakpoint + "CarouselItemCount"];
    };

    this.arrangetabletItem = function () {
        return 2;
    };

    this.arrangemobileItem = function () {
        return 1;
    };

    this.setCookie = function (cname, cvalue, exdays) {
        SWY.CONFIGSERVICE.setCookie(cname, cvalue, exdays);
    };

    this.getCookie = function (cname) {
        return SWY.CONFIGSERVICE.getCookie(cname);
    };

    this.getUserInfo = function () {
        $.get(AB.userInfoPath).done(function (objResponse) {
        	// if user has type C / R , but no active token is available, stop flow and reconcile the user's state
        	if ( AB.COMMON.authorize() && !JSON.parse(objResponse).SWY_SHOP_TOKEN ) {
        		AB.COMMON.reconcileExpiredTokenUserState();
        	} else {
        		if(AB.userInfo.earlyInitialize == false) {
                    AB.userInfo.prepareSharedInfo();
                }
                AB.userInfo.prepareUserInfo(objResponse);

                //Code to get users first name and store it to display in header
                //localStorage.setItem("userFirstName", AB.userInfo.valueOf(FirstName));
                if (typeof AB.userInfo.branchId !== 'undefined') {
                    AB.aisleHTMLPath += '.' + AB.userInfo.branchId + '.html';
                }

                AB.COMMON.initAngularServiceCall();

                try {
                    AB.COMMON.setExtendedUserType();
                }
                catch (err) {
                    console.log(err);
                }
                if (typeof AB.DELIVERYPREF.ssoToDotNet == "function") {
                    AB.DELIVERYPREF.ssoToDotNet();
                }

                AB.CART.init();
                AB.PROMOTIONS.init();
                AB.MINICART.init();
                AB.COUPON.init();
                AB.COMMON.searchInit();
                AB.COMMON.doInit();
                $('body').trigger('onGetUserInfoLoad', [objResponse]);

                if ($('.dot-net-redirect').length > 0) {
                    AB.COMMON.dotNetTrasnsfer();
                }

                if(!AB.COMMON.isErumsPage())
                {
                    AB.CHECKPROFILE.init();
                    if(SWY.configService.isClosedStoreEnabled === "true") {
                        closedStoreComp.init();
                    }
                    conflictModalComp.init();
                    userActionComp.init();
                    if(SWY.CONFIGSERVICE.enablePrebookSlotModal()){
                        prebookSlotsInvoke.init();
                    }
                }
                OMS_OrderSummaryComp.init();
            }        		
        }).fail(function () {
            //AB.COMMON.redirectErrorPage();
        });
    };
    
    
    /**
     * When a user has userType C or R but has no token available on client side, 
     * we need to fix the session for the site's functionality to behave properly
     * 
     * Based on the user's KMSI status , this function results in two possible actions
     * - If KMSI is true, redirect to /bin/safeway/sso
     * - If KMSI is false, sign the user out
     * 
     */
    this.reconcileExpiredTokenUserState = function () {
    	var kmsiVal = SWY.ENFORCEMENT.getCookie('SAFEWAY_KMSI');
    	// set ECommRedirectURL cookie - both sso and logout will use it
		redirectPath = encodeURIComponent(window.location.href);
        AB.COMMON.setCookie('ECommRedirectURL', redirectPath, 0);
    	
        if (kmsiVal == 'true'){
	        // redirect to /sso for new token
	        window.location.href = SWY.ssoPath;
		} else {
			// sign out from okta and call /unified/logout
			SWY.OKTA.signOut();
		}
    };

    this.setExtendedUserType = function () {
        var extendedType = AB.userInfo.userType.toLowerCase();
        if (extendedType != 'g') {
            extendedType += ((typeof AB.userInfo.orderCount != "undefined" && AB.userInfo.orderCount > 0) ? "e" : "n");
        }
        AB.userInfo.extendedType = extendedType;
    };

    this.transitionToDotNet = function (path, clearCookie) {
        // declare function variable(s)
        var encodedCurrentUrl = encodeURIComponent(window.location.href);
        //var marketingParam = '';

        if (clearCookie != undefined && clearCookie == 1) {
            AB.COMMON.setCookie('usercomingfrom', '', 0);
        }
        var shopOrigin = '';
        shopOrigin = window.location.origin.replace('www', 'shop');
        // set current url as "r" to ECommMarketing cookie
        //marketingParam = encodeURIComponent('r=' + encodedCurrentUrl);
        //SWY.CONFIGSERVICE.setCookie('ECommMarketing', marketingParam, -1);
        if (SWY.CONFIGSERVICE.oktaConfig.tokenPassToDotNet == "false") {
            window.location.href = shopOrigin + path;
        } else {
            window.location.href = shopOrigin + '/welcome/redirect.html?target=' + path;
        }
    };

    this.dotNetTrasnsfer = function () {
        var dotNetTargetUrl = SWY.CONFIGSERVICE.getCookie('ECommDotNetTargetUrl');
        var eCommSSOActive = SWY.CONFIGSERVICE.getCookie('ECommSSOActive');
        var valid = false;
        if (dotNetTargetUrl) {
            SWY.CONFIGSERVICE.setCookie('ECommDotNetTargetUrl', '', -1);
            if (!(eCommSSOActive && eCommSSOActive === 'N')) {
                valid = true;
            }
        }

        if (!valid) {
            window.location.href = '/';
        }
    };

    this.checkAndRedirectDotNetUrl = function (path, clearCookie) {
        var syndicatedHeader = $('meta[name=syndicatedHeader]').attr("content");

        if (syndicatedHeader == 'true') {
            window.location.href = path;
        }
    };

    /**
     * Determines where to redirect the user to either .NET create an account page or AEM need zipcode page.
     *
     * @param createAccountURL            the .NET create an account url
     * @param needZipCodeURL            the AEM need zipcode page path
     */
    this.createAnAccount = function (createAccountURL, needZipCodeURL, updateCookie) {
        // declare function variable(s)
        var zipcode = AB.userInfo.zipcode;
        var isInNoServiceArea = AB.userInfo.isInNoServiceArea;
        var redirectURL = null;
        var funcName = 'createAnAccount';

        console.debug(funcName + ' ENTRY: createAccountURL=' + createAccountURL + ', needZipCodeURL=' + needZipCodeURL + ', updateCookie=' + updateCookie);
        // check if ECommRedirectURL needs to be updated
        if (updateCookie) {
            // update redirect url cookie
            this.updateRedirectURLCookie(location.pathname + window.location.search);
        }
        // check if user zipcode is in no service area
        if (typeof isInNoServiceArea != 'undefined' && isInNoServiceArea == 'Y') {
            // redirect user to need zipcode page
            redirectURL = needZipCodeURL;
        }
        else {
            // check if zip code exists in user info
            if (zipcode != null && zipcode.length > 0) {
                // build .NET create an account url
                redirectURL = createAccountURL;
                redirectURL += '?zipcode=';
                redirectURL += zipcode;
            }	// no zip code found
            else {
                // redirect user to need zipcode page
                redirectURL = needZipCodeURL;
            }
        }
        window.location.href = redirectURL;
        console.debug(funcName + ' EXIT: redirectURL=' + redirectURL);
    };

    this.checkRedirectParameter = function () {
        // get goto url
        var redirectURL = this.getURLParameterByName("goto", false);

        if (redirectURL != null) {
            var localRedirectURL = localStorage.getItem('gotoRedirectUrl');
            // check if goto redirect url is already set in local storage, no need to set goto url to redirect url cookie
            if (!(localRedirectURL !== "null" && localRedirectURL !== "undefined" && localRedirectURL !== null && localRedirectURL !== undefined)) {
                redirectURL = AB.COMMON.updateGotoUrl(decodeURIComponent(redirectURL));
                this.updateRedirectURLCookie(redirectURL);
            }
        }

    };

    this.updateGotoUrl = function(gotoUrl) {
        var currentParams = null;
        var gotoParams = null;
        var newGotoUrl = gotoUrl;

        if (gotoUrl) {
            // get goto url search query strings
            gotoParams = gotoUrl.split('?', 2);
            // get goto url without query string
            newGotoUrl = gotoParams[0];
            // get current url search query strings
            currentParams = window.location.search;
            // remove goto parameter
            currentParams = AB.COMMON.removeURLParameterByName(currentParams, 'goto');
            // check if url ? delimiter is part of the query string
            if (currentParams && currentParams.indexOf('?') == 0) {
                // remove url ? delimiter
                currentParams = currentParams.substr(1);
            }
            // check if at least one goto param exists
            if (gotoParams[1]) {
                // merge current url parameters into goto url
                // NOTE: if parameter exists on both, keep the goto url parameter
                newGotoUrl += '?' + SWY.QUERYSTRING.mergeMarketingParams(gotoParams[1], currentParams);
            }
            else {	// no goto param
                newGotoUrl += '?' + currentParams;
            }
        }

        return newGotoUrl;
    };

    this.checkRedirectParameterReferralUrl = function (originUrl) {
        var redirectURL = this.getURLParameterByNameReferralUrl(originUrl, "goto", false);
        if (redirectURL != null) {
            var localRedirectURL = localStorage.getItem('gotoRedirectUrl');
            // check if goto redirect url is already set in local storage, no need to set goto url to redirect url cookie
            if (!(localRedirectURL !== "null" && localRedirectURL !== "undefined" && localRedirectURL !== null && localRedirectURL !== undefined)) {
                this.updateRedirectURLCookie(decodeURIComponent(redirectURL));
            }
        }
        else {
            this.updateRedirectURLCookie(originUrl);
        }
    };

    this.checkRedirectParameterReferralUrlPartners = function (originUrl) {
        var redirectURL = this.getURLParameterByNameReferralUrl(originUrl, "goto", true);
        //var redirectURL = this.removeURLParameterByName(originUrl,"goto")
        if (!this.isEmpty(redirectURL)) {
            //For partner's site do a local storage for the redirecturl and use it once syndicated cookie for guest is available
            localStorage.setItem("gotoRedirectUrl", redirectURL);
            // reset ECommRedirectURLCookie or remove the goto redirect url
            this.updateRedirectURLCookie('');
            //} else {
            // Just reload the page - no goto url
            location.reload();
        }
    };

    /**
     * This will append the GOTO parameter with the link user is trying to clikc.
     * @param link the user will be redirected to the link.
     * @param pagePath the goto parameter value that will be appended.
     */
    this.reSignInRedirectHandler = function (link, pagePath) {

        var funcName = 'reSignInRedirectHandler';
        console.debug(funcName + ' ENTRY: pagePath=' + pagePath);

        if (pagePath && pagePath.length > 0) {
            link.href += '?goto=' + pagePath;
        }

        AB.DATALAYER.setModalLinkCookie("reSignIn|signIn");

        console.debug(funcName + ' EXIT');

    };
    /**
     * Updates ECommRedirectURL cookie.
     *
     * @param pagePath            the page resource path or uri
     *
     */
    this.updateRedirectURLCookie = function (pagePath) {
        // declare function variable(s)
        var cookieValue = null;
        var funcName = 'updateRedirectURLCookie';
        var encodedPath = encodeURIComponent(pagePath);

        console.debug(funcName + ' ENTRY: pagePath=' + pagePath);
        // check if page path is populated
        if (pagePath != null && pagePath.length > 0) {
            console.debug(funcName + ' Set ECommRedirectURL cookie with new resource path.');
            // set cookie to new page path
            this.setCookie('ECommRedirectURL', encodedPath, 0);
        }
        else {	// page path is either empty string or not populated
            // get existing page path from cookie
            cookieValue = this.getCookie('ECommRedirectURL');
            console.debug(funcName + ' cookieValue=' + cookieValue);
            // check if cookie page path has value
            if (cookieValue != null && cookieValue.length > 0) {
                console.debug(funcName + ' Delete ECommRedirectURL cookie.');
                // delete cookie
                this.setCookie('ECommRedirectURL', encodedPath, 0);
            }
        }
        console.debug(funcName + ' EXIT');
    };

    this.showCreateAccontModal = function (clickSource) {
        $('#createAccountModal').modal({'show': true});
        if (!this.isEmpty(clickSource)) {
            var n = clickSource.indexOf("#");
            if (n == -1) {
                $('#accountModalLinkToSignIn').attr('data-redirectUrl', clickSource);
                $('#accountModalLinkToCreateAccount').attr('data-redirectUrl', clickSource);
            } else {
                clickSource = window.location.href;
                $('#accountModalLinkToSignIn').attr('data-redirectUrl', clickSource);
                $('#accountModalLinkToCreateAccount').attr('data-redirectUrl', clickSource);
            }
        }
        else {
            clickSource = window.location.href;
            $('#accountModalLinkToSignIn').attr('data-redirectUrl', clickSource);
            $('#accountModalLinkToCreateAccount').attr('data-redirectUrl', clickSource);
        }
        // Move focus back to the source
        $('.modal').on('hidden.bs.modal', function () {
            /*I have removed the $(clickSource).focus(), it is not the "id", it is an url*/
        });
    };

    this.showCreateAccontModalJ4U = function (clickSource,modalLink) {
        let redirectPath;
        if (modalLink === 'creat-account-modal-link') {
            $('#unifiedRegistrationModal').modal({'show': true});
        } else {
            $('#signInModal').modal({'show': true});
            rightDrawerComp.closeDrawer();
        }

        if (!this.isEmpty(clickSource)) {
            let n = clickSource.indexOf("#");
            if (n == -1) {
                $('#linkToSignIn').attr('data-redirectUrl', clickSource);
                $('#linkToShortReg').attr('data-redirectUrl', clickSource);
                redirectPath = encodeURIComponent(clickSource);
            } else {
                clickSource = window.location.href;
                $('#linkToSignIn').attr('data-redirectUrl', clickSource);
                $('#linkToShortReg').attr('data-redirectUrl', clickSource);
                redirectPath = encodeURIComponent(clickSource);
            }
        }
        else {
            clickSource = window.location.href;
            $('#linkToSignIn').attr('data-redirectUrl', clickSource);
            $('#linkToShortReg').attr('data-redirectUrl', clickSource);
        }
        if(redirectPath && redirectPath !== null ){
            AB.COMMON.setCookie('ECommRedirectURL', redirectPath, 0);
        }
        // Move focus back to the source
        $('.modal').on('hidden.bs.modal', function () {
            /*I have removed the $(clickSource).focus(), it is not the "id", it is an url*/
        });
    };
    this.showReSignInModal = function () {
        window.location.href = '/account/re-sign-in.html';
    };

    this.authorize = function () {
        return (typeof AB.userInfo.userType != "undefined" && (String(AB.userInfo.userType).toLowerCase() == null ||
            String(AB.userInfo.userType).toLowerCase() == '' || String(AB.userInfo.userType).toLowerCase() == 'g'
            || String(AB.userInfo.userType).toLowerCase() == 'a')) ? false : true;
    };

    this.isAnonymous = function () {
        return (typeof AB.userInfo.userType == "undefined" || (String(AB.userInfo.userType).toLowerCase() == null ||
            String(AB.userInfo.userType).toLowerCase() == '' || String(AB.userInfo.userType).toLowerCase() == 'a')) ? true : false;
    };

    /**
     * Determines if session expired and redirect the user to AEM sign-in page.
     *
     */
    this.sessionNotExpired = function () {
        // declare function variable(s)
        /*var cookieValue = null;
         var funcName = 'sessionNotExpired';
         // get cookie
         cookieValue = this.getCookie('ECommTokens');
         console.debug(funcName + ' cookieValue=' + cookieValue);
         // check if cookie has value
         if (cookieValue != null && cookieValue.length > 0) {
         return true;
         } else {
         // redirect to sign in page
         window.location.href = AB.signInLinkPath;
         return false;
         }*/

        /* @todo: Above logic has to be rewritten according to new cookie */
        return true;
    };

    this.protectLinksByUserState = function () {
        //hide all hidden ones immediately
        $('a.user-protected-link').each(function () {
            var userType = String(AB.userInfo.userType).toLowerCase();
            var link = $(this);

            if (link.hasClass('user-hide-' + userType)) {
                link.hide();
            }            
            
        });

        /**
        * Function to trigger SignIn Modal/CreateAccount if link is protected.
        */
       if(!AB.COMMON.authorize()){
            $("a.data-link-protected-signIn, a.data-link-protected-createAccount").click(function(e){
                let linkType;
                if($(this).hasClass('data-link-protected-createAccount')){
                    linkType = "creat-account-modal-link";
                }
                else if( $(this).hasClass('data-link-protected-signIn')){
                    linkType = "signIn-account-modal-link";
                }
                let url = $(this).attr('href');
                AB.COMMON.showCreateAccontModalJ4U(url,linkType);
                e.preventDefault();
            });
        }

        //bind click handler to all even if added later (ie. flyouts)
        $('body').on('click', 'a.user-protected-link', function (event) {
            var userType = AB.userInfo.userType.toLowerCase();
            if(userType === "" || userType === 'undefined' || userType === null){
                userType = 'g';
            }
            var link = $(this);
            var modalLink = link['0'].id;
            var redirectPath = link.attr('href');
            
            // hide slice 3 shop fly out when showing sign in modal 
            if ( $('#shopFlyOutModal').is(':visible') ) {
            	$('#shopFlyOutModal').modal('hide');
            }
            
            if (!link.hasClass('syndicated')) {
                if (link.hasClass('user-prompt-' + userType)) {
                    event.preventDefault();
                    if (userType === 'r') {
                        var cookie = SWY.CONFIGSERVICE.getCookie('USED_CREDENTIALS');
                        if (cookie && cookie.length > 0) {
                            window.location.href = redirectPath;
                        } else {
                            // check if redirect path exists
                            if (redirectPath) {
                                // check if redirect path does not start with http
                                if (redirectPath.indexOf('http') < 0) {
                                    // capture current page and set it to ECommRedirectURL cookie
                                    AB.COMMON.updateRedirectURLCookie(window.location.protocol + '//' + window.location.host + redirectPath);
                                }
                                else {  // redirect path starts with http
                                    // capture current page and set it to ECommRedirectURL cookie
                                    AB.COMMON.updateRedirectURLCookie(redirectPath);
                                }
                            }
                            // show re-sign in page
                            AB.COMMON.showReSignInModal();
                        }
                    }  else {
                        $('.myaccount-flyout-wrapper div.sidebar').removeClass('sidebar--effect');
                        $('.myAccount-flyout-backdrop').hide();
                        $('.menu-nav__mobile-menu-trigger .menu-nav__icon-container').removeClass('activeMenu');
                        $('.button__item.menu-nav__red-caret-down').removeClass('menu-nav__red-caret-up');
                        AB.COMMON.showCreateAccontModalJ4U(redirectPath,modalLink);
                    }
                }
            }
        });
    };

    /**
     * Allow links for registered users or drop sign in modal for guest (zip code) and anonymous users
     *
     */
    this.updateGlobalNavigation = function () {
        // Handle global navigation meniu (my purchases)
        $('.global-navigation-list').find('li a').each(function (index) {
            // checks to replace placeholders (aisles branchId) with user info value
            updateHrefPlaceholder(this);
        });
    };

    this.authorizeRewards = function () {
        if (AB.COMMON.authorize() && AB.COMMON.sessionNotExpired()) {
            $('#j4u-rewards-carousel').show();
        }
        else {
            $('#j4u-rewards-carousel').hide();
        }
    };

    /**
     * Global placeholder replacement
     *
     */
    this.updatePlaceholdersInOtherHref = function () {
        let globalNav = $('#globalNav').find('li a')
        $('a[href]').not(globalNav).each(function (index) {
            updateHrefPlaceholder(this);
        });
        updateHrefPlaceholder($('a.aisle-flyout-link'));
    };

    this.updateAislePath = function () {
        updateHrefPlaceholder($('a.aisle-flyout-link'));
    };


    this.updateMobileAislePath = function (el) {
        updateHrefPlaceholder(el);
    };

    /**
     * Replace link's href attribute placeholders
     * Ex: Aisles meniu has '(branchId)' in url and should be numeric for user
     */
    function updateHrefPlaceholder(htmlElement) {
        var navUrl = $(htmlElement).attr('href');
        if (typeof navUrl != 'undefined') {
            // Url is defined
            var startPlaceHolder = navUrl.indexOf('(');
            var endPlaceHolder = navUrl.indexOf(')');
            if (startPlaceHolder != -1 && endPlaceHolder != -1) {
                // Url has open and close brackets for placeholders
                var placeHolder = String(navUrl).substring(startPlaceHolder + 1, endPlaceHolder);
                var strValue = AB.userInfo.getValue(placeHolder);
                if (typeof strValue != 'undefined') {
                    // Placeholder has any value for current user
                    navUrl = String(navUrl).replace('(' + placeHolder + ')', strValue);
                    // Replace the link with new one without placeholder
                    $(htmlElement).attr('href', navUrl);
                }
            }
        }
    }

    this.searchInit = function () {

        if (document.querySelector('.search-wrapper form .search-container') == null) {
            return;
        }

        var searchValue = '';
        var inputSearch = $('.search-container .search-container-wrapper').find('.input-search.ecomm-search');
        var searchIcon = $('.search-container .search-container-wrapper').find('.searchBtn');
        var searchType = $('.search-container')[0].dataset["searchtype"];
        var searchString = this.getURLParameterByName('q');

        if (searchString != null && searchString != "null") {
            $('#searchNrResults').attr("data-search", searchString);
            inputSearch.val(searchString);
            searchIcon.addClass("svg-icon-search-Close").removeClass("svg-icon-search-grey");
            searchIcon.removeAttr('aria-label');
            searchIcon.attr('aria-label', 'clear search');
        } else {
            searchIcon.addClass("svg-icon-search-grey").removeClass("svg-icon-search-Close");
            searchIcon.removeAttr('aria-label');
            searchIcon.attr('aria-label', 'search');
        }

        let el = Array.from(inputSearch);
        for (let i in el) {
            $(el[i]).on('keyup input paste', function () {
                searchIcon.addClass("svg-icon-search-grey").removeClass("svg-icon-search-Close");
                searchIcon.removeAttr('aria-label');
                searchIcon.attr('aria-label', 'search');
                searchValue = $(el[i]).val();
                if (searchValue != '' && searchValue == searchString) {
                    searchIcon.addClass("svg-icon-search-Close").removeClass("svg-icon-search-grey");
                    searchIcon.removeAttr('aria-label');
                    searchIcon.attr('aria-label', 'clear search');
                } else {
                    searchIcon.addClass("svg-icon-search-grey").removeClass("svg-icon-search-Close");
                    searchIcon.removeAttr('aria-label');
                    searchIcon.attr('aria-label', 'search');
                }

                /* Below is the simple code we know there only 3 search box in the code.
                 * when value update one textbox, other text box should reflect
                 */
                (i != 0) ? $(el[0]).val(searchValue) : '';
                (i != 1) ? $(el[1]).val(searchValue) : '';
                (i != 2) ? $(el[2]).val(searchValue) : '';
                //window.history.pushState({}, null, getSearchUrl() + replaceUrlParam(window.location.search, 'q', searchValue));
            });
        }

        searchIcon.on('click', function () {
            if (searchIcon.hasClass("svg-icon-search-Close")) {
                inputSearch.val('');
                searchIcon.addClass("svg-icon-search-grey").removeClass("svg-icon-search-Close");
                searchIcon.removeAttr('aria-label');
                searchIcon.attr('aria-label', 'search');
                //J4U perform search without parameter when search-Close clicked
                if (searchType === "offerSearch") {
                    window.location.search = AB.COMMON.removeURLParameterByName(window.location.search, 'q');	
                    window.history.pushState({}, null, window.location.search);
                }
            } else {
                //window.history.pushState({}, null, getSearchUrl() + replaceUrlParam(window.location.search, 'q', searchValue));
                $(this).closest('form').submit();
            }
        });

        AB.AUTOSUGGEST.init();
        AB.POPULARSEARCH.init();
    };

    this.removeURLParameterByName = function (url, parameter) {
        url = url.replace(new RegExp('[?&]' + parameter + '=[^&#]*(#.*)?$'), '$1').replace(new RegExp('([?&])' + parameter + '=[^&]*&'), '$1');
        return url;
    };

    this.getURLParameterByName = function (name, doDecode) {

        var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);

        if (doDecode == false) {
            return match ? match[1].replace(/\+/g, ' ') : null;
        }
        else {
            return match ? decodeURIComponent(match[1].replace(/\+/g, ' ')) : null;
        }

    };

    this.getURLParameterByNameReferralUrl = function (url, name, doDecode) {

        var match = RegExp('[?&]' + name + '=([^&]*)').exec(url);

        if (doDecode == false) {
            return match ? match[1].replace(/\+/g, ' ') : null;
        }
        else {
            return match ? decodeURIComponent(match[1].replace(/\+/g, ' ')) : null;
        }
    };

    this.getDugStoreBanner = function () {
        var bannerName = SWY.CONFIGSERVICE.getResolvedBanner();
        return bannerName;
    };

    this.formatCurrency = function (num) {
        return parseFloat(Math.round(num * 100) / 100).toFixed(2);
    };

    this.checkPendingOrder = function () {
        var pendingOrderId = AB.COMMON.getCookie('OrderNumber');

        return (pendingOrderId != undefined && pendingOrderId != '') ? true : false;
    };

    this.checkUnAttendedDelivery = function () {
        return (AB.unattendedDeliveryIsEnabled == true);
    };

    this.filterInit = function () {
        if (AB.COMMON.getBreakpoint() == 'mobile') {
            var filter = document.querySelector('.filter-panel.left-hand-navi-simple');
            var panel = (filter) ? filter.querySelector('.collapsed') : false;
            var labels = (filter) ? filter.querySelector('#filter_by_brand') : false;
            if (panel && labels) {
                panel.setAttribute("aria-expanded", false);
                labels.setAttribute("aria-expanded", false);
                labels.classList.remove("show");
            }
        }

    };

    this.isLSCompatible = function () {
        return SWY.CONFIGSERVICE.isLSCompatible();
    };

    this.isEmpty = function (obj) {

        // null and undefined are "empty"
        if (obj == null) return true;

        // Assume if it has a length property with a non-zero value
        // that that property is correct.
        if (obj.length > 0) return false;
        if (obj.length === 0) return true;

        // If it isn't an object at this point
        // it is empty, but it can't be anything *but* empty
        // Is it empty?  Depends on your application.
        if (typeof obj !== "object") return true;

        // Otherwise, does it have any properties of its own?
        // Note that this doesn't handle
        // toString and valueOf enumeration bugs in IE < 9
        for (var key in obj) {
            if (hasOwnProperty.call(obj, key)) return false;
        }

        return true;
    };

    this.verifyGeneralMills = function () {
        if (SWY.ENFORCEMENTUTILS.isAuthenticatedAsRegistered()) {
            // Need this to be moved to angular so it won't make the call on all pages after moving the headers to
            // preinit in uca
            AB.UCASERVICES.getLoyaltyPartnersBoxTops(AB.COMMON.setBoxtopAuth);
        }
    };

    this.setBoxtopAuth = function (data) {
        /*
        if (data['loyaltyPartners']) data['loyaltyPartners'].forEach(function (loyaltyPartner) {
            if ((loyaltyPartner.name == "GeneralMills") && (loyaltyPartner.planNumber.length > 1)) {
                AB.userInfo.boxTopAuth = true;
            }
        });
        */

        // refactoring due to IE11 forEach incompatibility
        if (data['loyaltyPartners']) {
            var dataLoyaltyPartners = data['loyaltyPartners'];
            for (var i = 0; i < dataLoyaltyPartners.length; i++) {
                var loyaltyPartner = dataLoyaltyPartners[i];
                if ((loyaltyPartner.name == "GeneralMills") && (loyaltyPartner.planNumber.length > 1)) {
                    AB.userInfo.boxTopAuth = true;
                }
            }
        }
    };

    this.myListDisclaimerStyle = function () {
        $(".my-list-disclaimer").removeClass("col-lg-offset-3 col-lg-9").addClass("col-lg-12");
    };

    this.trackJustForULocation = function () {
        $(document).ready(function () {
            var currentLocation = window.location.href;
            var locationTokens = currentLocation.split('/');
            if (locationTokens[locationTokens.length - 1] == 'justforu.html') {
                $('.my-disclaimer-component').addClass('d-none d-md-block');
            }
        });
    };

    this.ucaAPIPathWithCustomerId = function (path) {
        var customerId = AB.userInfo.customerId ? AB.userInfo.customerId : '1';
        return path.replace('{customerId}', customerId);
    };

    this.ucaAPIPathWithBannerName= function(path) {
        var bannerName = SWY.CONFIGSERVICE.getResolvedBanner();
        return path.replace('{banner}', bannerName);
    };

    this.redirectErrorPage = function () {
        window.location.href = '/error-page/500.html';
    };

    this.reloadForOkta = function () {
        if (SWY.CONFIGSERVICE.isLSCompatible()) {
            if (localStorage.refresh) {
                localStorage.removeItem('refresh');
                SWY.STORESELECTION.reloadPage(1000);
            }
        }
    };

    /*This date util function date in September 30, 2018 format*/
    this.formatDate = function(renewdate) {
        if(renewdate && !$.isEmptyObject(renewdate)) {
            var date = new Date(renewdate);
            var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            var day = date.getDate();
            var monthIndex = date.getMonth();
            var year = date.getFullYear();
            return monthNames[monthIndex] + ' ' + day + ', ' + ' ' + year;
        }
    };

    this.initAngularServiceCall =function() {
        if (window['appConfigServiceRef'] != undefined) {
            window['appConfigServiceRef'].zone.run(function () {
                window['appConfigServiceRef'].service.initServiceCall();
            });
        }
    };

    this.mapSyndicatedCookie = function() {
        var SyndicatedCookie = SWY.CONFIGSERVICE.getCookie('SWY_SYND_USER_INFO');
        if(SyndicatedCookie){
            var SyndicatedCookieData = JSON.parse(SyndicatedCookie);
            AB.userInfo.j4u.storeId = SyndicatedCookieData.storeId;
            AB.userInfo.j4u.zipcode = SyndicatedCookieData.storeZip;
            AB.userInfo.j4u.storeData.storeLocation.address = SyndicatedCookieData.storeAddress;
        }
    };

    /**
     * This method will generate UUID ver 4, with Timestamp and Random Number.
     * @param strHHID optional Customer HHID
     * @param strName optional Customer name.
     * @returns {string} returns the unique UUID ver 4.
     */
    this.generateUUID = function(strHHID, strName){
        var dateTimeMillis = new Date().getTime();

        var random = Math.floor( performance.now() * dateTimeMillis );

        // Get the number from HHID.
        if( strHHID && strHHID.length > 0 && !isNaN(strHHID) ) {
            random += Number(strHHID);
        }

        // Generate the Base 10 of that string.
        if( strName && strName.length > 0 ){
            random += this.__encode(strName);
        }

        // Generate the UUID ver 4 using the Random Seed.
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/([xy])/g, function (character) {
            // Get the Randomized integer from 0 to 16.
            var randomized = (random + Math.random() * 16) % 16 | 0;
            random = Math.floor(random / 16);
            // replace tht character base 16 if it is x
            // else replace it with 8, 9, a or b
            return (character === 'x' ? randomized : (randomized & 0x3 | 0x8)).toString(16);
        });
    };
    // private function for converting a String to Base10.
    this.__encode = function(string) {
        var number = "";
        var length = string.length;
        for (var i = 0; i < length; i++)
            number += string.charCodeAt(i).toString(10);
        return Number(number);
    };

    this.popupUserErrorMessage = function(title, message, callback){
        var modalDiv = $('div#popupUserErrorModal')
            , titleDiv = modalDiv.find('#popupErrorModalTitle')
            , messageDiv = modalDiv.find('#popupErrorModalInfo')
            , _modalButtons = modalDiv.find('button[data-dismiss="modal"]');

        titleDiv.html(title);
        messageDiv.html(message);

        modalDiv.modal();
        // For A11y
        titleDiv.focus();

        var _closeModal = function(){
            titleDiv.html('');
            messageDiv.html('');

            _modalButtons.off('click', _closeModal);

            if(callback && typeof callback === 'function'){
                callback();
            }
        };

        // remove the message.
        _modalButtons.on('click', _closeModal);

    };

    /**
     *  Check if user is on Erums page
     *
     */
    this.isErumsPage = function() {
        var currentUrl = window.location.href;
        var erumsUrl = '/erums';
        if ( currentUrl.indexOf(erumsUrl) > 0 ) {
            return true;
        } else {
            return false;
        }
    };

    this.userNotifyInit = function(){
        if(! SWY.CONFIGSERVICE.isLSCompatible()) {
            return;
        }

        var text = localStorage.getItem('notifyMessage');

        var messageJson = JSON.parse(text);

        if(messageJson && !messageJson.isDisplayed){
            if( messageJson.message && messageJson.message.length > 0 ){
                this.userNotify(messageJson.message);
            }
            messageJson.isDisplayed = true;
            text = JSON.stringify( messageJson );
            localStorage.setItem('notifyMessage', text);
        }
    };

    this.userNotifyReloadPage = function(message) {
        if(SWY.CONFIGSERVICE.isLSCompatible()){
            message = {message: message, isDisplayed: false};
            message = JSON.stringify(message);
            localStorage.setItem('notifyMessage', message);
        }
    };

    /**
     * For now only Success notification for User.
     * Options only contains right now timeToShow in milliseconds
     * TODO: extent this function for Errors and Warnings too.
     * @param message String message to show to user
     * @param options custom options
     */
    this.userNotify = function(message, options){
        var def = {
            timeToShow: 8000
        };

        options = $.extend({}, def, options);
        var $notify = $('.notify-wrapper');
        var $msg = $('.notify-wrapper .message');

        // If already visible hide it and then show the next one.
        if( $notify.is(':visible') ){
            $notify.fadeOut(100);
            // Kill the timeout.
            clearTimeout( $notify.data('timeToShow') )
        }

        setTimeout(function() {
            $msg.text(message);
            $msg.attr('aria-live', "polite");
        }, 150);

        $notify.fadeIn("slow");

        var timeOut = setTimeout( function(){
            $notify.fadeOut('slow');
        }, options.timeToShow);

        $notify.data('timeToShow', timeOut);
    };

    this.autoSignInIfSessionTokenAvailable = function(){
        // Check the user if alredy signed in.
        if(!this.authorize()){
            var sessionToken = this.getURLParameterByName('sessionToken', false);
            if(sessionToken && sessionToken.length > 0){
                // Auto Sign-in the user using the session token.
                SWY.OKTA.autoSignInWithSessionToken(sessionToken);
            }
        }
    };

    //Temporary
    //@TODO The modal pop-up will be integrated with the new header.
    this.showFulfillmentModal = function() {
        $('reserve-nav__button').click(function($e){
            $e.preventDefault();
        })
        $('#storeFulfillmentModal').modal({'show': true, backdrop: "static"});
        AB.DATALAYER.setFulfillmentModalView();
        $('#storeFulfillmentModal').on('shown.bs.modal', function(){
            $('#storeFulfillmentModal .create-modal-close-icon').focus();
        })
    }

    this.toggleShopByCategoryText = buttonElement => {
        const rectangleWrapperElement = $(buttonElement).closest('.c-shop-by-category__view--v1');

        if (rectangleWrapperElement) {

            const buttonLabelElement = rectangleWrapperElement.find('.view-more-categories-js');
            const buttonLabel = buttonLabelElement.text();
            const hiddenItem = rectangleWrapperElement.find('.full-aisles-js');

            if (buttonLabel === 'View More') {
                hiddenItem.removeClass('d-none');
            } else {
                hiddenItem.addClass('d-none');
            }

            buttonLabelElement.text(
                buttonLabel ===  'View More' ? 'View Less' : 'View More'
            );

        }
    }

    this.prepopulateUserId = function(){
        var userData ='';
        $('body').on('onGetUserInfoLoad', function(e, data){
            userData = JSON.parse(data);
            if(userData){
                $('#label-email').val(userData.userId);
            }
        })
    };

    this.loadCart = function() {
        let cart = $(".menu-nav__sub-item-container");
        let cart_link = cart && cart.find('.menu-nav__sub-item');
        let syndicatedHeader = $('meta[name=syndicatedHeader]').attr("content");
        cart.on('click', function() {
            if(!AB.COMMON.authorize()) {
                AB.COMMON.showCreateAccontModalJ4U();
            }
        });
    };

    this.removeNETCookie = function () {

        var unneededCookies = [{
                name: "c_activeaccordion"
            },
                {
                    name: "c_completedaccordions"
                },
                {
                    name: "c_deliverysubtype"
                },
                {
                    name: "c_deliverytype"
                },
                {
                    name: "c_dugstoreid"
                },
                {
                    name: "c_edititemids"
                },
                {
                    name: "c_guestdugzip"
                },
                {
                    name: "c_Info_DeliveryInfo"
                },
                {
                    name: "c_loadedaccordions"
                },
                {
                    name: "c_orderCartCount"
                },
                {
                    name: "c_orderStoreId"
                },
                {
                    name: "c_orderTotal"
                },
                {
                    name: "c_slots"
                },
                {
                    name: "c_token"
                },
                {
                    name: "c_totalorders"
                }
            ];
            for (let cookie of unneededCookies) {
                this.deleteCookie(cookie.name);
            }
    };

    this.deleteCookie = function (name, domain) {
        commonSuffix = '=; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/';
        document.cookie = name + commonSuffix;
    };

    this.checkForEditOrderMode = function() {
        let result = false;
        // check for edit order cookies set by ERUMS
        if ( AB.COMMON.getCookie('SlotInfo') !== 'undefined' && AB.COMMON.getCookie('OrderStoreId') !== 'undefined' && AB.COMMON.getCookie('SlotInfo') !== '' && AB.COMMON.getCookie('OrderStoreId') !== '' ){
            result = true;
        }
        return result;
    };

    this.setDefaultStoreId = function() {
        const defaultStoreId = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultStoreId;
        const defaultZipcode = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultZipcode;
         
        let swyObject = { 'info': { 'COMMON': {}, 'J4U': {}, 'SHOP': {}}};
        swyObject.info.COMMON.isClosed = 'false';
        swyObject.info.COMMON.preference = 'J4U';
        swyObject.info.J4U.storeId = defaultStoreId;
        swyObject.info.J4U.zipcode = defaultZipcode;
        swyObject.info.SHOP.storeId = defaultStoreId;
        swyObject.info.SHOP.zipcode = defaultZipcode;

        AB.COMMON.updateUserSession(swyObject, null, function() {
            window.location.reload();
        });
    };

    //True means display new product card and false means display current/old product card
    this.isProductCardABtestEnbaled = function() {
        // let defaultValue = false;
        // if(AB.productCardTest === '') {
        //     try {
        //         if(this.isLSCompatible()) {
        //             let lsTestFlag = localStorage.getItem('EOT_908');
        //             AB.productCardTest = lsTestFlag === "EOT-908_Product-Card_New" ? true : false
        //         } else {
        //             AB.productCardTest = window['analyticsSwy']['testFlags']['EOT_908'] === "EOT-908_Product-Card_New" ? true : false;
        //         }
        //     } catch (error) {
        //         AB.productCardTest = defaultValue;
        //     }
        // }
        // return AB.productCardTest;
        return true;
    }

    /**
     *
     * Function to call userInfo and get new access Token.
     * Used for slot modal expire token scenarios.
     * **/
    this.reconcileSlotModal = function() {
        return new Promise((resolve) => {
            let newToken;
            $.get(AB.userInfoPath).done(function (objResponse) {
                let parsedResponse = JSON.parse(objResponse);
                //check if access token available in response
                if (parsedResponse.SWY_SHOP_TOKEN) {
                    newToken = parsedResponse.SWY_SHOP_TOKEN;
                    resolve(newToken);
                }
                //if access token not available set localstorage and make /sso call
                else {
                    localStorage.setItem("triggerSlotModal", "true");
                    let redirectUrl = SWY.ssoPath + '?goto=' + window.location.href;
                    SWY.ENFORCEMENT.sendRedirect(redirectUrl);
                }
                //if userInfo call fails reload page to set right user context.
            }).fail(function () {
                window.location.reload();
            });
        });
    }

    /**
     * Validate Session Token
     */
    this.isSessionTokenValid = function(){
        let isActive = false;
		let hasSharedSessionCookie = false;
		let hasSessionToken = false;
				
		// check AB.userInfo.userType value
		if (AB.COMMON.authorize() && AB.userInfo.customerId && AB.userInfo.SWY_SHOP_TOKEN) {
			// check for active SWY_SHARED_SESSION_INFO cookie
			let strSharedSession = SWY.CONFIGSERVICE.getCookie('SWY_SHARED_SESSION_INFO');
        	let objSharedSession = {};
        	try {
            	if (strSharedSession) {
                	objSharedSession = JSON.parse(strSharedSession);
                    hasSharedSessionCookie = (typeof objSharedSession == "object") ? true : false;
            	}
        	}
        	catch (e) {
                hasSharedSessionCookie = false;
        	}
			// check for session token and expire date in AB.userInfo obj - set by userInfo servlet
			try {
				if (SWY.ENFORCEMENT.isTokenActive()) {
                   	hasSessionToken = true
               	}					
			} catch (e) {
				hasSessionToken = false
			}
			
			if (hasSharedSessionCookie && hasSessionToken) {
				isActive = true;
			}			
        }
        return isActive;
    }

    /**
     * Handle session expiry for KMSI and non-KMSI users
     * If KMSI user make sso call
     * NON-KMSI reload the page so session converts to Guest.
     *
     * NOTE: This Method is only tested for Registration Subscription Flow.
     * **/
    this.handleSessionExpiryUser = function (redirectPath){

        let kmsiCookie = this.getCookie('SAFEWAY_KMSI');
        if(kmsiCookie === 'true'){
            let redirectPath = redirectPath ? redirectPath : window.location.href;
            let redirectUrl = SWY.ssoPath + '?goto=' + redirectPath;
            SWY.ENFORCEMENT.sendRedirect(redirectUrl);
        }
        else {
            window.location.reload();
        }
    }


	/** 
	*  This function checks to see if a user is set to J4U preference with a store that is a nonshop store
	*  and the banner default store is set as the SHOP store
	*/
	this.checkForJ4UNonShop = function() {
		let storeConfig = SWY.CONFIGSERVICE.storeResolutionConfig;
		
		if ( (AB.userInfo.branchId != AB.userInfo.j4u.storeId) 
				&& (AB.userInfo.branchId == storeConfig.bannerDefaultStoreId) ) {
			localStorage.setItem('absdefaultecom', true);			
		} else {
			localStorage.setItem('absdefaultecom', false);	
		}		
	}
	
	/**
	* method to identify a signed in user and if their session is active
	*
	* The session is an active signed in user if 3 requirments are met :
	*   - AB.userInfo.userType = R / C
	*	- An active SWY_SHARED_SESSION_INFO cookie exists
	*   - User has a currently active accessToken  
	*
	* @return object {} with an customerId field with a vlaue populated or null
	*/
	this.getActiveSessionUser = function () {
        let customerIdObj = { 'customerId' : null };
		
		if (AB.COMMON.isSessionTokenValid()) {
			customerIdObj.customerId = AB.userInfo.customerId;
		}
		
		return customerIdObj;		
	};
	

    // update datalayer for top nav links only if AB.DATALAYER exists
    this.setTopNavPreviousPage = function (link, dontSetFilter) {
        if (AB.DATALAYER) {
            AB.DATALAYER.setTopNavPreviousPage(link, dontSetFilter);
        }
    };

}).call(AB.COMMON);

/* jshint esnext: true */
(function () 
{
    this.updateUserSession = function(updateObj, updateProfile, callback, modalLink)
    {
        if(typeof updateObj === 'object' && updateObj !== '' && updateObj !== undefined)
        {
            if((updateObj.info !==  undefined) && (updateObj.info.COMMON !== undefined || updateObj.info.J4U !== undefined || updateObj.info.SHOP !== undefined || updateObj.info.offbanner !== undefined))
            {
                const userType = (AB.userInfo.userType).toLowerCase();
                let updateCookieList;
                let gSessionCookie;
                let swySharedSessionInfoCookie;
                let absPreviousLoginCookie;
                let swySyndUserInfo;
                let crossBanner = updateObj.info.offbanner ? true : false;

                if(userType === 'g' || userType === 'a')
                {
                    if (crossBanner === true) {
                        window.location = window.location.protocol + '//' + this.buildHost(updateObj.info.offbanner.banner) + '/?storeId=' + updateObj.info.offbanner.storeId + '&preference=' + updateObj.info.offbanner.preference;
                    }
                    else {
                        updateCookieList = ['abs_gsession','SWY_SHARED_SESSION_INFO','abs_previouslogin','SWY_SYND_USER_INFO'];
                        gSessionCookie = SWY.CONFIGSERVICE.getCookie(updateCookieList[0]);
                        swySharedSessionInfoCookie = SWY.CONFIGSERVICE.getCookie(updateCookieList[1]);
                        absPreviousLoginCookie = SWY.CONFIGSERVICE.getCookie(updateCookieList[2]);
                        swySyndUserInfo = SWY.CONFIGSERVICE.getCookie(updateCookieList[3]);

                        if(this.isCookieEmpty(gSessionCookie))
                        {
                            this.createSessionCookie(updateCookieList[0],updateObj);
                        }
                        if(this.isCookieEmpty(swySharedSessionInfoCookie))
                        {
                            this.createSessionCookie(updateCookieList[1],updateObj);
                        }
                        if(this.isCookieEmpty(absPreviousLoginCookie))
                        {
                            this.createSessionCookie(updateCookieList[2],updateObj);
                        }
                        if(this.isCookieEmpty(swySyndUserInfo))
                        {
                            this.createSessionCookie(updateCookieList[3],updateObj);
                        }

                        this.updateUserCookieList(updateCookieList, updateObj);
                    }   
                }
                else if(userType === 'r' || userType === 'c')
                {
                    updateCookieList = ['SWY_SHARED_SESSION_INFO','abs_previouslogin','SWY_SYND_USER_INFO'];
                    swySharedSessionInfoCookie = SWY.CONFIGSERVICE.getCookie(updateCookieList[0]);

                    if(updateProfile !== false)
                    {
                        if(crossBanner !== true){
                            let preference      = updateObj.info.COMMON.preference.length>0 ? updateObj.info.COMMON.preference: swySharedSessionInfoCookie.info.COMMON.preference,
                                currentBanner   = SWY.CONFIGSERVICE.getResolvedBanner(),
                                zipcode         = preference === 'J4U' ? updateObj.info.J4U.zipcode : updateObj.info.SHOP.zipcode,
                                empty           = null,
                                shopStoreId     = null;

                            if(preference.toUpperCase() === "J4U")
                            {
                                let J4UstoreId  = (updateObj.info.J4U.storeId && updateObj.info.J4U.storeId.length>0) ? updateObj.info.J4U.storeId : swySharedSessionInfoCookie.info.J4U.storeId,
                                    intent      = "J4U";
                                return this.updateUcaProfile(intent,J4UstoreId,empty, currentBanner, zipcode, updateObj, updateCookieList, empty, callback);
                            }
                            else if(preference.toUpperCase() === "DUG")
                            {
                                let intent      = "DUG";
                                shopStoreId     = (updateObj.info.SHOP.storeId && updateObj.info.SHOP.storeId.length > 0) ? updateObj.info.SHOP.storeId : swySharedSessionInfoCookie.info.SHOP.storeId;
                                return this.updateUcaProfile(intent,empty, shopStoreId, currentBanner, zipcode, updateObj, updateCookieList, empty, callback);
                            }
                            else
                            {
                                let intent = "DELIVERY";
                                shopStoreId     = (updateObj.info.SHOP.storeId && updateObj.info.SHOP.storeId.length > 0) ? updateObj.info.SHOP.storeId : swySharedSessionInfoCookie.info.SHOP.storeId;
                                return this.updateUcaProfile(intent,empty,shopStoreId,currentBanner, zipcode, updateObj, updateCookieList, empty, callback);
                            }
                        } else {
                            let preference      = updateObj.info.offbanner.preference.length>0  ? updateObj.info.offbanner.preference : (function(){throw "Preference is empty"}());
                            let storeId         = updateObj.info.offbanner.storeId.length>0  ? updateObj.info.offbanner.storeId :(function(){throw "StoreId is empty"}()) ;
                            let currentBanner   = updateObj.info.offbanner.banner.length>0 ? updateObj.info.offbanner.banner : (function(){throw "Banner is empty"}());
                            let zipcode         = updateObj.info.offbanner.zipcode.length>0 ? updateObj.info.offbanner.zipcode: (function(){throw "Zipcode is empty"}());
                            let intent          = preference.toUpperCase();
                            let offbanner       = true;
                            let empty           = null;
                            let J4UStoreId;
                            let shopStoreId;
                            
                            if( intent === "J4U"){
                                J4UStoreId = storeId;
                                shopStoreId = empty;
                            }else if(intent === "DUG"){
                                J4UStoreId = empty;
                                shopStoreId = storeId;
                            } else {
                                J4UStoreId = empty;
                                shopStoreId = storeId;
                            }
                            return this.updateUcaProfile(intent, J4UStoreId, shopStoreId, currentBanner, zipcode, updateObj, updateCookieList, offbanner, callback, modalLink);
                        }
                    }
                    else
                    {
                        this.updateUserCookieList(updateCookieList, updateObj);
                    }
                }
            }
            else
            {
                return "Parameter passed doesn't match appropriate format";
            }
        }
        else
        {
            return "Parameter passed is either empty or not an object";
        }
    };


    //----------------------------------------------------------------------------
    /**
     * Updates the UCA Profile based on the preference
     */
    //----------------------------------------------------------------------------
    this.updateUcaProfile = function (intent, J4UstoreId, shopStoreId, currentBanner,zipcode, updateObj, updateCookieList, offbanner, callback, modalLink)
    {
        let customerId                  = AB.userInfo.customerId;
        currentBanner = currentBanner.replace(/\s|-/g,'');
        if(customerId)
        {
            let updatedBanner           = currentBanner;
            let updatedZipcode          = zipcode;

            let dataObj,
                responseObj,
                erumsDeliveryType,
                updateCart = true,
                updatedStoreId,
                attendedVal = '';

            if (intent === "J4U")
            {
                updatedStoreId     = J4UstoreId;
                updateCart         = false;
                dataObj            = '{"stores":[{"storeId":"' + updatedStoreId + '","storePreference":"Preferred","address":{"zipCode":"'+updatedZipcode+'"},"banner":"' +updatedBanner + '"}],"preferences":[{"categoryCode":"FULFILLMENT","subCategoryCode":"METHOD","value":"J4U","bannerId":"'+updatedBanner+'"}]}';
            }
            else if (intent === "DUG")
            {
                updatedStoreId     = shopStoreId;
                erumsDeliveryType  = 'dug';
                dataObj            = '{"stores":[{"storeId":"' + updatedStoreId + '","storePreference":"DriveUp","address":{"zipCode":"'+updatedZipcode+'"},"banner":"'+updatedBanner+'"}],"preferences":[{"categoryCode":"FULFILLMENT","subCategoryCode":"METHOD","value":"DUG","bannerId":"'+updatedBanner+'"}]}';
            }
            else if (intent === "DELIVERY")
            {
                updatedStoreId     = shopStoreId;
                attendedVal        = 'attended';
                erumsDeliveryType  = 'delivery';
                dataObj            = '{"preferences":[{"categoryCode":"FULFILLMENT","subCategoryCode":"METHOD","value":"DELIVERY", "bannerId":"'+updatedBanner+'"}],"postalCodes":[{"purposes":["DELIVERY"],"postalCode":"'+updatedZipcode+'","bannerId":"'+updatedBanner+'"}]}';
            }
            
            if ( AB.COMMON.getCartId('cartId') === null ) {
                updateCart = false;
            }
            
            const url = this.updateUCAProfileAPIPath(customerId);
            
            $.ajax({
                url: url,
                type: 'POST',
                headers: AB.ucaHttpOptionsUpdateProfile,
                dataType: "json",
                data: dataObj,
                async: false,

                success: function(response, textStatus, xhr){
                    //Set Slot value in EcommReinit Cookie to get slot for new store.
                    SWY.ENFORCEMENTUTILS.updateReInitSite('slot');
                    //Clear J4U coupons localstorage.
                    AB.COUPON.removeLocalStorage();
                    //Clear abCart local storage.
                    AB.CART.removeLocalStorage();
                    if (updateCart){
                        minicartCompRef.component.cartService.updateStoreForExistingCart(updatedStoreId, erumsDeliveryType, attendedVal, offbanner, function(cartResp){
                            if (offbanner === true) {
                                if (modalLink) {
                                    window.location = window.location.protocol + '//' + AB.COMMON.buildHost(currentBanner) + SWY.ssoPath + '?ml=' + modalLink;
                                } else {
                                    window.location= window.location.protocol + '//' + AB.COMMON.buildHost(currentBanner) + SWY.ssoPath;
                                }
                            }else{
                                AB.COMMON.updateUserCookieList(updateCookieList, updateObj);
                                responseObj = {
                                    'success': true,
                                    'message': 'We have Successfully updated your profile'
                                }
                                if (typeof callback === 'function') {
                                    callback(responseObj);
                                } else {
                                    return responseObj;
                                }
                            }
                        });
                    } else {
                        if (offbanner === true) {
                            if (modalLink) {
                                window.location = window.location.protocol + '//' + AB.COMMON.buildHost(currentBanner) + SWY.ssoPath + '?ml=' + modalLink;
                            } else {
                                window.location = window.location.protocol + '//' + AB.COMMON.buildHost(currentBanner) + SWY.ssoPath;
                            }
                        }else{
                            AB.COMMON.updateUserCookieList(updateCookieList, updateObj);
                            responseObj = {
                                'success': true,
                                'message': 'We have Successfully updated your profile'
                            }
                            if (typeof callback === 'function')
                            {
                                callback(responseObj);
                            }
                            else
                            {
                                return responseObj;
                            }
                        }
                    }
                },
                error: function(xhr, status, error) {
                    responseObj = {
                        'success': false,
                        'message': xhr.statusText,
                    }
                    
                    if (xhr.status === 401 || xhr.status === 403){                   	                	                    	
                    	var kmsiVal = SWY.ENFORCEMENT.getCookie('SAFEWAY_KMSI');
                    	
                    	//if we get unauthorized error, we assume the accessToken is missing/expired - so need to resolve the user state
                    	if ( kmsiVal === 'true' ) {
                    		//do sso with goto= currentpage 
                    		let redirectUrl = SWY.ssoPath + '?goto=' + window.location.href;
                    		SWY.ENFORCEMENT.sendRedirect(redirectUrl);
                    	}
                    	else {
                    		window.location.reload();
                    	}
                    } else {
                    	if (typeof callback === 'function') {
                    		callback(responseObj);
                    	} else {
                    		return responseObj;
                    	}
                    }                    
                }
            });
        }
        else
        {
            responseObj = new Error("CustomerId is not Available to Update Profile");
            responseObj.name = 'CustomerId';
            if (typeof callback === 'function') {
                callback(responseObj);
            } else {
                return responseObj;
            }
        }
        //return responseObj;
    };


    //----------------------------------------------------------------------------
    /**
     * Creates the UCA Profile API path 
     */
    //----------------------------------------------------------------------------
    this.updateUCAProfileAPIPath = function(customerId)
    {
        return SWY.CONFIGSERVICE.datapowerConfig.cncServiceBasePath + '/api/uca/customers/' + customerId +'/stores';
    };

    //----------------------------------------------------------------------------
    /**
     * Returns the host of the current location.
     */
    //----------------------------------------------------------------------------
    this.getHost = function () 
    {
        let hostname = window.location.hostname;
        let host = hostname.substr(0, hostname.indexOf('.'));

        return host;
    };

    //----------------------------------------------------------------------------
    /**
     * Builds the host by replacing the current domain with the banner being passed to this function.
     */
    //----------------------------------------------------------------------------
    this.buildHost = function(banner) {
        // declare function variable(s)
        var host = this.getHost();
        var port = window.location.port;
        var newHost = '';

        // check if port exists
        if (port && port.length > 0) {
            // build host with banner and port
            newHost = host + '.' + banner + '.com:' + port;
        }
        else {  // port does not exist
            // build host with just banner only
            newHost = host + '.' + banner + '.com';
        }

        return newHost;
    }
    //----------------------------------------------------------------------------
    /**
     * Updates the cookie list with the values from updateObj.
     */
    //----------------------------------------------------------------------------
    this.updateUserCookieList = function (updateCookieList, updateObj) 
    {
        $.each(updateCookieList, function(index, value)
            {
            let getCookieResponse = SWY.CONFIGSERVICE.getCookie(value);
            if(!AB.COMMON.isCookieEmpty(getCookieResponse))
            {
                AB.COMMON.updateAbsCookies(value, updateObj);
            }
        });  
    };

    //----------------------------------------------------------------------------
    /**
     * Returns true or false based on the type of cookie value.
     */
    //----------------------------------------------------------------------------    
    this.isCookieEmpty = (cookieValue) => {
        var isCookieEmpty = false;
        if(cookieValue === '' || cookieValue === undefined || cookieValue === null){
            isCookieEmpty = true;
        }
        return isCookieEmpty;
    };


    //----------------------------------------------------------------------------
    /**
     * Reads and updates the cookies with the response received.
     */
    //----------------------------------------------------------------------------
    this.updateAbsCookies = (cookieName,obj) => {
        var cookieObj = JSON.parse(SWY.CONFIGSERVICE.getCookie(cookieName));
        var encodedCookieObj;
        if(cookieName === 'abs_gsession' || cookieName === 'SWY_SHARED_SESSION_INFO' || cookieName === 'abs_previouslogin'){
            cookieObj = this.compareAndUpdateObj(obj,cookieObj);
            encodedCookieObj = encodeURIComponent(JSON.stringify(cookieObj));
            if(SWY.CONFIGSERVICE.tagCookiesSecure()){
                document.cookie = cookieName + '=' + encodedCookieObj + '; path=/;secure;'; 
            }
            else{
                document.cookie = cookieName + '=' + encodedCookieObj + '; path=/';
            }
        }

        // if cookie passed is syndicated look only for zipcode, StoreAddress Preference and storeId
        else if (cookieName === 'SWY_SYND_USER_INFO'){
            if((obj.info.J4U !== null || obj.info.SHOP !== null) && cookieObj !== null){
                var storePreference = obj.info.COMMON.preference,
                    storeId         = (storePreference !== undefined) ?(storePreference.toLowerCase() === 'j4u' ? obj.info.J4U.storeId : obj.info.SHOP.storeId) : "",
                    storeZip        = (storePreference !== undefined) ?(storePreference.toLowerCase() === 'j4u' ? obj.info.J4U.zipcode : obj.info.SHOP.zipcode) : "",
                    storeAddress    = (storePreference !== undefined) ?(storePreference.toLowerCase() === 'j4u' ? obj.info.J4U.address : obj.info.SHOP.address) : "";
                if(storeZip){
                	cookieObj.storeZip = storeZip;
                }
                if(storeId){
                	cookieObj.storeId = storeId;
                }
                if(typeof storeAddress !== 'undefined' && storeAddress !== null){
                	cookieObj.storeAddress = storeAddress;
                }
                if(storePreference ){
                	cookieObj.preference = storePreference;
                }
                SWY.CONFIGSERVICE.setDomainCookie(cookieName, encodeURIComponent(JSON.stringify(cookieObj)), SWY.CONFIGSERVICE.resolvedBanner + '.com', 0);
            }
        }
    };


    //----------------------------------------------------------------------------
    /**
     * Iterates Json objects and updates cookieobj values with obj if attribute matches
     */
    //----------------------------------------------------------------------------
    this.compareAndUpdateObj = (obj, cookieObj) => {
        Object.keys(obj).forEach(objKey => {
            Object.keys(cookieObj).forEach(cookieObjKey => {
                if(objKey === cookieObjKey){
                    if (typeof obj[objKey] === 'object' && typeof cookieObj[cookieObjKey] === 'object') {
                        this.compareAndUpdateObj(obj[objKey], cookieObj[cookieObjKey]);
                    }
                    else{
                        cookieObj[cookieObjKey] = obj[objKey];
                    }
                }
            });
        });
        return cookieObj;
    };

    //----------------------------------------------------------------------------
    /**
     * Creates the session cookie with the response.
     */
    //----------------------------------------------------------------------------
    this.createSessionCookie = (cName, jResponse) => {
        var date = new Date();
        var gSessionExpiryDate;
        if(cName === 'abs_gsession'){
            gSessionExpiryDate = date.setTime(date.getTime() + 24 * 60 * 60 * 1000);
        }
        else
        {
            gSessionExpiryDate = date.setTime(date.getTime() + 45 * 60 * 1000);
        }
        if (cName === 'SWY_SYND_USER_INFO')
        {
            var swySyndUserInfoCookie = {"storeAddress":"","storeZip":"", "storeId":"","preference":""};

            if(jResponse.info.J4U !== null || jResponse.info.SHOP !== null )
            {
                var storePreference = jResponse.info.COMMON.preference,
                    storeId         = (storePreference !== undefined) ?(storePreference.toLowerCase() === 'j4u' ? jResponse.info.J4U.storeId : jResponse.info.SHOP.storeId) : "",
                    storeZip        = (storePreference !== undefined) ?(storePreference.toLowerCase() === 'j4u' ? jResponse.info.J4U.zipcode : jResponse.info.SHOP.zipcode) : "",
                    storeAddress    = (storePreference !== undefined) ?(storePreference.toLowerCase() === 'j4u' ? jResponse.info.J4U.address : jResponse.info.SHOP.address) : "";
                if(storeZip)
                {
                    swySyndUserInfoCookie.storeZip = storeZip;
                }
                if(storeId)
                {
                    swySyndUserInfoCookie.storeId = storeId;
                }
                if(typeof storeAddress !== 'undefined' && storeAddress !== null){
                	swySyndUserInfoCookie.storeAddress = storeAddress;
                }
                if(storePreference){
                	swySyndUserInfoCookie.preference = storePreference;
                }
                jResponse = swySyndUserInfoCookie;
            }
            SWY.CONFIGSERVICE.setDomainCookie(cName, encodeURIComponent(JSON.stringify(jResponse)), SWY.CONFIGSERVICE.resolvedBanner + '.com', 0);
        } else {
            // var encodedJsonResponse = encodeURIComponent(JSON.stringify(jResponse));
            // document.cookie = cName + '=' + encodedJsonResponse + ';' + 'expires=' + gSessionExpiryDate + ';path=/;';
            SWY.CONFIGSERVICE.setCookie(cName, encodeURIComponent(JSON.stringify(jResponse)), 0);
        }
    }
}).call(AB.COMMON);//End

(function () {

    var _ssoActive = false;
    var _signInCount = 0;
    var _reInit = {};
    var setDefaultSHOPGuest = false;
    var validateResponse = {};
    var urlIntents = '';
    var deepLinkParams = {};
    var isGuestDeepLinkUser = false;
    var setDeepLinkSession = false;
    var deepLinkUrl = '';
    var useDeepLinkGoto = false;

    /**
     * Initializes cookie values.
     */
    this.init = function () {
        // declare function variable(s)
        var funcName = 'SWY.ENFORCEMENT.init';

        //alert('window.location.origin == ' + window.location.origin + ' document.referrer == ' + document.referrer + ' AB.userInfo.userType == ' + AB.userInfo.userType + ' ECommSSOActive == ' + SWY.CONFIGSERVICE.getCookie('ECommSSOActive') + ' ECommRedirectURL == ' + SWY.CONFIGSERVICE.getCookie('ECommRedirectURL'));
        console.debug(funcName + ' ENTRY');
        var dotNetTargetUrl = AB.COMMON.getURLParameterByName('target');
        if (dotNetTargetUrl) {
            SWY.CONFIGSERVICE.setCookie('ECommDotNetTargetUrl', dotNetTargetUrl, 0);
        }
        SWY.QUERYSTRING.init();
        SWY.RESTRICTEDRESOURCE.init();

        // read session cookies
        this.readSessionCookies();
        // set ECommBanner cookie
        SWY.CONFIGSERVICE.setCookie('ECommBanner', SWY.CONFIGSERVICE.resolvedBanner, 0);
        console.debug(funcName + ' EXIT');
    };
    
    /**
     * Gets previous log in cookie value for current banner
     * 
     * Checks for abs_previousLogin 
     */ 
    this.getUnifiedPreviousLoginCookie = function() {
        let finalPreviousLogin 	= {};       
        let absPreviousLogin 	= SWY.ENFORCEMENTUTILS.parseSessionCookie('abs_previouslogin');
        
        if (absPreviousLogin && absPreviousLogin.info && absPreviousLogin.info.COMMON) {
        	finalPreviousLogin 	= absPreviousLogin;
        }
        return finalPreviousLogin;
    };

    /**
     * Reads session cookies such as ECommUserState and
     */
    this.readSessionCookies = function () {
        // declare function variable(s)
        var ssoActiveStr = null;
        var signInCountStr = null;
        var funcName = 'SWY.ENFORCEMENT.readSessionCookies';

        // get previous login cookie value
        SWY.previousLogin = this.getUnifiedPreviousLoginCookie();
        console.debug(funcName + ' SWY.previousLogin=' + SWY.previousLogin);
        // get ECommSSOActive cookie value
        ssoActiveStr = SWY.CONFIGSERVICE.getCookie('ECommSSOActive');
        // check if sso active cookie exists
        if (ssoActiveStr && ssoActiveStr.length > 0) {
            // set sso active to true
            if (ssoActiveStr == 'Y') {
                _ssoActive = true;
            }
        }
        // get ECommSignInCount cookie value
        signInCountStr = SWY.CONFIGSERVICE.getCookie('ECommSignInCount');
        // check if sign in count is set
        if (signInCountStr && signInCountStr.length > 0) {
            // parse sign in count into int
            _signInCount = parseInt(signInCountStr);
        }
        // get ECommReInit in array
        _reInit = SWY.ENFORCEMENTUTILS.parseReInitCookie();
    };

    /**
     * Gets called in header tag of DOM after configService init()
     * 
     */
    this.performPageEnforcement = function () {
        // declare function variable(s)
        var locationPathName = null;
        var redirectPath = '';
        var funcName = 'SWY.ENFORCEMENT.performPageEnforcement';


        // get analytics parameter - cross banner case slice 3
        let modalLinkParameter = AB.COMMON.getURLParameterByName('ml');
        if (modalLinkParameter) {
            SWY.CONFIGSERVICE.setDomainCookie("SAFEWAY_MODAL_LINK", modalLinkParameter, SWY.CONFIGSERVICE.resolvedBanner + '.com', 0 );
        }

        var allowPageToLoaded = false;
        // initialize resources
        this.init();
        // get page uri
        locationPathName = String(location.pathname);
        // check if enforcement can be performed to the page
        if (this.isPageEnforced(locationPathName)) {
            console.debug(funcName + ' Current page is being enforced.');
            // check if cookie is disabled
            if (!SWY.CONFIGSERVICE.isCookieEnabled()) {
                // handle default guest session in shop
                AB.userInfo.establishUnifiedGuestSession();
                allowPageToLoaded = true;
                if ( allowPageToLoaded ) {
                	this.handlePageEnforcement();
                }
            } // check if single sign on needs to be called
            else if (this.doSingleSignOn()) {
            	// check for deeplink params
            	if( this.isUnifiedDeepLinkUser() ){
            		this.useDeepLinkGoto = true;
                }
            	// handle if needs to redirect or call single sign on
                //If method is redirecting to another page, we do not want page to load further
                allowPageToLoaded = (this.handleSingleSignOn() == false) ? true : false;
                if ( allowPageToLoaded ) {
                	this.handlePageEnforcement();
                }
            }    
            // check if a deep linked user has landed with correct parameters - storeId & intent
            else if( this.isUnifiedDeepLinkUser() ){
                // call xapi to validate store & intent for banner
                SWY.ENFORCEMENT.validateDeepLinkParams().then(function(data) {
                    if (data.validRequest.isValid === true) {
                        SWY.deepLinkData = SWY.ENFORCEMENT.setSessionObj(data);
                    }
                    setDeepLinkSession = true;
                    SWY.ENFORCEMENT.handlePageEnforcement();
                }).catch(function(error){
                    console.debug('error');
                    SWY.ENFORCEMENT.handlePageEnforcement();
                });
            }
            else {
                // get ECommRedirectURL cookie value
                redirectPath = this.getCookie('ECommRedirectURL');
                // decode redirect url
                redirectPath = decodeURIComponent(redirectPath);
                // do redirection
                if (this.doRedirection(redirectPath)) {
                    // send redirection
                    if (!SWY.ENFORCEMENTUTILS.isDotNetPage(redirectPath)) {
                        // reset ECommRedirectURL cookie
                        SWY.CONFIGSERVICE.setCookie('ECommRedirectURL', '', -1);
                        // send user to redirect url
                        this.sendRedirect(redirectPath, false, null);
                    }
                }
                else {
                    allowPageToLoaded = true;
                    if ( allowPageToLoaded ) {
                    	this.handlePageEnforcement();
                    }
                }
                
            }
        }else {
            // check whether bottom initialize has to be done after userInfo servlet call
            AB.userInfo.earlyInitialize = this.checkEarlyInitialize();
        }
    };
    
    this.setSessionObj = function (data) {
        var intentZipcode = null;
    	deepLinkUpdateObj = { 'info': { 'COMMON': {}, 'J4U': {}, 'SHOP': {} } };

    	deepLinkUpdateObj.info.COMMON.Selection = 'query';
    	deepLinkUpdateObj.info.COMMON.userType = 'G';       	
    	
    	if ( (urlIntents === 'DELIVERY' || urlIntents === 'PICKUP' || urlIntents === 'INSTORE')
    			&& (data && data.validRequest && data.validRequest.store) ) {
			// setting new store , so remove non-shop J4U store flag
			localStorage.removeItem('absdefaultecom');
            // set intent zipcode from api response
    		intentZipcode = data.validRequest.store.zipcode;
            // if mappedZip attribute exists and it's true, then set intent zipcode to the zipcode being passed
    		if (data.validRequest.mappedZip) {
    		    // check if deeplink params exist and zipcode is one of them
    		    if (deepLinkParams && deepLinkParams.zipcode) {
    		        // use the deeplink param zipcode as the intent zipcode
        		    intentZipcode = deepLinkParams.zipcode;
    		    }
    		}
			// if updating preference to J4U - check if the derived ecom store is the default store
			if (urlIntents === 'INSTORE'){
				if (data.validRequest.ecomStore.defaultStore == true){
					let storeConfig = SWY.CONFIGSERVICE.storeResolutionConfig;
					// set banner default values to the session
					deepLinkUpdateObj.info.SHOP.storeId = storeConfig.bannerDefaultStoreId;
    	    		deepLinkUpdateObj.info.SHOP.zipcode = storeConfig.bannerDefaultZipcode;	
					// set local storage flag for non-shop J4U store 
					localStorage.setItem('absdefaultecom' , true);
				} else {
					deepLinkUpdateObj.info.SHOP.storeId = data.validRequest.store.storeId;
    	    		deepLinkUpdateObj.info.SHOP.zipcode = intentZipcode;
					localStorage.setItem('absdefaultecom' , false);
				}
			} else {
				deepLinkUpdateObj.info.SHOP.storeId = data.validRequest.store.storeId;
    	    	deepLinkUpdateObj.info.SHOP.zipcode = intentZipcode;
				localStorage.setItem('absdefaultecom' , false);
			}		

    		deepLinkUpdateObj.info.J4U.storeId = data.validRequest.store.storeId;
    	    deepLinkUpdateObj.info.J4U.zipcode = intentZipcode;
    	
    	    deepLinkUpdateObj.info.COMMON.zipcode = intentZipcode;
    	    
    	    switch (urlIntents) {
            case 'DELIVERY':
            	deepLinkUpdateObj.info.COMMON.preference = 'Delivery';   
                break;
            case 'PICKUP' :
            	deepLinkUpdateObj.info.COMMON.preference = 'Dug';
                break;
            case 'INSTORE' :
            	deepLinkUpdateObj.info.COMMON.preference = 'J4U';
            	break;
    	    }
    	}
    	
    	return deepLinkUpdateObj;
    };
    
    /**
     * checks for deeplink parameters in url 
     * - looks for storeId and intent parameters
     */
    this.isUnifiedDeepLinkUser = function(){
        //var intentStoreId = '1786';
        //var intentPreference = 'instore';
    	let intentDictionary = ['INSTORE' , 'DELIVERY' , 'PICKUP'];
    	let validStoreId = false;
    	let validIntent = false;
    	let validZipcode = false;
    	let parametersHaveService = false;

    	let storeId = '';
        let zipcode = '';
        
        // check for url params
        let urlStoreId = AB.COMMON.getURLParameterByName('storeId');
        let urlIntent = AB.COMMON.getURLParameterByName('preference');
        let urlZipcode = AB.COMMON.getURLParameterByName('zipcode');
        let urlState = AB.COMMON.getURLParameterByName('state');

        // store deeplink url for KMSI flow
        this.deepLinkUrl = window.location.href;
        
        //remove parametersfrom url
        if( urlStoreId  &&  urlIntent ){
            if(!urlState){
                window.history.pushState("", document.title, window.location.href.split("?")[0]);  
            }
        }

    	// setup regEx test for storeId
        let regexIntentStoreId = new RegExp(/^\d{2}$|^\d{3}$|^\d{4}$/); 
        let regexZipcodePattern = new RegExp(/^\d{5}$|^\d{5}-\d{4}$/);

        // do deep link flow for anonymous , guests , and authenticated users
        if ( AB.COMMON.isAnonymous() || AB.userInfo.userType.toUpperCase() === 'G' 
        		|| AB.COMMON.authorize() ){        	        

        	// validate urlPreference is one of the possible preferences
        	if ( urlIntent ) {
        		urlIntent = urlIntent.toUpperCase();
        		urlIntents = urlIntent.toUpperCase();
        		intentDictionary.forEach(function(intent) {
        			if ( intent === urlIntent ) {
        				validIntent = true;
        			}
        		});      	
        	}

        	// validate storeId is a valid number 
        	console.debug("REGEX: ",regexIntentStoreId.test(urlStoreId));
        	if( (regexIntentStoreId.test(urlStoreId)) ) {
        		validStoreId = true;
        	}    

            // validate zipcode if it's a valid 5 digit number
            console.debug('REGEX: ', regexZipcodePattern.test(urlZipcode));
            // check if zipcode is being passed to the url
            if (urlZipcode && regexZipcodePattern.test(urlZipcode)) {
                validZipcode = true;
            }

        	if ( validIntent && validStoreId ) {
        		deepLinkParams.storeId = urlStoreId;
        		if (urlIntent === 'PICKUP') {
        			deepLinkParams.intent = 'dug';
        		} else {
        			deepLinkParams.intent = urlIntent;
        		}
        		// if zipcode is being passed to the url and valid, then set it to the deeplink params list
        		if (validZipcode) {
        		    deepLinkParams.zipcode = urlZipcode;
        		}
        		return true;
        	}
        	else {
        		return false;
        	}
        // if user is signed in , return false and ignore deeplink params
        } else {
        	return false;
        }
    };
      
    this.validateDeepLinkParams = function () {
    	let validateUrl = window.location.protocol + '//' + window.location.host + AB.storeResolverValidateEndpoint + '?banner=' + SWY.CONFIGSERVICE.getResolvedBanner() +  '&storeid=' + deepLinkParams.storeId + '&preference=' + deepLinkParams.intent;

    	// check if deeplink parameters exist and zipcode is one of them
    	if (deepLinkParams && deepLinkParams.zipcode) {
    	    // append zipcode to the url
    	    validateUrl += '&zipcode=' + deepLinkParams.zipcode;
    	}
    	var httpOptions = {
        		'ocp-apim-subscription-key': AB.wcaxXapiApimKey
        };
    	return new Promise((resolve, reject) => {
    	    $.ajax({
    	      headers: httpOptions,
    	      async: false,
    	      url: validateUrl,
    	      type: 'GET',
    	      success: function(data) {
    	        resolve(data)
    	      },
    	      error: function(error) {
    	        reject(error)
    	      },
    	    })
    	})
    };
   
    /**
     * Checks if page is enforced based on the following: page is not a dot net, is html, is not editor page,
     * is not content page, and is either on www or shop.
     *
     * @param uri        the page uri
     */
    this.isPageEnforced = function (uri) {
        return !(SWY.ENFORCEMENTUTILS.isDotNetPage(uri) ||
            SWY.ENFORCEMENTUTILS.isEditorPage(uri) ||
            SWY.ENFORCEMENTUTILS.isContentPage(uri));
    };

    this.doSingleSignOn = function () {
        var _debugFuncName = 'SWY.ENFORCEMENT.doSingleSignOn';

        var doSSO = false;

        if (_signInCount < 1) {
            if (!SWY.isEscapeSSOAllowed) {
                if (SWY.ENFORCEMENT.checkExpiredKmsiUser()) {
                    // need to call sso
                    doSSO = true;
                } // check if session needs to reinitialize
                else if (this.doReInit()) {
                    // need to call sso
                    doSSO = true;
                } 
                else if (AB.userInfo && SWY.ENFORCEMENTUTILS.isValidUserType('A') && AB.userInfo.houseId) {
                    doSSO = true;
                }
            }
        }
        console.debug(_debugFuncName + ' returns: ' + doSSO);

        return doSSO;
    };
       
    /**
    * Checks for signed in user who has expired and is KMSI enabled :
    * - if true , do sso
    * - if false , set new guest session based on PREVIOUS_LOGIN cookie
    * 
    * @return {boolean} doSSO - for triggering sso call in this.doSingleSignOn()
    */
    this.checkExpiredKmsiUser= function () {
    	var _debugFuncName = 'SWY.ENFORCEMENT.checkExpiredKmsiUser';
    	var doSSO = false;

		var kmsiVal = SWY.ENFORCEMENT.getCookie('SAFEWAY_KMSI');
		if (kmsiVal == 'true'){
	    	if ( SWY.ENFORCEMENT.checkAuthorizedCookie() ) {
				if ( AB.userInfo != undefined ){
					if (AB.userInfo.userType == 'C' || AB.userInfo.userType == 'R'){
						doSSO = false;
	    			} else {
	    				doSSO = true;
	    			}	    			
				}
	    	} else {
	    		doSSO = true;
	    	}
		}
    	return doSSO;
    };
       
    this.doReInit = function () {
        // declare function variable(s)
        var doReInit = false;
        var url = null;

        // check if there's at least one site to re-initialize
        if (_reInit && _reInit.length > 0) {
            // get current host name
            url = window.location.hostname;
            if (url) {
                // loop through each site
                for (var i in _reInit) {
                	var reInitVal = _reInit[i];
                	if ( reInitVal ){
	                    // check if current url matches re init site
	                    if (url.indexOf(reInitVal.trim()) == 0) {
	                        // do re-initialize
	                        doReInit = true;
	                    }
                	}
                }
            }
        }

        return doReInit;
    };

    this.isDifferentReferrer = function () {
        // declare function variable(s)
        var isDifferent = false;
        var referrer = null;
        var current = null;
        var funcName = 'SWY.ENFORCEMENT.isDifferentReferrer';

        // get referrer url
        referrer = document.referrer;
        // get page host
        current = window.location.origin;
        // check if referrer host is not in the same domain
        if (referrer === '' || referrer.indexOf(current) < 0) {
            isDifferent = true;
        }

        return isDifferent;
    };

    this.handleSingleSignOn = function () {
        // declare function variable(s)
        var redirectPath = '';
        var funcName = 'SWY.ENFORCEMENT.handleSingleSignOn';
        var isRedirect = false;

        var currentPagePath = window.location.pathname;
        if (SWY.ENFORCEMENTUTILS.isPageMatched({
            path: currentPagePath,
            configPagePath: SWY.configService.wwwSignInPagePath
        })) {
        	if (_signInCount > 0 || SWY.ENFORCEMENT.isErrorPage(currentPagePath)) {
        		SWY.CONFIGSERVICE.setCookie('ECommRedirectURL', '', -1);
                // If the SigninCount is greater than 0,
        		// this means that a signin has been attempted atleast once.
                return;  // Don't perform a single sign-on
            }
        }
        // get ECommRedirectURL cookie value
        redirectPath = this.getCookie('ECommRedirectURL');
        // decode redirect url
        redirectPath = decodeURIComponent(redirectPath);
        // check if redirect path exists and the user is non shop accessing shop site
        if (redirectPath && (!(AB.userInfo && SWY.ENFORCEMENTUTILS.isValidUserType('A') && AB.userInfo.houseId))) {
            console.debug(funcName + ' Enforce single sign on when SSO is already checked.');
            // do redirection
            if (this.doRedirection(redirectPath)) {
                // send redirection
                if (!SWY.ENFORCEMENTUTILS.isDotNetPage(redirectPath)) {
                    // reset ECommRedirectURL cookie
                    SWY.CONFIGSERVICE.setCookie('ECommRedirectURL', '', -1);
                    // send user to redirect url
                    isRedirect = true;
                    this.sendRedirect(redirectPath, false, null);
                }
                // done handling
                return isRedirect;
            }
            else if (SWY.ENFORCEMENTUTILS.isPageMatched({
                path: redirectPath,
                configPagePath: SWY.configService.wwwSignInPagePath
            })) {
            	SWY.CONFIGSERVICE.setCookie('ECommRedirectURL', '', -1);
                return isRedirect;
            }
        }
        else {
            console.debug(funcName + ' Enforce single sign on since SSO session is not active and is not checked yet.');
            // get current page uri
            redirectPath = SWY.QUERYSTRING.getURIWithMarketingParams();
        }
        // check if sso has been called before while doing redirect
        if (_signInCount < 1) {
        	// if deeplink KMSI flow - remove redirectUrl and set goto in singleSignOnUser()
        	if ( this.useDeepLinkGoto ) {
        		redirectPath = '';
        	}
            // single signs on user
            isRedirect = true;
            this.singleSignOnUser(redirectPath);
        }

        return isRedirect;
    };

    /**
     * Gets cookie value.
     *
     * @param {String} cname        the cookie name
     *
     * @return {String}                the cookie value
     */
    this.getCookie = function (cname) {
        // declare function variable(s)
        var name = cname + "=";
        //var decodedCookie = decodeURIComponent(document.cookie);
        var cookies = document.cookie;
        var ca = cookies.split(';');
        var funcName = 'SWY.ENFORCEMENT.getCookie';

        console.debug(funcName + ' ENTRY: cname=' + cname);
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                console.debug(funcName + ' EXIT');
                return c.substring(name.length, c.length);
            }
        }
        console.debug(funcName + ' EXIT');

        return '';
    };

    this.doRedirection = function (redirectPath) {
        // declare function variable(s)
        var doRedirect = false;
        var funcName = 'SWY.ENFORCEMENT.doRedirection';

        // check if redirect path is set
        if (redirectPath && redirectPath != '') {
            // check if current page is sign-in
            if (SWY.ENFORCEMENTUTILS.isPageMatched({configPagePath: SWY.configService.wwwSignInPagePath})) {
                // check if SAMLRequest is one of the parameters -- meaning single sign on was called
                if (AB.COMMON.getURLParameterByName('SAMLRequest')) {
                    doRedirect = true;
                }
            }
        }

        return doRedirect;
    };

    this.handlePageEnforcement = function () {
        // declare function variable(s)
        var redirectPath = null;
        //var marketingParams = null;
        var gotoURL = null;
        var funcName = 'SWY.ENFORCEMENT.handlePageEnforcement';

        if (!this.isUserAllowed()) {
            // get redirect path from page properties
            redirectPath = SWY.RESTRICTEDRESOURCE.getRedirectPath(SWY.USERTYPESTATE.getUserType());
            gotoURL = AB.COMMON.getURLParameterByName("goto", true);

            if (gotoURL != null) {
            	// update goto URL with marketing parameters from ECommMarketing cookie
            	gotoURL = AB.COMMON.updateGotoUrl(gotoURL);
            	// reset ECommMarketing cookie
                //this.setCookie('ECommMarketing', '', -1);
                // reset ECommRedirectURL cookie
                SWY.CONFIGSERVICE.setCookie('ECommRedirectURL', '', -1);
                this.sendRedirect(gotoURL, false, null);
            }
            else {
                // check if redirect path is NOT an html page
                if (redirectPath && !SWY.ENFORCEMENTUTILS.isHtmlPage(redirectPath)) {
                    // append .html extension
                    redirectPath += '.html';
                }

                // If redirectPath is ReSignIn page .. Add the GOTO param in the URL
                if (redirectPath && redirectPath.indexOf('re-sign-in') > -1) {
                    SWY.QUERYSTRING.queryParams['goto'] = window.location.href;
                    //marketingParams = encodeURIComponent(SWY.QUERYSTRING.buildUrlParameters());
                    //this.setCookie('ECommMarketing', marketingParams, 0);
                }
                // if redirectPath is signIn page .. set EcommRedirectUrl
                else if (redirectPath && redirectPath.indexOf('sign-in') > -1) {
                	let redirectUrl = encodeURIComponent(window.location.href);
                    // set ECommRedirectURL cookie to target page for post login redirection
                    SWY.CONFIGSERVICE.setCookie('ECommRedirectURL', redirectUrl, 0);
                }

                // redirect user to a redirect path from page metadata
                this.sendRedirect(redirectPath, false, null);
            }
        }
        else {        		             		
        		// Added for slice 3 - check if in order edit mode to reset session values
        		if ( AB.COMMON.checkForEditOrderMode()
        				&& ( AB.userInfo.userType.toUpperCase() === 'R' || AB.userInfo.userType.toUpperCase() === 'C' ) ){
        			// get the storeId associated with the pending order 
        			let OrderStoreId = AB.COMMON.getCookie('OrderStoreId');
        			
        			// create object to pass to common update session method
        			let sessionObj = { 'info': { 'COMMON': {}, 'J4U': {}, 'SHOP': {} } };
        			// set storeId to both J4U and SHOP
        			sessionObj.info.J4U.storeId = OrderStoreId;
        			sessionObj.info.SHOP.storeId = OrderStoreId;
        			// set an ecomm preference for UI
        			sessionObj.info.COMMON.preference = 'dug';
        			AB.userInfo.preferenceMode = 'dug';
        			
        			// update session cookies - no reload - no UCA update
        			AB.COMMON.updateUserSession(sessionObj, false);       			
        		}          		
        		else if (AB.COMMON.isAnonymous()) {
            		// set default or previousLogin SHOP and WWW session data when user is anonymous
            		AB.userInfo.establishUnifiedGuestSession();						
                	AB.userInfo.resolveEcomStore = false;
					// set flag to resolve ECom store
					if(SWY.CONFIGSERVICE.isCookieEnabled() == false) {
						AB.userInfo.establishUnifiedGuestSession();
					}
					else {
                        var redirectUrl = AB.COMMON.getURLParameterByName("goto", true);
                        if(redirectUrl != null) {
                        	// redirect to goto url
                            this.sendRedirect(redirectUrl, false, false);
                        }
                    }
                } else if ( setDeepLinkSession ){
                	// user has valid deeplink params 
                	
                	if ( AB.COMMON.authorize() ) {
                		// if authenticated - set data to abs_gsession cookie
                		SWY.ENFORCEMENT.deepLinkSetGSessionCookie();	
                	} else {
                		// if guest - set data to session cookies
                		AB.userInfo.establishUnifiedGuestSession();	
                	}
                } else if(!AB.userInfo.j4u.storeId) {
                	AB.userInfo.j4u.isStoreIdEmpty = true;
                    AB.userInfo.establishUnifiedGuestSession();
                }
         }       

         // if user is going to aisle page, validate correct storeId is in the url
         this.checkAndRedirectShopStoreInUrl();
        
         // set ECommMarketing cookie to home page
         //this.setCookie('ECommMarketing', '', -1);

         // reset ECommSignInCount cookie
         AB.COMMON.setCookie('ECommSignInCount', 0, 0);

         // call secondary OKTA refresh the session.
         SWY.OKTA.reviewOKTASessionToRefresh();
         // check whether bottom initialize has to be done after userInfo servlet call
         AB.userInfo.earlyInitialize = this.checkEarlyInitialize();       
    };  
       
    /**
     * Set cookie value
     * @param cname key
     * @param cvalue value
     * @param exdays expiration time
     */
    this.setCookie = function (cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        if (exdays > 0) {
            var expires = 'expires=' + d.toUTCString();
            document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
        }
        else {
            document.cookie = cname + "=" + cvalue + ";path=/";
        }
    };

    this.checkPageEnforcement = function () {
        // declare function variable(s)
        var redirectPath = null;
        var zipCode = null;
        var funcName = 'SWY.ENFORCEMENT.checkPageEnforcement';

        if (this.isUserLowerScopeWithCredentialCookie()) {
            redirectPath = window.location.pathname;
            this.singleSignOnUser(redirectPath);
            return;
        }

        zipCode = AB.COMMON.getURLParameterByName('zipcode');
        // check if enforcement page properties are NOT set
        if (SWY.allowedUserTypes && SWY.allowedUserTypes.length == 0) {
            // perform logic when no defined allowed user types
            this.handleNoAllowedUserTypes();
        } // check if the page IS allowed to authenticate guest
        else if (this.doGuestAuthentication()) {
            // authenticate deeplink page
            this.authenticateAsGuest();
        } // check if user is NOT allowed to access resource
        else if (!this.isUserAllowed()) {
            // get redirect path from page properties
            redirectPath = SWY.RESTRICTEDRESOURCE.getRedirectPath(SWY.USERTYPESTATE.getUserType());
            // check if redirect path is NOT an html page
            if (redirectPath && !SWY.ENFORCEMENTUTILS.isHtmlPage(redirectPath)) {
                // append .html extension
                redirectPath += '.html';
            }
            // handle okta active session
            if (_ssoActive) {
                if (SWY.USERTYPESTATE.getUserType() == 'G') {
                    this.singleSignOnUser(null);
                }
                else if (SWY.USERTYPESTATE.getUserType() == 'A') {
                    // check if the page IS allowed as DeepLik page
                    if (this.doGuestAuthentication()) {
                        // authenticate deeplink page
                        this.authenticateAsGuest();
                    }	// check if page IS NOT allowed as deep link
                    else {
                        // single sign on user when they are not sso checked yet
                        this.singleSignOnUser(null);
                    }
                }
                else {
                    // redirect user to a redirect path from page metadata
                    this.sendRedirect(redirectPath, false, null);
                }
            }	// handle no okta session
            else {
                	// check if user is anonymous
                if (SWY.USERTYPESTATE.getUserType() == 'A') {
                    // check if the page IS allowed as DeepLik page
                    if (this.doGuestAuthentication()) {
                        // authenticate deeplink page
                        this.authenticateAsGuest();
                    }
                    else {
                        // redirect user to a url
                        this.sendRedirect(redirectPath, false, null);
                    }
                }
                else {
                    // redirect user to a redirect path from page metadata
                    this.sendRedirect(redirectPath, false, null);
                }
            }
        }
    };

    this.handleNoAllowedUserTypes = function () {
        // declare function variable(s)
        var funcName = 'SWY.ENFORCEMENT.handleNoAllowedUserTypes';

        // check if user lands on another page other than sign in page
        if (!SWY.ENFORCEMENTUTILS.isPageMatched({configPagePath: SWY.configService.wwwSignInPagePath})) {
            // redirect user to login
            // NOTE: this normally happens when a page does not have enforcement page properties being setup
            if (_ssoActive) {	// handle okta active session
                // sign out user from okta
                SWY.OKTA.signOut();
            }
            else {	// handle no okta session
            	this.sendRedirect(SWY.configService.wwwSignInPagePath, true, null);
            }
        }      
    };

    this.isUserAllowed = function () {
        // declare function variable(s)
        var funcName = 'SWY.ENFORCEMENT.isUserAllowed';

        this.checkSessionInfo();

        return SWY.USERTYPESTATE.isAuthorized();
    };

    this.checkSessionInfo = function () {
        // declare function variable(s)
        var funcName = 'SWY.ENFORCEMENT.checkSessionInfo';

        // set user state authorized to TRUE
        SWY.USERTYPESTATE.setAuthorized(true);
        // check if user is authenticated
        if (SWY.ENFORCEMENTUTILS.isAuthenticated()) {
            // check if user is guest authenticated
            if (SWY.ENFORCEMENTUTILS.isAuthenticatedAsGuest()) {
                // set user state to G
                SWY.USERTYPESTATE.setUserType('G');
                // check resource if restricted for Guest
                if (!SWY.RESTRICTEDRESOURCE.isAllowed('G')) {
                    // if resource is restricted for Guest, then set user state authorized to FALSE
                    SWY.USERTYPESTATE.setAuthorized(false);
                }
            }	// check if user is registered authenticated
            else if (SWY.ENFORCEMENTUTILS.isAuthenticatedAsRegistered()) {
                // Check for User C: The token should be valid
                if (SWY.ENFORCEMENTUTILS.isValidUserType('C') && !this.isTokenActive()) {
                    // If the Token is not Valid for 'C' it will force him to to become 'R'
                    SWY.USERTYPESTATE.setUserType('R');
                    // And Now check if resource is restricted
                    if (!SWY.RESTRICTEDRESOURCE.isAllowed('R')) {
                        // If resource is restricted. Set the Auth to false that will redirect him to sign in.
                        SWY.USERTYPESTATE.setAuthorized(false);
                    }
                }
                else {
                    // set user state to R or C
                    SWY.USERTYPESTATE.setUserType(AB.userInfo.userType);
                    // check resource if restricted for Registered
                    if (!SWY.RESTRICTEDRESOURCE.isAllowed(AB.userInfo.userType)) {
                        // if resource is restricted for Registered, then set user state authorized to FALSE
                        SWY.USERTYPESTATE.setAuthorized(false);
                    }
                }
            }
            else if (SWY.ENFORCEMENTUTILS.isAuthenticatedAsDeltaRegistered()) {
                // set user state to D
                SWY.USERTYPESTATE.setUserType('D');
                // check resource if restricted for Delta Registered User
                if (!SWY.RESTRICTEDRESOURCE.isAllowed('D')) {
                    // if resource is restricted for Delta Registered User, then set user state authorized to FALSE
                    SWY.USERTYPESTATE.setAuthorized(false);
                }
            }
            else if (SWY.ENFORCEMENTUTILS.isAuthenticatedAsMultiBanner()) {
                // set user state to M
                SWY.USERTYPESTATE.setUserType('M');
                // check resource if restricted for Multi Banner Registered User
                if (!SWY.RESTRICTEDRESOURCE.isAllowed('M')) {
                    // if resource is restricted for Multi Banner Registered User, then set user state authorized to FALSE
                    SWY.USERTYPESTATE.setAuthorized(false);
                }
            }
        }
        else if (SWY.ENFORCEMENTUTILS.isAnonymousUser()) {
            // set user state to A
            SWY.USERTYPESTATE.setUserType('A');
            // check resource if restricted for Anonymous
            if (!SWY.RESTRICTEDRESOURCE.isAllowed('A')) {
                // if resource is restricted for Anonymous, then set user state authorized to FALSE
                SWY.USERTYPESTATE.setAuthorized(false);
            }
        }	// if user type cannot be determined
        else {
            // set user state to empty string indicating user type is not determined
            SWY.USERTYPESTATE.setUserType('');
            // set user state authorized to FALSE
            SWY.USERTYPESTATE.setAuthorized(false);
        }
    };

    /**
     * Single signs on a user.
     *
     * @param {String} redirectUrl            the redirect url where to redirect user
     */
    this.singleSignOnUser = function (redirectUrl) {
        // declare function variable(s)
        var ssoUrl = '';
        var funcName = 'SWY.ENFORCEMENT.singleSignOnUser';

        console.debug(funcName + ' ENTRY');
        // check if redirect url is not null
        if (redirectUrl != null) {
            // encode redirectUrl before
            redirectUrl = encodeURIComponent(redirectUrl);
            // set ECommRedirectURL cookie to home page
            SWY.CONFIGSERVICE.setCookie('ECommRedirectURL', redirectUrl, 0);
            // remove ECommMarketing cookie since parameters are already captured in ECommRedirectURL
            //this.setCookie('ECommMarketing', '', -1);
        }
        // set ECommSignInCount cookie
        AB.COMMON.setCookie('ECommSignInCount', 1, 0);
        // generate sso url
        ssoUrl = SWY.ssoPath + '?banner=' + SWY.CONFIGSERVICE.resolvedBanner + '&idp=false';

        // add goto param to trigger deep link flow after the sso flow
        if (this.useDeepLinkGoto) {
        	var gotoDeepLink = encodeURIComponent(this.deepLinkUrl);
        	ssoUrl += '&goto=' + gotoDeepLink;
        }

        // check if needs to do re-init
        if (this.doReInit() && redirectUrl) {
            // redirect user to single sign on servlet plus goto
            window.location.href = ssoUrl + '&goto=' + redirectUrl;
        }
        else {
            // redirect user to single sign on servlet
            window.location.href = ssoUrl;
        }
        console.debug(funcName + ' EXIT');
    };

    /**
     * Sends redirect to a url path.
     *
     * @param urlPath                the url resource path
     * @param resolveBanner            the flag to determine if banner needs to get resolved
     *
     * @return redirectUrl            the redirect url
     */
    this.sendRedirect = function (urlPath, resolveBanner, fragment) {
        // declare function variable(s)
        var banner = null;
        var redirectUrl = null;
        var funcName = 'SWY.ENFORCEMENT.sendRedirect';

        console.debug(funcName + ' ENTRY: urlPath=' + urlPath + ', resolveBanner=' + resolveBanner);
        // NOTE: Make sure urlPath is already decoded at this point
        // check if url path is set
        if (urlPath) {
            // check if banner needs to get resolved
            if (resolveBanner) {
                // get banner from resource path since banner is not resolved
                banner = SWY.CONFIGSERVICE.getResolvedBanner();
                console.debug(funcName + ' banner=' + banner);
                // generate redirect url for home page
                redirectUrl = SWY.CONFIGSERVICE.generateRedirectUrl(urlPath, banner);
            }
            else {
                // set redirect url to urlPath parameter passed into function
                redirectUrl = urlPath;
            }

            if (fragment) {
                redirectUrl += fragment;
            }
            // check if redirect url has trusted domain
            if (SWY.ENFORCEMENTUTILS.isTrustedDomain(redirectUrl)) {
                // redirect user to a url
                window.location.href = redirectUrl;
            }
            else {
                // redirect to home page when domain is not trusted
                window.location.href = SWY.CONFIGSERVICE.domainConfig.defaultRedirectUrl;
            }
        }
        console.debug(funcName + ' EXIT: redirectUrl=' + redirectUrl);
    };

    /**
     * Authenticate the deeplink URL with the provided zipcode in the URL
     */
    /*
     * Need to remove from slice 3 once enforcemnt no longer uses this 
     * flow from perform page enforcement
     * 
     */  
    this.authenticateAsGuest = function () {
        // declare function variable(s)
        var redirectPath = null;
        var zipCode = null;

        redirectPath = encodeURIComponent(window.location.href);
        zipCode = AB.COMMON.getURLParameterByName('zipcode');
        // set ECommRedirectURL cookie
        AB.COMMON.setCookie('ECommRedirectURL', redirectPath, 0);
        // generate authenticate URL
        var url = SWY.ENFORCEMENTUTILS.generateAuthenticateURL(zipCode);
        // send redirect to authenticate URL
        this.sendRedirect(url, false);
    };
	
    
	/*
     * On page load , if the current page is allowed to fully load , 
     * This method checks if the page is an aisles page with a StoreId in the url as a selector.  
     * 
	 * If it is , this method checks that the storeId is the same on as in the session.
	 * If the storeId is different, we switch it for the one found in the session cookie
	 * 
	 * This method is called by this.handlePageEnforcement()
     */ 
    this.checkAndRedirectShopStoreInUrl = function () {
		let enableStoreIdSelectorFlag = SWY.CONFIGSERVICE.featureToggleConfig.enableStoreIdSelector;
		
		if (enableStoreIdSelectorFlag) {
			let navPath = window.location.pathname;
        	let navUrl = window.location.href;


			/*let isExcludedPage = SWY.configService.storeIdSelectorExcludedPagePaths.filter(function(pagePath){
  				if(pagePath) {
      				return windowValue.indexOf(location.pathname) >= 0;
				}
  			});*/


			if (typeof navPath != 'undefined' && navPath.indexOf('.(') == -1 && navPath.toLowerCase().indexOf("offer-details") < 0) {
            	// Url is defined
            	let startPlaceHolder = navPath.indexOf('.');
            	let endPlaceHolder = navPath.indexOf('.html');
            	if (startPlaceHolder != -1 && endPlaceHolder != -1 && AB.userInfo.branchId) {
                	if (endPlaceHolder > startPlaceHolder) {
                    	let placeHolder = String(navPath).substring(startPlaceHolder + 1, endPlaceHolder);
                    	if (placeHolder != AB.userInfo.branchId) {
                        	if ( navPath.toLowerCase().indexOf("product-details") > -1 || navPath.toLowerCase().indexOf("reward-details") > -1) {
								navUrl = navUrl.replace(placeHolder, placeHolder + '.' + AB.userInfo.branchId);
                            	redirectUrl = navUrl;
							} else {
								navUrl = navUrl.replace(placeHolder, AB.userInfo.branchId);
                        		window.location.href = navUrl;	
							}
                    	}
                	} else {
                    	navUrl = navUrl.substring(0, navUrl.indexOf('html')) + AB.userInfo.branchId + '.html';
                    	window.location.href = navUrl;
                	}
            	}
        	}
		} else {
			let navPath = window.location.pathname;
        	let navUrl = window.location.href;

			if (typeof navPath != 'undefined' && navPath.toLowerCase().indexOf('aisles') != -1 && navPath.indexOf('.(') == -1) {
            	// Url is defined
            	let startPlaceHolder = navPath.indexOf('.');
            	let endPlaceHolder = navPath.indexOf('.html');
            	if (startPlaceHolder != -1 && endPlaceHolder != -1 && AB.userInfo.branchId) {
                	if (endPlaceHolder > startPlaceHolder) {
                    	let placeHolder = String(navPath).substring(startPlaceHolder + 1, endPlaceHolder);
                    	if (placeHolder != AB.userInfo.branchId) {
                        	navUrl = navUrl.replace(placeHolder, AB.userInfo.branchId);
                        	window.location.href = navUrl;
                    	}
                	} else {
                    	navUrl = navUrl.substring(0, navUrl.indexOf('html')) + AB.userInfo.branchId + '.html';
                    	window.location.href = navUrl;
                	}
            	}
        	}	
		}
    };


    /**
     * Check if user is still logged in.
     */
    this.isTokenActive = function () {
        // declare function variable(s)
        var currentTime = null;
        var expireTime = null;
        var isTokenActive = false;

        if (AB.userInfo && AB.userInfo.expireTime) {
            currentTime = (new Date()).getTime();
            expireTime = parseInt(AB.userInfo.expireTime);
            if (expireTime > currentTime) {
                isTokenActive = true;
            }
        }

        return isTokenActive;
    };

    /**
     * Check if the SWY Cookie is available
     */
    this.checkCurrentState = function () {
        let SWY_SHARED_SESSION_INFO = SWY.CONFIGSERVICE.getCookie('SWY_SHARED_SESSION_INFO');
        return !!SWY_SHARED_SESSION_INFO;
    };

    /**
     * Set Previous User Info Cookie
     */
    this.setPreviousLoginCookie = function () {
        SWY.CONFIGSERVICE.setCookie("abs_previouslogin", encodeURI(SWY.CONFIGSERVICE.getCookie('SWY_SHARED_SESSION_INFO')), 0);
    };

    this.isUserLowerScopeWithCredentialCookie = function () {
        var response = false;

        var cookie = SWY.CONFIGSERVICE.getCookie('USED_CREDENTIALS');

        if (cookie) {

            var sharedSession = SWY.CONFIGSERVICE.getCookie('SWY_SHARED_SESSION');

            if (sharedSession) {
                var accessToken;
                sharedSession = decodeURI(sharedSession);
                sharedSession = JSON.parse(sharedSession);

                accessToken = sharedSession.accessToken;

                if (accessToken && accessToken.length > 0) {
                    response = SWY.ENFORCEMENTUTILS.isElevatedScope(accessToken);
                }
            } else {
                // In case if we have USED CREDENTIAL cookie but does not have SWY_SHARED_SESSION;
                // Simply return true;
                response = true;
            }


        }

        return response;
    };

    this.checkAuthorizedCookie = function () {
        var strSharedSession = SWY.CONFIGSERVICE.getCookie('SWY_SHARED_SESSION_INFO');
        var result = false;
        var objSharedSession = {};
        try {
            if (strSharedSession) {
                objSharedSession = JSON.parse(strSharedSession);

                result = (typeof objSharedSession == "object") ? true : false;
            }
        }
        catch (e) {
            result = false;
        }
        return result;
    };

    this.checkEarlyInitialize = function() {
        var result = true;

        //check Valid token is present if shopper logged in
        if (AB.COMMON.authorize()) {
            result = SWY.ENFORCEMENT.isTokenActive();
        }
        //check delivery preference got changed
        if (result == true && AB.COMMON.authorize() && SWY.ENFORCEMENTUTILS.checkReInitSite('dpref')) {
           result = false;
           if(SWY.CONFIGSERVICE.isLSCompatible()) {
                localStorage.removeItem("abSlot");
           }else {
                SWY.CONFIGSERVICE.setCookie('abSlot', '', -1);
           }
        }

        return result;
    };

    /**
     * Checks if page uri does contain 'sign-in.error-'.
     */
    this.isErrorPage = function (uri) {
        // declare function variable(s)
        var result = null;
        var isError = false;
        var funcName = 'SWY.ENFORCEMENT.isErrorPage';

        console.debug(funcName + ' ENTRY: uri=' + uri);
        // check if uri is a string
        if (typeof uri === 'string') {
            result = uri.match(/sign-in.error-/);
            console.debug(funcName + ' result=' + result);
            // check if there's a match
            if (result != null) {
                // set isError flag to true since there's a match
                isError = true;
            }
        }
        console.debug(funcName + ' EXIT: isError=' + isError);

        return isError;
    };
    
    /**
     * For Slice 3
     * 
     * Creates a dictionary object for passing to the common update methods for updating a session, 
     * resolves and sets storeIds, zipCodes and intents using the store resolver xAPI 
     * 
     * @param {String} Intent			the intent/preference type to be set ['J4U/Delivery/Dug']
     * @param {String} StoreId			storeId to be set
     * @param {String} ZipCode			zipCode to be set
     * @param {String} UserType			userType to be set
     * @param {String} Source			the source/selection type to be set ['default/Geo/user/Query']
     * 
     * @return {Object} 				sessionObj 
     */
    this.generateSessionUpdateObject = function (intent, storeId, zipCode, userType, source, banner, callBackFn){
    	let sessionObj = { 'info': { 'COMMON': {}, 'J4U': {}, 'SHOP': {} } };
    	// clear absdefaultecom local storage flag
		localStorage.removeItem('absdefaultecom');
		// set session intent
    	if (intent.toUpperCase() === 'INSTORE') {
    		// set common values
    		sessionObj.info.COMMON.preference = 'J4U';
    		sessionObj.info.COMMON.Selection = source;
    		sessionObj.info.COMMON.zipcode = zipCode; 
    			
    		// set J4U values
    		sessionObj.info.J4U.storeId = storeId;
    		sessionObj.info.J4U.zipcode = zipCode; 
    		
    		// if signed in user is doing J4U cross banner - don't need derived Ecomm store 
    		if ( ( userType.toUpperCase() === 'R' || userType.toUpperCase() === 'C' ) 
    				&& ( AB.userInfo.banner.toUpperCase() !== banner.toUpperCase() ) ) {
    				// add offbanner values 
    				let offBanner = {};
            		offBanner.storeId = storeId;
                    offBanner.zipcode = zipCode;
                    offBanner.preference = sessionObj.info.COMMON.preference;
                    offBanner.banner = banner;
                    sessionObj.info.offbanner = offBanner;    					
    			if ( callBackFn ) {
        			callBackFn(sessionObj);
        		} else {
        			return sessionObj;
        		}
    		}
    		// else need to resolve Ecomm store
    		else {
    			// use the validate store endpoint to resolve Ecomm store
    			let baseUrl = window.location.host;
    			let url = 'https://' + baseUrl + AB.storeResolverValidateEndpoint + '?storeid=' + storeId + '&banner=' + SWY.CONFIGSERVICE.getResolvedBanner() + '&preference=instore';
    			const xAPIHttpOptions = AB.xAPIstoreResolverHttpOptions;
    			$.ajax({
    				type: "GET", headers: xAPIHttpOptions, dataType: "json", url: url,
    				success: function (data) {
                        if (data.validRequest.isValid === true && data.validRequest.ecomStore 
                            && data.validRequest.ecomStore.defaultStore === false){
    						sessionObj.info.SHOP.storeId = data.validRequest.ecomStore.storeId;
    						sessionObj.info.SHOP.zipcode = data.validRequest.ecomStore.zipcode;
							localStorage.setItem('absdefaultecom' , false);
    					} else {
    						// set default values 
    						sessionObj.info.SHOP.storeId = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultStoreId;
    						sessionObj.info.SHOP.zipcode = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultZipcode;
							// set local storage flag for defaultStore 
							localStorage.setItem('absdefaultecom' , true);
    					}
    					if ( callBackFn ) {
    						callBackFn(sessionObj);
    					} else {
    						return sessionObj;
    					}
    				},
    				error: function() {
    					// if error - set to default values
    					sessionObj.info.SHOP.storeId = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultStoreId;
    					sessionObj.info.SHOP.zipcode = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultZipcode;
    					if ( callBackFn ) {
    						callBackFn(sessionObj);
    					} else {
                			return sessionObj;
    					}
                    }
                });
    		}
    	} else if (intent.toUpperCase() === 'DELIVERY' || intent.toUpperCase() === 'PICKUP') {
    		// set COMMON values
    		sessionObj.info.COMMON.preference = ( intent.toUpperCase() === 'DELIVERY' ? 'Delivery' : 'Dug');
    		sessionObj.info.COMMON.Selection = source;
    		sessionObj.info.COMMON.zipcode = zipCode;
    			
    		// set SHOP values
    		sessionObj.info.SHOP.storeId = storeId;
    		sessionObj.info.SHOP.zipcode = zipCode;  
    		
    		// set J4U values to get correct coupons
    		sessionObj.info.J4U.storeId = storeId;
        	sessionObj.info.J4U.zipcode = zipCode;  

			localStorage.setItem('absdefaultecom' , false);       		        		
    	
        	if ( ( userType.toUpperCase() === 'R' || userType.toUpperCase() === 'C' ) 
        			&& ( AB.userInfo.banner.toUpperCase() !== banner.toUpperCase() ) ){
    			// add offbanner values 
    			let offBanner = {};
           		offBanner.storeId = storeId;
                offBanner.zipcode = zipCode;
                offBanner.preference = sessionObj.info.COMMON.preference;               
                offBanner.banner = banner;
                sessionObj.info.offbanner = offBanner;    			                      		               
        	}
        	if ( callBackFn ) {
            	callBackFn(sessionObj);
            } else {
            	return sessionObj;
            }
    	} else {
    		// not valid parameters - return empty Obj
    		console.debug('GenerateSessionUpdateObject : not valid parameters');
    		sessionObj = {};
    		if ( callBackFn ) {
    			callBackFn(sessionObj);
    		} else {
    			return sessionObj;
    		}
    	}
    };
    
    
    /**
     * For authenticated user deep linking flow
     * 
     * When an authenticated user enters the site with valid deep link url parameters, 
     * we set that info to the abs_gsession cookie in order to initate the logic for the 
     * conflict modal flow, allowing the user to select the preferences taken from the url
     * 
     * We are using the abs_gsession cookie because that is the mechanism already in place for  
     * allowing the user to choose between two different sets of preferences via the 
     * conflict modal 
     * 
     */
    this.deepLinkSetGSessionCookie = function () {
    	let sessionObj = { 'info': { 'COMMON': {}, 'J4U': {}, 'SHOP': {} } };
    	
    	// get the validated deep link data
    	if ( SWY.deepLinkData.info ) { 
    		sessionObj.info.J4U.zipcode = SWY.deepLinkData.info.J4U.zipcode;
    		sessionObj.info.J4U.storeId = SWY.deepLinkData.info.J4U.storeId;
    		
    		sessionObj.info.SHOP.zipcode = SWY.deepLinkData.info.SHOP.zipcode;
    		sessionObj.info.SHOP.storeId = SWY.deepLinkData.info.SHOP.storeId;
    		
    		sessionObj.info.COMMON.zipcode = SWY.deepLinkData.info.SHOP.zipcode;
    		sessionObj.info.COMMON.Selection = SWY.deepLinkData.info.COMMON.Selection;
    		sessionObj.info.COMMON.preference = SWY.deepLinkData.info.COMMON.preference;
    	}
    	
    	// set sessionObj to g_session cookie
    	SWY.CONFIGSERVICE.setCookie( 'abs_gsession' , JSON.stringify(sessionObj) );
    	
    };
}).call(SWY.ENFORCEMENT);
(function () {

    var _defUrlPattern = '^https?:\\/\\/(.+?\\.)?';
    var _trustedDomainPattern = '';

    /**
     *
     */
    this.parseSessionCookie = function (cname) {
        var cvalue = null;
        var funcName = 'SWY.ENFORCEMENTUTILS.parseSessionCookie';

        console.debug(funcName + ' ENTRY');
        // get session cookie value
        cvalue = SWY.CONFIGSERVICE.getCookie(cname);
        console.debug(funcName + cname + '=' + cvalue);
        // check if session cookie exists
        if (typeof cvalue === 'string' && cvalue.length > 0) {
            // parse session cookie value
            cvalue = JSON.parse(cvalue);
        }
        else {
            // set default session cookie value
            cvalue = JSON.parse('{}');
        }
        console.debug(funcName + ' EXIT: cvalue=' + cvalue);

        return cvalue;
    };

    // check if page uri starts with /ecom
    this.isDotNetPage = function (uri) {
        // declare function variable(s)
        var result = null;
        var isDotNet = false;

        // check if uri is a string
        if (typeof uri === 'string' && uri != '') {
            var objAnchor = $('<a></a>').attr('href',uri);
            uri = $(objAnchor)[0].pathname;
            var firstChar = uri.charAt(0);
            if ( firstChar != "/"){
                uri = "/" + uri;
            }
            result = uri.match(/^\/ecom/);
            // check if user is hitting a non .NET page
            if (result != null) {
                isDotNet = true;
            } // does not match regex
            else if (uri.indexOf('/ecom/') > -1) {
                isDotNet = true;
            }
        }

        return isDotNet;
    };

    // check if page uri has extension of .html (isHtml)
    this.isHtmlPage = function (uri) {
        // declare function variable(s)

        var extension = null;
        var isHtml = false;
        // check if uri is a string
        if (typeof uri === 'string' && uri != '') {
            var objAnchor = $('<a></a>').attr('href',uri);
            uri = $(objAnchor)[0].pathname;
            extension = uri.substr((uri.lastIndexOf('.') + 1));
            if (/(html|html)$/ig.test(extension)) {
                isHtml = true;
            }
        }

        return isHtml;
    };

    // check if page uri does start with "/libs" (isNotEditor)
    this.isEditorPage = function (uri) {
        // declare function variable(s)
        var result = null;
        var isEditor = false;

        // check if uri is a string
        if (typeof uri === 'string') {
            result = uri.match(/^\/libs/);
            if (result != null) {
                isEditor = true;
            }
        }
    };

    // check if page uri does contain "jcr:content" (isNotPageContent)
    this.isContentPage = function (uri) {
        // declare function variable(s)
        var result = null;
        var isContent = false;

        // check if uri is a string
        if (typeof uri === 'string') {
            result = uri.match(/jcr:content/);
            if (result != null) {
                isContent = true;
            }
        }

        return isContent;
    };

    this.isPageMatched = function (params) {
        var isValid = false;
        var path;
        if (params.path != undefined) {
            path = params.path;
        } else {
            path = location.pathname;
        }
        var configPagePath = params.configPagePath;

        if (path.length > 0) {
            var pageName = path;
            var indexOfQuestion = pageName.indexOf("?");
            if (indexOfQuestion > 0) {
                pageName = pageName.substr(0, indexOfQuestion);
            }
            // check if location.pathname or path is NOT '/' -- usually home page
            if (pageName !== '/') {
                pageName = pageName.split('/').pop();
            }
            var firstIndexOfDot = pageName.indexOf(".");
            if (firstIndexOfDot > 0) {
                pageName = pageName.substr(0, firstIndexOfDot);
            }

            if (configPagePath && configPagePath.substr(configPagePath.length - pageName.length) == pageName) {
                isValid = true;
            }
        }
        return isValid;
    };

    /**
     * Generates authenticate guest url.
     *
     * @param {String} zipcode            the guest user's zipcode
     *
     * @return {String} url                the authentication guest url
     */
    this.generateAuthenticateURL = function (zipcode) {
        // declare function variable(s)
        var url = null;
        var funcName = 'SWY.ENFORCEMENTUTILS.generateAuthenticateURL';

        console.debug(funcName + ' ENTRY: zipcode=' + zipcode);
        // generate authenticate (guest) url
        url = SWY.authenticateGuestPath;
        url += '?zipcode=';
        url += zipcode;
        console.debug(funcName + ' EXIT: url=' + url);

        return url;
    };

    /**
     * Checks if current page is allowed to view by the user.
     *
     * @return {boolean} isAllowed        the flag to determine if page is allowed or not
     */
    this.isPageAllowed = function (allowedPages) {
        // declare function variable(s)
        var isAllowed = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isPageAllowed';

        console.debug(funcName + ' ENTRY');
        // check if current page is in the list of allowed pages
        isAllowed = SWY.CONFIGSERVICE.isPageInTheList(allowedPages);
        console.debug(funcName + ' EXIT: isAllowed=' + isAllowed);

        return isAllowed;
    };

    /**
     * Check if either registered user or guest user is authenticated.
     *
     * @return {boolean} isAuthenticated        the flag which determines that a user is authenticated
     */
    this.isAuthenticated = function () {
        // declare function variable(s)
        var isAuthenticated = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isAuthenticated';

        console.debug(funcName + ' ENTRY');
        // check if user is authenticated as guest or registered
        if (this.isAuthenticatedAsGuest() || this.isAuthenticatedAsRegistered() ||
                this.isAuthenticatedAsDeltaRegistered() || this.isAuthenticatedAsMultiBanner()) {
            console.debug(funcName + ' User is authenticated.');
            // set flag to true
            isAuthenticated = true;
        }
        console.debug(funcName + ' EXIT: isAuthenticated=' + isAuthenticated);

        return isAuthenticated;
    };

    /**
     * Checks if a user is previously logged in.
     *
     * @return {boolean} isPreviouslyLoggedIn        the flag which determines that a user is previously logged in
     */
    this.isPreviouslyLoggedIn = function () {
        // declare function variable(s)
        var isPreviouslyLoggedIn = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isPreviouslyLoggedIn';

        console.debug(funcName + ' ENTRY');
        // check if user is previously logged in either as registered or guest
        if (this.isPreviouslyLoggedInAsGuest() || this.isPreviouslyLoggedInAsRegistered()) {
            // set previously logged in to true
            isPreviouslyLoggedIn = true;
        }
        console.debug(funcName + ' EXIT: isPreviouslyLoggedIn=' + isPreviouslyLoggedIn);

        return isPreviouslyLoggedIn;
    };

    /**
     * Checks if a user is previously logged in WWW.
     *
     * @return {boolean} isPreviouslyLoggedInWWW        the flag which determines that a user is previously logged in
     */
    this.isPreviouslyLoggedInWWW = function () {
        // declare function variable(s)
        var isPreviouslyLoggedIn = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isPreviouslyLoggedInWWW';

        console.debug(funcName + ' ENTRY');
        // check if user is previously logged in either as registered or guest
        if (SWY.previousLogin.info && typeof SWY.previousLogin.info.J4U == 'object') {
            // set previously logged in to true
            isPreviouslyLoggedIn = true;
        }
        console.debug(funcName + ' EXIT: isPreviouslyLoggedIn=' + isPreviouslyLoggedIn);

        return isPreviouslyLoggedIn;
    };

    /**
     * Checks if guest user is authenticated.
     *
     * @return {boolean} isAuthenticated        the flag which determines that user is authenticated as guest
     */
    this.isAuthenticatedAsGuest = function () {
        // declare function variable(s)
        var isAuthenticated = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isAuthenticatedAsGuest';

        console.debug(funcName + ' ENTRY');
        // check if user session exists
        if (AB.userInfo) {
            // check if user is already authenticated as guest
            if (this.isValidUserType('G') &&
                (AB.userInfo.zipcode != null && AB.userInfo.zipcode != '')) {
                console.debug(funcName + ' User is guest user and has zipcode.');
                // set flag to true
                isAuthenticated = true;
            }
        }
        console.debug(funcName + ' EXIT: isAuthenticated=' + isAuthenticated);

        return isAuthenticated;
    };

    /**
     * Checks if guest user is previously logged in.
     *
     * @return {boolean} isLoggedIn        the flag which determines that user is previously logged in as guest
     */
    this.isPreviouslyLoggedInAsGuest = function () {
        // declare function variable(s)
        var isPreviouslyLoggedIn = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isPreviouslyLoggedInAsGuest';

        console.debug(funcName + ' ENTRY');
        // check if previous login exists
        if (typeof SWY.previousLogin != 'undefined' && Object.keys(SWY.previousLogin).length > 0) {
            // check if user is previously logged in as guest
            if (SWY.previousLogin.userType == 'G') {
                // set flag to true
                isPreviouslyLoggedIn = true;
            }
        }
        console.debug(funcName + ' EXIT: isPreviouslyLoggedIn=' + isPreviouslyLoggedIn);

        return isPreviouslyLoggedIn;
    };

    /**
     * Checks if registered user is authenticated.
     *
     * @return {boolean} isAuthenticated        the flag which determines that user is authenticated as registered user
     */
    this.isAuthenticatedAsRegistered = function () {
        // declare function variable(s)
        var isAuthenticated = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isAuthenticatedAsRegistered';

        console.debug(funcName + ' ENTRY');
        // check if user session exists
        if (AB.userInfo) {
            // check if user is already authenticated as logged in (registered)
            if (this.isValidUserType('R') || this.isValidUserType('C')) {
                console.debug(funcName + ' User is authenticated as registered and has token.');
                // set flag to true
                isAuthenticated = true;
            }
        }
        console.debug(funcName + ' EXIT: isAuthenticated=' + isAuthenticated);

        return isAuthenticated;
    };

    /**
     * Checks if registered user is previously logged in.
     *
     * @return {boolean} isLoggedIn            the flag which determines that user is previously logged in as registered user
     */
    this.isPreviouslyLoggedInAsRegistered = function () {
        // declare function variable(s)
        var isPreviouslyLoggedIn = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isPreviouslyLoggedInAsRegistered';

        console.debug(funcName + ' ENTRY');
        // check if previous login exists
        if (typeof SWY.previousLogin != 'undefined' && Object.keys(SWY.previousLogin).length > 0) {
            // check if previously logged in as registered
            if (SWY.previousLogin.userType === 'R' || SWY.previousLogin.userType === 'C') {
                // set flag to true
                isPreviouslyLoggedIn = true;
            }
        }
        console.debug(funcName + ' EXIT: isPreviouslyLoggedIn=' + isPreviouslyLoggedIn);

        return isPreviouslyLoggedIn;
    };

    /**
     * Checks if user is anonymous.
     *
     * @return {boolean} isAnonymous        the flag to determine if user is anonymous or not
     */
    this.isAnonymousUser = function () {
        // declare function variable(s)
        var isAnonymous = true;
        var funcName = 'SWY.ENFORCEMENTUTILS.isAnonymousUser';

        console.debug(funcName + ' ENTRY');
        // check if user is authenticated or previously logged in
        if (this.isAuthenticated() || this.isPreviouslyLoggedIn() ||
            this.isAuthenticatedAsDeltaRegistered() || this.isAuthenticatedAsMultiBanner()) {
            console.debug(funcName + ' User is NOT anonymous.');
            // set flag to true
            isAnonymous = false;
        }
        console.debug(funcName + ' EXIT: isAnonymous=' + isAnonymous);

        return isAnonymous;
    };

    /**
     * Checks if delta registered user is authenticated.
     *
     * @return {boolean} isAuthenticated        the flag which determines that user is authenticated as delta registered user
     */
    this.isAuthenticatedAsDeltaRegistered = function () {
        // declare function variable(s)
        var isAuthenticated = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isAuthenticatedAsDeltaRegistered';

        console.debug(funcName + ' ENTRY');
        // check if user session exists
        if (AB.userInfo) {
            // check if user is already authenticated as partially (delta registered)
            if (AB.userInfo.userType === 'D') {
                console.debug(funcName + ' User is authenticated as delta registered and has token.');
                // set flag to true
                isAuthenticated = true;
            }
        }
        console.debug(funcName + ' EXIT: isAuthenticated=' + isAuthenticated);

        return isAuthenticated;
    };

    /**
     * Checks if multi banner user is authenticated.
     *
     * @return {boolean} isAuthenticated        the flag which determines that user is authenticated as multi banner registered user
     */
    this.isAuthenticatedAsMultiBanner = function () {
        // declare function variable(s)
        var isAuthenticated = false;
        var funcName = 'SWY.ENFORCEMENTUTILS.isAuthenticatedAsMultiBanner';

        console.debug(funcName + ' ENTRY');
        // check if user session exists
        if (AB.userInfo) {
            // check if user is already authenticated as partially (delta registered)
            if (AB.userInfo.userType === 'M') {
                console.debug(funcName + ' User is authenticated as multi banner registered and has token.');
                // set flag to true
                isAuthenticated = true;
            }
        }
        console.debug(funcName + ' EXIT: isAuthenticated=' + isAuthenticated);

        return isAuthenticated;
    };

    this.decodeJWT = function(rawToken){
        var base64Url = rawToken.split('.')[1];
        //var base64 = base64Url.replace('-', '+').replace('_', '/');
        var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        return JSON.parse(window.atob(base64));
    };

    this.getScopesFromToken = function(rawToken){
        var json = this.decodeJWT(rawToken);
        return json.scp;
    };

    this.isElevatedScope = function(rawToken){
        var scopes = this.getScopesFromToken(rawToken);
        var elevatedScope = "used_credentials";
        if(scopes && scopes.length > 0){
            for(var i = 0 ; i < scopes.length; i++){
                if( elevatedScope === scopes[i] ){
                    return true;
                }
            }
        }
        return false;
    }

    this.updateReInitSite = function(targetSite) {
    	// declare function variable(s)
    	var sites = [];
    	var found = false;

    	// parse ECommReInit cookie
    	sites = SWY.ENFORCEMENTUTILS.parseReInitCookie();
    	// find target site in the array
    	for (var i in sites) {
    		if (sites[i] == targetSite) {
    			found = true;
    		}
    	}
    	// if not found, add target site to the array
    	if (!found) {
    		sites[sites.length] = targetSite;
        }
        //Deleting abSlot from local storage if targetsite is slot. 
        if(targetSite == 'slot'){
            var getSlotFromLS = localStorage.getItem('abSlot');
            if(getSlotFromLS){
                localStorage.removeItem('abSlot');
            }
        }
    	// build ECommReInitCookie
    	SWY.ENFORCEMENTUTILS.buildReInitCookie(sites);
    }

    this.removeReInitSite = function(currentSite) {
    	// declare function variable(s)
    	var sites = [];

    	// parse ECommReInit cookie
    	sites = SWY.ENFORCEMENTUTILS.parseReInitCookie();
    	// find current site in the array
    	for (var i in sites) {
    		if (sites[i].trim() == currentSite) {
    			sites.splice(i, 1);
    		}
    	}
    	// build ECommReInitCookie
    	SWY.ENFORCEMENTUTILS.buildReInitCookie(sites);
    }

    this.parseReInitCookie = function() {
    	// declare function variable(s)
    	var listOfSites = null;
    	var sites = [];

    	// get list of sites
    	listOfSites = decodeURIComponent(SWY.CONFIGSERVICE.getCookie('ECommReInit'));
    	// check if there's at least one site to re-initialize
    	if (listOfSites) {
    		// split site(s) into an array
    		sites = listOfSites.split('|');
    	}

    	return sites;
    }

    this.buildReInitCookie = function(sites) {
    	// declare function variable(s)
    	var listOfSites = '';
    	var site = null;

    	if (Array.isArray(sites)) {
    		listOfSites = sites.join('|');
    		SWY.CONFIGSERVICE.setDomainCookie('ECommReInit', listOfSites, SWY.CONFIGSERVICE.resolvedBanner + '.com', 0);
    	}
    }

    this.checkReInitSite = function(messageName) {
        var strMessageCookie = SWY.CONFIGSERVICE.getCookie('ECommReInit');
        var result = false;
        if(strMessageCookie && messageName) {
            arrMessage = strMessageCookie.split('|');
            result = (arrMessage.indexOf(messageName) != -1) ? true : false;
        }
        return result;
    };

    /**
     * Check if url is in trusted domain.
     *
     * @param url {string}      the url to check
     */
    this.isTrustedDomain = function(url) {
        // declare function variable(s)
        var isTrusted = false;
        var isAbsolute = null;
        var urlPath = null;

        // check if url has value
        if (url) {
            // check if url is a relative path
            if (url.indexOf('/') == 0) {
                // set isTrusted flag to true since url is a relative path
                isTrusted = true;
            }
            else {
                // check if url is an absolute path
                isAbsolute = new RegExp(_defUrlPattern).test(url);
                // check if absolute path
                if (isAbsolute) {
                    // split url into two parts (path before ? and query strings, query strings)
                    urlPath = url.split('?', 2);
                    // get url path before ? and query strings
                    url = urlPath[0];
                    // build trusted domain pattern regular expression
                    SWY.ENFORCEMENTUTILS.generateTrustedDomainPattern();
                    // check if url is trusted by checking if domain is in the list of trusted domains
                    isTrusted = new RegExp(_trustedDomainPattern).test(url);
                }
            }
        }
        return isTrusted;
    }

    /**
    * Generate trusted domain regular expression pattern.
    */
    this.generateTrustedDomainPattern = function() {
        // declare function variable(s)
        var trustedDomains = SWY.CONFIGSERVICE.domainConfig.allTrustedDomains;
        var domainListPattern = '';
        var domainPattern = '';

        // check if trusted domain url pattern has not generated yet
        if (!_trustedDomainPattern) {
            // check if list of trusted domains is populated
            if (trustedDomains) {
                // loop through each domain
                for (i in trustedDomains) {
                    // check if domain has already added to the domain pattern
                    if (domainPattern) {
                        // add the pipe delimiter
                        domainPattern += '|';
                    }
                    // add domain to the pattern
                    domainPattern += trustedDomains[i].replace('.', '\\.');
                }
                // generate the entire domain list pattern
                domainListPattern = '(';
                domainListPattern += domainPattern;
                domainListPattern += ')';
                // generate the global trusted domain pattern
                _trustedDomainPattern = _defUrlPattern;
                _trustedDomainPattern += domainListPattern;
            }
        }
    }

    this.isValidUserType = function(userType) {
        return AB.userInfo.userType === userType;
    }
}).call(SWY.ENFORCEMENTUTILS);
(function () {

    this.init = function () {
        // read page meta data
        this.readMetaData();
    };

    this.readMetaData = function () {
        // declare function variable(s)

        // get allowedUserTypes from page metadata
        SWY.allowedUserTypes = this.formatAsJson(this.getAllowedUserTypes());
        // get redirections from page metadata
        SWY.redirections = this.formatAsJson(this.getRedirections());
        // get allowedZipcodeModal from page metadata
        SWY.showZipcodeModal = this.getShowZipcodeModal();
        // set if page is allowed guest authentication
        SWY.isShopGuestAuthAllowed = this.isShopGuestAuthAllowed();
        // set if page could escape SSO
        SWY.isEscapeSSOAllowed = this.isEscapeSSOAllowed();
    };

    this.getAllowedUserTypes = function () {
        // declare function variable(s)
        var allowedUserTypes = null;

        allowedUserTypes = $('meta[name=allowedUserTypes]').attr("content");

        return allowedUserTypes;
    };

    this.getRedirections = function () {
        // declare function variable(s)
        var redirections = null;

        redirections = $('meta[name=redirections]').attr("content");

        return redirections;
    };

    this.getShowZipcodeModal = function () {
        // declare function variable(s)
        var showZipcodeModal = $('meta[name=showZipcodeModal]').attr("content");
        return showZipcodeModal == 'true';
    };

    this.isShopGuestAuthAllowed = function () {
        // declare function variable(s)
        var isAuthAllowed = false;
        var allowGuestAuthentication = null;

        allowGuestAuthentication = $('meta[name=allowGuestAuthentication]').attr('content');
        if (!AB.COMMON.isEmpty(allowGuestAuthentication)) {
            if (allowGuestAuthentication === 'true') {
                isAuthAllowed = true;
            }
        }

        return isAuthAllowed;
    };

    this.isEscapeSSOAllowed = function () {
        // declare function variable(s)
        var isSSOAllowed = false;
        var escapeSSO = null;

        escapeSSO = $('meta[name=escapeSSO]').attr('content');
        if (!AB.COMMON.isEmpty(escapeSSO)) {
            if (escapeSSO === 'true') {
                isSSOAllowed = true;
            }
        }
        return isSSOAllowed;
    };

    this.formatAsJson = function (jsonString) {
        var jsonDefault = '{}';
        var json = null;

        if (typeof jsonString !== 'undefined' && jsonString !== null) {
            jsonString = decodeURIComponent(jsonString);
            json = JSON.parse(jsonString);
        }
        else {
            json = JSON.parse(jsonDefault);
        }

        return json;
    };

    this.isAllowed = function (userType) {
        // declare function variable(s)
        var isAllowed = false;

        // check if user type and allowed user types are populated
        if (userType && SWY.allowedUserTypes) {
            // check user type if it's in the allowed user types
            isAllowed = this.userInList(userType, SWY.allowedUserTypes);
        }

        return isAllowed;
    };

    this.userInList = function (currentUserType, allowedUserTypes) {
        // declare function variable(s)
        var isInList = false;

        if (currentUserType && allowedUserTypes) {
            // loop through each allowed user type
            for (var userType in allowedUserTypes) {
                // check if current user type is an allowed user type
                if (currentUserType === allowedUserTypes[userType]) {
                    // set is in list flag to true
                    isInList = true;
                }
            }
        }

        return isInList;
    };

    this.getRedirectPath = function (userType) {
        // declare function variable(s)
        var redirectPath = null;
        var pagePath = null;

        // check if user type is being passed
        if (userType) {
            // check if user is delta registered (which is set in Shop)
            if (userType === 'D') {
                // get the current banner
                banner = SWY.CONFIGSERVICE.getResolvedBanner();
                // generate redirect url for home page
                redirectPath = SWY.CONFIGSERVICE.generateRedirectUrl(SWY.configService.welcomeBackPagePath, banner);
            }
            else if (userType === 'M') {    // check if user is multi banner registered user (which is set in Shop)
                // get the current banner
                banner = SWY.CONFIGSERVICE.getResolvedBanner();
                // generate redirect url for home page
                redirectPath = SWY.CONFIGSERVICE.generateRedirectUrl(SWY.configService.multiBannerLoginPagePath, banner);
                if (redirectPath && redirectPath.indexOf('?') == -1) {
                    redirectPath += '?newBanner=' + AB.userInfo.userData.newBanner;
                }
                else {
                    redirectPath += '&newBanner=' + AB.userInfo.userData.newBanner;
                }
                redirectPath += '&newZipcode=' + AB.userInfo.userData.newZipcode;
            }
            else if (SWY.redirections) {    // check if redirections are populated
                redirectPath = this.checkForRedirectPaths(userType, SWY.redirections);
            }
        }

        return redirectPath;
    };

    this.checkForRedirectPaths = function (currentUserType, redirections) {
        // declare function variable(s)
        var redirectPath = '';
        var defaultRedirectPath = '';
        var redirection;

        if (currentUserType && redirections) {
            for (var redirection in redirections) {
                var objRedirection = redirections[redirection];
                var userTypes = objRedirection.userType;
                for (var userType in userTypes) {
                    if (currentUserType === userTypes[userType]) {
                        redirectPath = objRedirection.redirectPath;
                    }
                    else if (userTypes[userType] === 'DEFAULT') {
                        defaultRedirectPath = objRedirection.redirectPath;
                    }
                }
            }
            if (redirectPath === '') {
                redirectPath = defaultRedirectPath;
            }
        }

        return redirectPath;
    };
}).call(SWY.RESTRICTEDRESOURCE);
(function () {

    var _userType = 'A';
    var _authorized = false;

    this.setUserType = function (userType) {
        _userType = userType;
    };

    this.getUserType = function () {
        return _userType;
    };

    this.setAuthorized = function (authorized) {
        _authorized = authorized;
    };

    this.isAuthorized = function () {
        return _authorized;
    };
}).call(SWY.USERTYPESTATE);
(function () {
    var lazyLoadConfig;
    var lazyLoadInstance;

    // Check if LazyLoad is available.
    if (typeof (LazyLoad) != 'undefined') {
        lazyLoadConfig = {
            elements_selector: ".ab-lazy"
        }
        lazyLoadInstance = new LazyLoad(lazyLoadConfig);
    }

    this.init = function () {
        if (typeof (LazyLoad) != 'undefined' && lazyLoadInstance) {
            lazyLoadInstance.update();
        } else {
            console.debug('AB.LAZYLOAD.init() :: Lazy loading library is not included in this page.');
        }
    };
}).call(AB.LAZYLOAD);
"use strict";

(function() {

    let conflictModalItems = {
        "conflictModalMainId"                  :'#fulfillment-conflict-modal',
        "zipCodeModalContainer"                :'.zip-code-modal-container',
        "modalShopImage"                       :'.fulfillment-conflict-modal__shop-image',
        "preferenceText"                       :'.fulfillment_preference-txt',
        "addressText"                          :'.fulfillment_address-txt',
        "inStoreIconClass"                     :'svg-icon-store-header-mobile',
        "inStoreText"                          :'In Store at ',
        "deliveryIconClass"                    :'svg-icon-Delivery-pref-page',
        "deliveryText"                         :'Delivery to ',
        "dugiconClass"                         :'svg-icon-DUG-pref-page',
        "dugText"                              :'Pick Up at',
        "previousSessionRadio"                 :'.previousSessionRadio',
        "currentSessionRadio"                  :'.currentSessionRadio',
        "conflictModalButton"                  :'.fulfillment-conflict-modal__button',
        "conflictModalClose"                   :'.conflict-modal-close',
        "currentBanner"                        :'.fulfillment-conflict-modal__currentBanner',
        "previousBanner"                       :'.fulfillment-conflict-modal__previousBanner',
        "previouslyShoppedId"                  :'#previouslyShopped',
        "currentlyShoppingId"                  :'#currentlyShopping'
    };

    //----------------------------------------------------------------------------
    /**
    * Initialization
    */
    //----------------------------------------------------------------------------
    this.init = function ()
    {
       this.makeProfileCall();
    };

    //----------------------------------------------------------------------------
    /**
     * Make call to get full profile details if user is logged.
     */
    //----------------------------------------------------------------------------
    this.makeProfileCall = function () { 
        let gSessionCookie = SWY.CONFIGSERVICE.getCookie('abs_gsession');
        let orderNumberCookie = SWY.CONFIGSERVICE.getCookie('OrderNumber');
        const userType = AB.userInfo.userType;

        if(AB.COMMON.isCookieEmpty(gSessionCookie) && AB.COMMON.isCookieEmpty(orderNumberCookie) && (userType === 'C' || userType === 'R') ){
            this.checkAndSetSWYSessionCookie();
        }
    };

    //----------------------------------------------------------------------------
    /**
     * Get full profile details.
     */
    //----------------------------------------------------------------------------
    this.checkAndSetSWYSessionCookie = function (){
        this.getFullProfileDetail()
           .then(data => {
            let profileDetailObject = AB.CHECKPROFILE.getUserPreference(data);
            AB.CHECKPROFILE.checkProfileAndUpdateSessionCookies(profileDetailObject);
            })
           .catch(error => { 
            });
    };

    //----------------------------------------------------------------------------
    /**
     * Get full profile details.
     */
    //----------------------------------------------------------------------------
    this.getFullProfileDetail= function () {
        return new Promise((resolve, reject) => {
            let customerId = AB.userInfo.customerId ? AB.userInfo.customerId : '111-111-1111111111111';
            $.ajax({
                headers: AB.ucaHttpOptionsV2,
                url: AB.storeAddressPath.replace('{customerId}', customerId),
                dataType: "json",
                success: function (data) {
                    resolve(data);
                },
                error: function (jqXHR, text, error) {
                    if(jqXHR.status === 401 && !AB.userInfo.customerId){
                        AB.COMMON.reconcileExpiredTokenUserState();
                    }
                    else{
                        reject(error);
                    }
                }
            });
        });
    };

    //----------------------------------------------------------------------------
    /**
     * Get the preferences from profile for the current banner.
     */
    //----------------------------------------------------------------------------
    this.getUserPreference = function (data){
        let profileDetailObject = {};     
        if(data)
        {
            let currentBanner = SWY.CONFIGSERVICE.getResolvedBanner().toLowerCase(); //vons
            let preferencesArr = data.preferences;
            let storesObj = data.stores;
            let postalCodes = data.postalCodes;  
 
            let userPreference = null;
            let userPreferenceBanner = null;
            let matchedStoreObject = null;
            let deliveryPostalCode = null;

            if(preferencesArr){
                for(let i = 0; i < preferencesArr.length; i ++){
                    let prefObj = preferencesArr[i];
                    if(prefObj.categoryCode === 'FULFILLMENT' && prefObj.subCategoryCode === 'METHOD' && currentBanner === prefObj.bannerId.toLowerCase()) {
                        userPreference = prefObj.value.toLowerCase();
                        userPreferenceBanner = prefObj.bannerId.toLowerCase();
                        break;
                    }
                }
            }

            let storesObject = userPreference === "delivery" ? postalCodes : storesObj;

            if(userPreference && userPreferenceBanner){
                if(storesObject){
                    if(userPreference === "delivery"){
                        let postalCodes = storesObject;
                        for(let h = 0; h < postalCodes.length; h ++){
                            let postalCodeObject = postalCodes[h];
                            if(postalCodeObject.stores[0].banner.toLowerCase() === currentBanner){
                                matchedStoreObject = postalCodeObject.stores[0];
                                deliveryPostalCode = postalCodeObject.postalCode;
                                break;
                            }
                        }
                    }else{
                        for(let h = 0; h < storesObj.length; h ++){
                            let storeObj = storesObj[h];
        
                            if(userPreference === 'j4u' && storeObj.storePreference === 'Preferred'){
                                matchedStoreObject = storeObj;
                                break; 
                            }else if (userPreference === 'dug' && storeObj.storePreference === 'DriveUp' && storeObj.banner.toLowerCase() === userPreferenceBanner){
                                matchedStoreObject = storeObj;
                                break;
                            } 
                        }
                    }             
                }
            }
            
            profileDetailObject.userPreference = userPreference;
            profileDetailObject.userPreferenceBanner = userPreferenceBanner;
            profileDetailObject.currentBanner = currentBanner;
            profileDetailObject.matchedStoreObject = matchedStoreObject;
            profileDetailObject.deliveryPostalCode = deliveryPostalCode;
        }

        return profileDetailObject;
    };

    //----------------------------------------------------------------------------
    /**
     * Checks the preferences from profile and updates browser cookies for the logged in user
     */
    //----------------------------------------------------------------------------
    this.checkProfileAndUpdateSessionCookies = function(profileDetailObject){
        let userPreference = profileDetailObject.userPreference;
        let userPreferenceBanner = profileDetailObject.userPreferenceBanner;
        let matchedStoreObject = profileDetailObject.matchedStoreObject;
        let currentBanner = profileDetailObject.currentBanner;

        if(matchedStoreObject){
            let swySharedSessionObject = { 'info': { 'COMMON': {}, 'J4U': {}, 'SHOP': {} } } ;
            let sharedSession = AB.CHECKPROFILE.getSWYSharedSessionCookie();
            
            if(userPreference === 'j4u'){
                let isEcomStore = false;
                let storeAddress = matchedStoreObject.address;
                matchedStoreObject.services[0].type.forEach(function(servicetype){
                    if(servicetype === 'DRIVEUP' ||  servicetype === 'DELIVERY'){
                        isEcomStore = true;
                    }
                });

                if(matchedStoreObject.banner.toLowerCase() === currentBanner) {
                    // Compare current store id and preference with matched profile store id and preference.
                    if(sharedSession.info.J4U.storeId !== matchedStoreObject.storeId || AB.userInfo.preferenceMode.toLowerCase() !== "j4u"){
                        swySharedSessionObject.info.COMMON.preference = "J4U";
                        swySharedSessionObject.info.J4U.storeId = matchedStoreObject.storeId;
                        swySharedSessionObject.info.SHOP.storeId = matchedStoreObject.storeId; 
                        swySharedSessionObject = AB.CHECKPROFILE.refineStoreAddress(storeAddress, swySharedSessionObject, false, "J4U");

                        AB.CHECKPROFILE.updateCookiesFromProfile(userPreferenceBanner, isEcomStore, swySharedSessionObject);
                    }
                }else{  
                     AB.CHECKPROFILE.getSWYSharedSession(isEcomStore, storeAddress, currentBanner, userPreferenceBanner, matchedStoreObject);           
                }   

            }else if(userPreference === 'dug'){

                // Compare current store id and preference with matched profile store id and preference.
                if(sharedSession.info.SHOP.storeId !== matchedStoreObject.storeId || AB.userInfo.preferenceMode.toLowerCase() !== "dug") {
                    let storeAddress = matchedStoreObject.address;
                    
                    swySharedSessionObject.info.SHOP.storeId = matchedStoreObject.storeId;
                    swySharedSessionObject.info.COMMON.preference = "DUG";   
                    swySharedSessionObject.info.J4U.storeId = matchedStoreObject.storeId;

                    // pass false as we are not going to trigger conflict modal.
                    swySharedSessionObject = AB.CHECKPROFILE.refineStoreAddress(storeAddress, swySharedSessionObject, false, "DUG");

                    //pass true as DUG/Delivery are Ecom stores.
                    AB.CHECKPROFILE.updateCookiesFromProfile(userPreferenceBanner, true, swySharedSessionObject);
                }
            }else if(userPreference === 'delivery'){ 
                let deliveryPostalCode = profileDetailObject.deliveryPostalCode;

                // Compare session zipcode with profile zipcode if zipcodes are different then update session with profile zipcode.
                if((sharedSession.info.SHOP.zipcode !== deliveryPostalCode) || AB.userInfo.preferenceMode.toLowerCase() !== "delivery" ){
                    //let storeAddress = matchedStoreObject.address;
                    swySharedSessionObject.info.SHOP.storeId = matchedStoreObject.storeId;
                    swySharedSessionObject.info.COMMON.preference = 'DELIVERY';   
                    swySharedSessionObject.info.J4U.storeId = matchedStoreObject.storeId;
                    swySharedSessionObject.info.J4U.zipcode = deliveryPostalCode;
                    swySharedSessionObject.info.SHOP.zipcode = deliveryPostalCode;

                    //pass true as DUG/Delivery are Ecom stores.
                    AB.CHECKPROFILE.updateCookiesFromProfile(userPreferenceBanner, true, swySharedSessionObject);
                }
            }

            if(matchedStoreObject.isClosed === true) {
                window.storeFulfillmentModal.component.setModalDisplayData(3, null, null, true);
            }  
        }
    };

    //----------------------------------------------------------------------------
    /**
     * Update cookies based on profile information
     */
    //----------------------------------------------------------------------------
    this.updateCookiesFromProfile = function (banner, isEcomStore, updateSessionObj){
        let storeId = updateSessionObj.info.SHOP.storeId;

        if(!isEcomStore){
            AB.CHECKPROFILE.getDerivedEcomStore(banner, storeId)
                .then(data => {
                        if(data)
                        {
                            if (data.validRequest.isValid === true)
                            {
                                updateSessionObj.info.SHOP.storeId = data.validRequest.ecomStore.storeId;
                                updateSessionObj.info.SHOP.zipcode = data.validRequest.ecomStore.zipcode;
                            } 
                            else 
                            {
                                updateSessionObj.info.SHOP.storeId = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultStoreId;
                                updateSessionObj.info.SHOP.zipcode = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultZipcode;                              
                            }
                            AB.COMMON.updateUserSession(updateSessionObj, false);
                            location.reload();
                        }
                }).catch(data => {
                        updateSessionObj.info.SHOP.storeId = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultStoreId;
                        updateSessionObj.info.SHOP.zipcode = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultZipcode;

                        AB.COMMON.updateUserSession(updateSessionObj, false);
                        location.reload();
                });
        }else{
            AB.COMMON.updateUserSession(updateSessionObj, false);
            location.reload();
        }     
     };

    //----------------------------------------------------------------------------
    /**
     * Get the derived store for non Ecom store
     */
    //----------------------------------------------------------------------------
    this.getDerivedEcomStore = function (banner, storeId){
        let url = AB.storeResolverValidateEndpoint + '?storeid=' + storeId + '&banner=' + banner + '&preference=instore';
        return new Promise((resolve, reject) => {
           $.ajax({
              url: url,
              headers: AB.xAPIstoreResolverHttpOptions,
              dataType: "json",
              success: function (data) {
                  resolve(data);
              },
              error: function (jqXHR, text, error) {
                     reject(error);
              }
          });
        });
    };

    //----------------------------------------------------------------------------
    /**
     * Get the Store address if address is undefined in the SWY Shared Session
     */
    //----------------------------------------------------------------------------
    this.getStoreAddressFromXapi = function (storeId)
    {
         const baseUrl = window.location.origin;
         const url = baseUrl + AB.storeResolverStoreAddressEndpoint + '?storeid=' + storeId;
         let streetAddress =  null;

         return new Promise((resolve, reject) => {
         $.get({
             url: url,
             method: 'GET',
             headers: AB.xAPIstoreResolverHttpOptions,
             dataType: 'json',
             async:false,

             success: function(response, textStatus, xhr) {
                 if(response.storeAddressModel){
                    streetAddress = response.storeAddressModel.address.line1 + '+' + response.storeAddressModel.address.city + '+' + response.storeAddressModel.address.state + '+' + response.storeAddressModel.address.zipcode;
                    resolve(streetAddress);
                 }
             },
             error: function(xhr, status, error) {
                 reject(null);
             }
           });
        });
    };

    //----------------------------------------------------------------------------
    /**
     * Get the current SWY Shared Session
     */
    //----------------------------------------------------------------------------
     this.getSWYSharedSession = function (isEcomStore, storeAddress, currentBanner, userPreferenceBanner, matchedStoreObject) 
     {
        let currentSwySharedSessionObject = {};
        let sharedSession = AB.CHECKPROFILE.getSWYSharedSessionCookie();

        let currentSessionAddress = sharedSession.info.J4U.address;

        currentSwySharedSessionObject.j4uStoreId = sharedSession.info.J4U.storeId;
        currentSwySharedSessionObject.shopStoreId = sharedSession.info.SHOP.storeId;
        currentSwySharedSessionObject.j4uzipcode = sharedSession.info.J4U.zipcode;
        currentSwySharedSessionObject.shopzipcode = sharedSession.info.SHOP.zipcode;
        currentSwySharedSessionObject.banner = currentBanner;
        currentSwySharedSessionObject.preference = sharedSession.info.COMMON.preference.toLowerCase();

         if(typeof currentSessionAddress === 'undefined')
         {
            AB.CHECKPROFILE.getStoreAddressFromXapi(sharedSession.info.J4U.storeId)
            .then(streetAddress => {
                currentSessionAddress = streetAddress.replace(/ /g, "+");
                currentSwySharedSessionObject.address = currentSessionAddress;
                AB.CHECKPROFILE.callbackTriggerConflictModal(isEcomStore, storeAddress, userPreferenceBanner, matchedStoreObject, currentSwySharedSessionObject);
            }).catch(data => {
                   
            });
         }
         else {
            currentSessionAddress = currentSessionAddress.replace(/ /g, "+");
            currentSwySharedSessionObject.address = currentSessionAddress;

            AB.CHECKPROFILE.callbackTriggerConflictModal(isEcomStore, storeAddress, userPreferenceBanner, matchedStoreObject, currentSwySharedSessionObject);
         }
     };

    //----------------------------------------------------------------------------
     /**
     * This Method displays left part of conflict modal
     */
     //----------------------------------------------------------------------------
 
     this.renderCurrentlyShopping = function (sessionObj) 
     {
         const conflictModalMainId        = $(conflictModalItems.currentlyShoppingId),
               shopImage                  = $(conflictModalItems.modalShopImage),
               currentlyShoppingIdElem    = $(conflictModalItems.currentlyShoppingId),
               preferenceElem             = conflictModalMainId.find(shopImage),
               preferenceText             = conflictModalMainId.find(conflictModalItems.preferenceText),
               addressText                = conflictModalMainId.find(conflictModalItems.addressText),
               preference                 = sessionObj.preference;
         if(preference === 'j4u' || preference === 'instore')
          {
             preferenceElem.addClass(conflictModalItems.inStoreIconClass);
             preferenceText.text(conflictModalItems.inStoreText);
             const address=sessionObj.address;
             if(address)
             addressText.text(address.split("+").join(" "));
          }
         else if(preference === 'delivery')
          {
             preferenceElem.addClass(conflictModalItems.deliveryIconClass);
             preferenceText.text(conflictModalItems.deliveryText + sessionObj.shopzipcode);
          }
         else if(preference === 'dug')
          {
             preferenceElem.addClass(conflictModalItems.dugiconClass);
             preferenceText.text(conflictModalItems.dugText);
             const address=sessionObj.address;
             if(address)
             addressText.text(address.split("+").join(" "));
          }
          currentlyShoppingIdElem.attr('make-mystore-btn', encodeURIComponent(JSON.stringify(sessionObj)));
     };

     //----------------------------------------------------------------------------
    /**
    * This Method displays Right part of conflict modal
    */
    //----------------------------------------------------------------------------

    this.renderPreviouslyShopped = function(sessionObj) 
    {
            const conflictModalMainId   = $(conflictModalItems.previouslyShoppedId),
            shopImage             = $(conflictModalItems.modalShopImage),
            previousShopIdElem    = $(conflictModalItems.previouslyShoppedId),
            preferenceElem        = conflictModalMainId.find(shopImage),
            preferenceText        = conflictModalMainId.find(conflictModalItems.preferenceText),
            addressText           = conflictModalMainId.find(conflictModalItems.addressText),
            preference            = sessionObj.preference;

        if(preference === 'j4u' || preference === 'instore')
        {
            preferenceElem.addClass(conflictModalItems.inStoreIconClass);
            preferenceText.text(conflictModalItems.inStoreText);
            const address=sessionObj.address;
            if(address)
            addressText.text(address.split("+").join(" "));
        }
        else if(preference === 'delivery')
        {
           preferenceElem.addClass(conflictModalItems.deliveryIconClass);
           preferenceText.text(conflictModalItems.deliveryText + sessionObj.shopzipcode);

        }
        else if(preference === 'dug')
        {
            preferenceElem.addClass(conflictModalItems.dugiconClass);
            preferenceText.text(conflictModalItems.dugText);
            const address=sessionObj.address;
            if(address)
            addressText.text(address.split("+").join(" "));
        }
        previousShopIdElem.attr('make-mystore-btn', encodeURIComponent(JSON.stringify(sessionObj)));

    };

    this.refineStoreAddress = function(storeAddress, profileSessionInfo, triggerConflictModal, preference){
        let address;
        /**
         * if response misses any field such as zipcode, etc it wont be shown in 
         * conflict modal or updated in session cookie
         */
        if(storeAddress){
            if(storeAddress.zipCode) 
            {
                if(triggerConflictModal){
                    profileSessionInfo.j4uzipcode = storeAddress.zipCode;                
                    profileSessionInfo.shopzipcode = storeAddress.zipCode;
                }else{
                    profileSessionInfo.info.J4U.zipcode = storeAddress.zipCode;
                    profileSessionInfo.info.SHOP.zipcode = storeAddress.zipCode;
                }              
            }
            
            if(storeAddress.address1){
                address = storeAddress.address1.replace(/ /g, "+")+',+';
            }
                                      
            if(storeAddress.city){
                address = address + storeAddress.city.replace(/ /g, "+")+',+';
            }
            if(storeAddress.state){
                address = address + storeAddress.state+'+';
            }
            if(storeAddress.zipCode){
                address = address + storeAddress.zipCode;
            }

            if(triggerConflictModal){
                profileSessionInfo.address = address; 
            }else{
                //address = address.split("+").join(" ");
                if(preference === "J4U"){
                    profileSessionInfo.info.J4U.address = address;
                }else if(preference === "DUG"){
                    profileSessionInfo.info.SHOP.address = address;
                } 
            }
        }     

        return profileSessionInfo;
    };

     //----------------------------------------------------------------------------
    /**
    * This call back function triggers conflict modal
    */
    //----------------------------------------------------------------------------
    this.callbackTriggerConflictModal = function(isEcomStore, storeAddress, userPreferenceBanner, matchedStoreObject, currentSwySharedSessionObject){
        const conflictModalMainIdElement = $('#fulfillment-conflict-modal');
        let swySharedSessionObject = {};
        swySharedSessionObject.shopStoreId = matchedStoreObject.storeId;
        swySharedSessionObject.j4uStoreId = matchedStoreObject.storeId; 
        swySharedSessionObject.banner = matchedStoreObject.banner;
        swySharedSessionObject.preference = "j4u";

          // pass true as we are going to trigger conflict modal.
          swySharedSessionObject = AB.CHECKPROFILE.refineStoreAddress(storeAddress, swySharedSessionObject, true, "J4U");
                     
          if(!isEcomStore){
             AB.CHECKPROFILE.getDerivedEcomStore(userPreferenceBanner, matchedStoreObject.storeId)
              .then(data => {
                  if(data)
                  {
                      if (data.validRequest.isValid === true)
                      {
                          swySharedSessionObject.shopStoreId = data.validRequest.ecomStore.storeId;
                          swySharedSessionObject.shopzipcode = data.validRequest.ecomStore.zipcode;
                      } 
                      else 
                      {
                          swySharedSessionObject.shopStoreId = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultStoreId;
                          swySharedSessionObject.shopzipcode = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultZipcode;
                          
                      }

                      AB.CHECKPROFILE.renderBanner(currentSwySharedSessionObject.banner, swySharedSessionObject.banner);
                      AB.CHECKPROFILE.renderCurrentlyShopping(currentSwySharedSessionObject);
                      AB.CHECKPROFILE.renderPreviouslyShopped(swySharedSessionObject);
                      (conflictModalMainIdElement).modal('show');
                      AB.DATALAYER.setStoreConflictModalView();
                  }
              }).catch(data => {                            
                  swySharedSessionObject.shopStoreId = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultStoreId;
                  swySharedSessionObject.shopzipcode = SWY.CONFIGSERVICE.storeResolutionConfig.bannerDefaultZipcode;

                  AB.CHECKPROFILE.renderBanner(currentSwySharedSessionObject.banner, swySharedSessionObject.banner); 
                  AB.CHECKPROFILE.renderCurrentlyShopping(currentSwySharedSessionObject);
                  AB.CHECKPROFILE.renderPreviouslyShopped(swySharedSessionObject);
                  (conflictModalMainIdElement).modal('show');
                  AB.DATALAYER.setStoreConflictModalView();
              });
          }else{
              AB.CHECKPROFILE.renderBanner(currentSwySharedSessionObject.banner, swySharedSessionObject.banner);
              AB.CHECKPROFILE.renderCurrentlyShopping(currentSwySharedSessionObject);
              AB.CHECKPROFILE.renderPreviouslyShopped(swySharedSessionObject);
              (conflictModalMainIdElement).modal('show');
              AB.DATALAYER.setStoreConflictModalView();
          }
    };

    //----------------------------------------------------------------------------
    /**
     * Get the current SWY Shared Session Cookie
     */
    //----------------------------------------------------------------------------
    this.getSWYSharedSessionCookie = function () 
    {
       let sharedSession = SWY.CONFIGSERVICE.getCookie('SWY_SHARED_SESSION_INFO');
       sharedSession = decodeURI(sharedSession)
       sharedSession = JSON.parse(sharedSession);

       return sharedSession;
    };

    //----------------------------------------------------------------------------
    /**
    * This Method displays logos on conflict modal for banner type conflict.
    */
    //----------------------------------------------------------------------------

    this.renderBanner = function(currentBanner, previousBanner)
    {
        if(currentBanner && previousBanner && (currentBanner !== previousBanner))
        {
            const currentBannerClassElem   = $(conflictModalItems.currentBanner),
                  previousBannerClassElem  = $(conflictModalItems.previousBanner);
    
            currentBannerClassElem.attr("src", AB.CHECKPROFILE.getBannerLogo(currentBanner));
            currentBannerClassElem.attr("alt", currentBanner);
            previousBannerClassElem.attr("src", AB.CHECKPROFILE.getBannerLogo(previousBanner));
            previousBannerClassElem.attr("alt", previousBanner);
            currentBannerClassElem.show();
            previousBannerClassElem.show();
        }
    };

    //----------------------------------------------------------------------------
    /**
    * This Method Calls COMMON method to update session cookies.
    */
    //----------------------------------------------------------------------------

    this.getBannerLogo = function (bannerKey)
    {
        const conflictModalElem   = $(conflictModalItems.conflictModalMainId),
              bannerLogoStr = (conflictModalElem).attr('data-bannerlogomap');
        let logoUrl;
        if (bannerLogoStr) {
            const bannerLogoMap = JSON.parse(decodeURIComponent(bannerLogoStr));
            bannerKey = bannerKey.toLowerCase().split(' ').join('');
            logoUrl = bannerLogoMap[bannerKey];
        }
        return logoUrl;
    };
}).call(AB.CHECKPROFILE);
/* jshint esnext: true */

(function() {

    /**
     * Method handling the drawing of the category carousel component.
     * 
     * @param data - array of categories that need to be drawn
     * @param carouselViewSelector - selector of the carousel container
     * @param wrapperElement - DOM element wrapper for the component version
     * @param unifyCategory - flag checking if category entries need updating to the unified format
     * @param aisleLevel - aisle level indicator (eg. L1 / L2 / etc.)
     * @param componentTitle - string with the title of the component where carousel is added
     * @param viewType - component view type (can be circle or rectangle)
     */
    this.drawContent = (
        data = [],
        carouselViewSelector = '',
        wrapperElement,
        unifyCategory = false,
        aisleLevel = '',
        componentTitle = 'false',
        viewType = 'circle'
    ) => {

        // README: Clean up existing slick content
        this.destroySlick(carouselViewSelector);

        const carouselViewWrapper = wrapperElement  && wrapperElement.querySelector(carouselViewSelector);

        if (carouselViewWrapper) {

            // README: Get number of pages based on viewType
            // 5 items per page for circle
            // 3 items per page for rectangle
            const itemsPerPage = viewType === 'rectangle' ? 3 : 5;
            const totalPages = Math.ceil(data.length / itemsPerPage);

            // README: Draw category items
            for (let page = 0; page < totalPages; page++) {

                let firstPosition = 0;
                let stopPosition = 0;

                if (viewType === 'rectangle') {
                    firstPosition = page > 0 ? page * 3 : 0;
                    stopPosition = firstPosition + 3;

                } else {
                    firstPosition = page > 0 ? page * 5 : 0;
                    stopPosition = firstPosition + 5;
                }

                stopPosition = stopPosition > data.length ? data.length : stopPosition;

                // README: Create page element
                const categoryPage = document.createElement('div');
                categoryPage.classList.add('aisle-page');

                // README: Set specific class to identify circle or rectangle items
                if (viewType === 'rectangle') {
                    categoryPage.classList.add('aisle-page--rectangle');
                } else {
                    categoryPage.classList.add('aisle-page--circle');
                }
 
                for (let pageCategory = firstPosition; pageCategory < stopPosition; pageCategory++) {

                    let item = data[pageCategory];

                    // README: Unify category entity to existing data format
                    if (AB.SHOPBYCATEGORY && AB.SHOPBYCATEGORY.Util && unifyCategory) {
                        item = new AB.SHOPBYCATEGORY.Util.SBCCategoryModel(item, unifyCategory, aisleLevel);
                    }

                    // README: Create category item
                    const categoryItem = document.createElement('div');
                    categoryItem.classList.add(
                        'categories-item',
                        'aisle-item'
                    );
                    categoryItem.ariaLabel = item.aisleName ? item.aisleName : item.aisleAltText ? item.aisleAltText : '';

                    const aisleLink = document.createElement('a');
                    aisleLink.classList.add('aisle-category');
                    aisleLink.href = item.pagePath ? item.pagePath : item.aislePath ? item.aislePath : '#';

                    // README: Set analytics logic for the aisle item link
                    aisleLink.dataset.aisleName = item.aisleName ? item.aisleName : '';
                    if (AB.DATALAYER) {
                        aisleLink.onclick = function() {
                            AB.DATALAYER.setSBCLinkClickEvents(aisleLink);
                        }
                    } else {
                        aisleLink.onclick = function() {
                            const aisleName = aisleLink.dataset['aisleName'];
                            const aislesPreviousPage = 'aisles-' + aisleName;
                            localStorage.setItem('aislesPreviousPage', aislesPreviousPage);
                        }
                    }

                    // README: Generate specific content for circle view
                    let image;
                    if (viewType === 'circle') {

                        const imageContainer = document.createElement('div');
                        imageContainer.classList.add('categories-item__image-container');
                        const imageWrapper = document.createElement('div');
                        imageWrapper.classList.add('categories-item__image-wrapper');

                        image = document.createElement('img');
                        image.alt = '';
                        image.classList.add('categories-item__image');
                        image.src = item.fileReference ? item.fileReference : '/';

                        // README: Add category image structure to the main DOM structure
                        imageWrapper.append(image);
                        imageContainer.append(imageWrapper);
                        aisleLink.append(imageContainer);


                        const itemText = document.createElement('div');
                        itemText.classList.add('categories-item__item-text');

                        const aisleCategory = document.createElement('div');
                        aisleCategory.classList.add('aisle-category');

                        const aisleCategorySpan = document.createElement('span');
                        aisleCategorySpan.innerHTML = item.aisleName ? item.aisleName : item.aisleAltText ? item.aisleAltText : '';

                        // README: Add categoriesText to the DOM element
                        aisleCategory.append(aisleCategorySpan);
                        itemText.append(aisleCategory);
                        aisleLink.append(itemText);

                    // README: Generate specific content for rectangle view
                    } else if (viewType === 'rectangle') {

                        const aisleCategorySpan = document.createElement('span');
                        aisleCategorySpan.innerHTML = item.aisleName ? item.aisleName : item.aisleAltText ? item.aisleAltText : '';
                        aisleLink.append(aisleCategorySpan);
                    }


                    // README: Add item element to the page
                    categoryItem.append(aisleLink);
                    categoryPage.append(categoryItem);


                    // README: This is necessary in order for the onerror flow to work properly
                    if (
                        viewType === 'circle'
                        && AB.SHOPBYCATEGORY
                        && AB.SHOPBYCATEGORY.Util
                    ) {
                        image = categoryPage.querySelector('.categories-item:last-child .categories-item__image');
                        image.onerror = () => {
                            image.onerror = null;
                            AB.SHOPBYCATEGORY.Util.setSBCDefaultImageView(image, item.aisleName);
                        }
                    }
                }

                // README: Draw page in the wrapper
                carouselViewWrapper.append(categoryPage);
            }

            this.initSlick(carouselViewSelector, componentTitle);
        }
    };

    /**
     * Method initializing slick component for the categories carousel.
     * 
     * @param carouselViewSelector - selector of the carousel container
     * @param componentTitle - string with the title of the component where carousel is added
     */
    this.initSlick = (carouselViewSelector = '', componentTitle = 'false') => {

        // README: Initialize slick plugin for carousel
        $(carouselViewSelector).slick({
            tail: true,
            dots: true,
            prevArrow: null,
            nextArrow: null,
            infinite: false,
            cssEase: 'linear',
            speed: 300,
            centerMode: false,
            variableWidth: true,
            variableHeight: true,
            arrows: true,
            mobileFirst: true,
            slidesToShow: 1,
            slidesToScroll: 1,
            accessibility: true,
            swipe: true,
            swipeToSlide: false

        }).on('beforeChange', (event, slick, currentSlide, nextSlide) => {

            setTimeout(() => {

                const slides = slick['$slides'];
                let activeSlides = []
        
                activeSlides = slides.filter((index, slide) => {
                    return slide.classList.contains('slick-active');
                });
        
                if (currentSlide < nextSlide) {
                    activeSlides[activeSlides.length - 1].getElementsByTagName('A')[0] !== undefined
                        ? activeSlides[activeSlides.length - 1].getElementsByTagName('A')[0].focus()
                        : null;

                } else {
                    activeSlides[0].getElementsByTagName('A')[0] !== undefined
                        ? activeSlides[0].getElementsByTagName('A')[0].focus()
                        : null;
                }
            }, 500);

        }).on('afterChange', () => {

            /*
             * README: Update the content for ADA functionality.
             * 
             * Invoking setTimeout with a callback, and zero as the second argument will schedule the callback to be run asynchronously,
             * after the shortest possible delay - which will be around 10ms when the tab has focus and the JavaScript thread of execution
             * is not busy.
             * 
             * This will make the corrections to the slick content to execute after slick updates the DOM with the wrong content.
             * This way the order of execution is correct.
             * 
             * See also {@link https://stackoverflow.com/a/779785}
             */
            setTimeout(() => {

                this.updateADAFunctionality(carouselViewSelector, componentTitle);
            }, 0);
        });

        if ($(carouselViewSelector).hasClass('slick-initialized')) {

            // README: Update the content for ADA functionality
            this.updateADAFunctionality(carouselViewSelector, componentTitle);
        }
    };

    /**
     * Method removing slick component for the categories carousel.
     * 
     * @param carouselViewSelector - selector of the carousel container
     */
    this.destroySlick = (carouselViewSelector = '') => {

        // README:
        // Destroy slick if it is already initiaized on the carouselViewSelector.
        // Remove old content.
        if ($(carouselViewSelector).hasClass('slick-initialized')) {

            $(carouselViewSelector).slick('unslick');
            $(carouselViewSelector).empty();
        }
    };

    /**
     * Method updating carousel content to be compliant with ADA.
     * 
     * @param carouselViewSelector - selector of the carousel container
     * @param componentTitle - string with the title of the component where carousel is added
     */
    this.updateADAFunctionality = (carouselViewSelector = '', componentTitle = 'false') => {

        const slickDotsWrapper = $(carouselViewSelector).find('.slick-dots');
        const slickDots = slickDotsWrapper.find('li');

        // README: Update dot pagination items
        $.each(slickDots, (index, value) => {

            const button = $(value).find('button');

            // README: Remove tabIndex value set by plugin
            button.removeAttr('tabindex');

            // README: Update aria-label value
            button.attr(
                'aria-label',
                `Page ${index + 1} of ${slickDots.length}${componentTitle && componentTitle !== 'false' ? ` ${componentTitle}` : ''}`
            );

            // README: Update aria-current value for active button
            if ($(value).hasClass('slick-active')) {
                button.attr('aria-current', 'page');

            // README: Update aria-current values for inactive buttons
            } else {
                button.attr('aria-current', 'false');
            }
        });
    };

}).call(AB.SHOPBYCATEGORY.Carousel);

/* jshint esnext: true */

const sbcCarouselConstants = {
    imageUrl: 'https://images.albertsons-media.com/is/image/ABS',
    imagePNGParam: '$ecom-aisles-tile-png-alpha$',
    defaultTileType: 'department'
};

(function() {

    /**
     * Method setting the fallback content, in case a category image is invalid.
     * This is used for all Shop-By-Category components.
     * 
     * @param element - DOM element of the image
     * @param defaultWord - string that needs to be displayed for the default view
     * @param datasetKey - data-* attribute key for default word. This is required when calling from AEM component.
     */
    this.setSBCDefaultImageView = function(element, defaultWord = '', datasetKey = '') {

        // README: Get default word from AEM call
        if (!defaultWord) {
            defaultWord = element.dataset[datasetKey];
        }

        let acronym = '';

        // README: Get name initials
        if (defaultWord) {
            const matches = defaultWord.match(/\b(\w)/g);
            acronym = matches.join('');
        }

        const parentNode = $(element).closest('.categories-item__image-container');

        if (parentNode) {

            // README: Remove image wrapper element from the DOM
            $(element).closest('.categories-item__image-wrapper').remove();

            // README: Create default image view
            const defaultImageView = document.createElement('div');
            defaultImageView.classList.add('category-image__default');
            defaultImageView.innerHTML = acronym || '';
            defaultImageView.ariaHidden = 'true';

            // README: Draw the default image view
            parentNode.append(defaultImageView);
        }
    };

    /**
     * Category entity model.
     * Formats an aisle entry into a category entry.
     * 
     * @param aisleData  - object with aisle data
     * @param isAisleCategory - flag used for validating prop values according to location of the category
     * @param aisleLevel - aisle level indicator (eg. L1 / L2 / etc.)
     */
    this.SBCCategoryModel = function(aisleData = {}, isAisleCategory = false, aisleLevel = '') {

        this.aisleId = aisleData.id;
        this.aisleName = aisleData.name;
        this.aislePath = aisleData.pagePath;

        if (isAisleCategory) {
            this.fileReference = aisleData.imagePath;

        } else {
            this.fileReference = `${sbcCarouselConstants.imageUrl}/${aisleLevel}_${this.aisleId}?${sbcCarouselConstants.imagePNGParam}`;
            this.tileType = sbcCarouselConstants.defaultTileType;
        }
    };

}).call(AB.SHOPBYCATEGORY.Util);

!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var o in n)("object"==typeof exports?exports:e)[o]=n[o]}}(window,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=33)}({33:function(e,t,n){var o=n(4);""===AB.checkCategoryTileL3View&&(AB.checkCategoryTileL3View=o.checkABTestCategoryTilesL3),""===AB.RightDrawerTest&&o.isABTestRightDrawer()},4:function(e,t){var n={isABTestEnabled:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=!1;if(""===AB[t])try{if(n.isLSCompatible()){var r=localStorage.getItem("EOT_".concat(e));AB[t]=r?r==="EOT-".concat(e,"_").concat(o,"_New"):a}else window.analyticsSwy&&window.analyticsSwy.testFlags&&window.analyticsSwy.testFlags["EOT_".concat(e)]?AB[t]=window.analyticsSwy.testFlags["EOT_".concat(e)]==="EOT-".concat(e,"_").concat(o,"_New"):AB[t]=a}catch(e){AB[t]=a}return AB[t]},getABtestGroup:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(""===AB[t])if(n.isLSCompatible()){var o=localStorage.getItem("EOT_".concat(e));o&&(AB[t]=o)}else window.analyticsSwy&&window.analyticsSwy.testFlags&&window.analyticsSwy.testFlags["EOT_".concat(e)]&&(AB[t]=window.analyticsSwy.testFlags["EOT_".concat(e)]);return AB[t]},isABTestRightDrawer:function(){""===n.getABtestGroup("1048","RightDrawerTest")&&(AB.RightDrawerTest="control")},checkABTestCategoryTilesL3:function(){var e={default:"EOT-".concat("1038","_control"),circle:"EOT-".concat("1038","_show_images"),rectangle:"EOT-".concat("1038","_show_texttiles")},t={default:"defaultView",circle:"circleView",rectangle:"rectangleView"},o=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";switch(!0){case n===e.circle:return t.circle;case n===e.rectangle:return t.rectangle;case n===e.default:default:return t.default}};if(""===AB.categoryTileL3Test)try{if(window.analyticsSwy&&window.analyticsSwy.testFlags&&window.analyticsSwy.testFlags["EOT_".concat("1038")])AB.categoryTileL3Test=o(window.analyticsSwy.testFlags["EOT_".concat("1038")]);else if(n.isLSCompatible()){var a=localStorage.getItem("EOT_".concat("1038"));AB.categoryTileL3Test=a?o(a):t.default}else AB.categoryTileL3Test=t.default}catch(e){AB.categoryTileL3Test=t.default}return AB.categoryTileL3Test},isLSCompatible:function(){return SWY.CONFIGSERVICE.isLSCompatible()}};e.exports=n}})}));
//# sourceMappingURL=unifiedOnload.js.map
