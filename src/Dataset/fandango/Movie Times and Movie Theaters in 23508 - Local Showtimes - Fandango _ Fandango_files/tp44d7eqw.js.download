



/* ControlTag Loader for Reebok US 62a76ca9-f9b4-4b65-bfd6-92ae3c5a60d3 */
(function(w, cs) {
  
  if (/Twitter for iPhone/.test(w.navigator.userAgent || '')) {
    return;
  }

  var debugging = /kxdebug/.test(w.location);
  var log = function() {
    
    debugging && w.console && w.console.log([].slice.call(arguments).join(' '));
  };

  var load = function(url, callback) {
    log('Loading script from:', url);
    var node = w.document.createElement('script');
    node.async = true;  
    node.src = url;

    
    node.onload = node.onreadystatechange = function () {
      var state = node.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        log('Script loaded from:', url);
        callback.done = true;  
        callback();
      }
    };

    
    var sibling = w.document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(node, sibling);
  };

  var config = {"app":{"name":"krux-scala-config-webservice","version":"3.41.5","schema_version":3},"confid":"tp44d7eqw","context_terms":[],"publisher":{"name":"Reebok US","active":true,"uuid":"62a76ca9-f9b4-4b65-bfd6-92ae3c5a60d3","version_bucket":"stable","id":3925},"params":{"first_party_dmp_managed":true,"link_header_bidder":false,"site_level_supertag_config":"site","recommend":false,"control_tag_pixel_throttle":100,"fingerprint":false,"optout_button_optout_text":"Browser Opt Out","channel":"display","user_data_timing":"load","consent_active":true,"use_central_usermatch":true,"store_realtime_segments":false,"tag_source":false,"link_hb_start_event":"ready","optout_button_optin_text":"Browser Opt In","first_party_uid":true,"dcm_profile_ids":"5083715","link_hb_timeout":2000,"link_hb_adserver_subordinate":true,"optimize_realtime_segments":false,"link_hb_adserver":"dfp","client_type":"marketer","target_fingerprint":false,"context_terms":false,"optout_button_id":"kx-optout-button","dfp_premium":true,"control_tag_namespace":"reebokus"},"prioritized_segments":[],"realtime_segments":[],"services":{"userdata":"//cdn.krxd.net/userdata/get","contentConnector":"https://connector.krxd.net/content_connector","stats":"//apiservices.krxd.net/stats","optout":"//cdn.krxd.net/userdata/optout/status","event":"//beacon.krxd.net/event.gif","set_optout":"https://consumer.krxd.net/consumer/optout","data":"//beacon.krxd.net/data.gif","link_hb_stats":"//beacon.krxd.net/link_bidder_stats.gif","userData":"//cdn.krxd.net/userdata/get","link_hb_mas":"https://link.krxd.net/hb","config":"//cdn.krxd.net/controltag/{{ confid }}.js","social":"//beacon.krxd.net/social.gif","addSegment":"//cdn.krxd.net/userdata/add","pixel":"//beacon.krxd.net/pixel.gif","um":"https://usermatch.krxd.net/um/v2","controltag":"//cdn.krxd.net/ctjs/controltag.js.{hash}","loopback":"https://consumer.krxd.net/consumer/tmp_cookie","remove":"https://consumer.krxd.net/consumer/remove/62a76ca9-f9b4-4b65-bfd6-92ae3c5a60d3","click":"https://apiservices.krxd.net/click_tracker/track","stats_export":"//beacon.krxd.net/controltag_stats.gif","userdataApi":"//cdn.krxd.net/userdata/v1/segments/get","cookie":"//beacon.krxd.net/cookie2json","proxy":"//cdn.krxd.net/partnerjs/xdi","consent_get":"https://consumer.krxd.net/consent/get/62a76ca9-f9b4-4b65-bfd6-92ae3c5a60d3","consent_set":"https://consumer.krxd.net/consent/set/62a76ca9-f9b4-4b65-bfd6-92ae3c5a60d3","is_optout":"https://beacon.krxd.net/optout_check","impression":"//beacon.krxd.net/ad_impression.gif","transaction":"//beacon.krxd.net/transaction.gif","log":"//jslog.krxd.net/jslog.gif","portability":"https://consumer.krxd.net/consumer/portability/62a76ca9-f9b4-4b65-bfd6-92ae3c5a60d3","set_optin":"https://consumer.krxd.net/consumer/optin","usermatch":"//beacon.krxd.net/usermatch.gif"},"experiments":[],"site":{"name":"Reebok  US Display","cap":2,"id":1671204,"organization_id":3925,"uid":"tp44d7eqw"},"tags":[{"id":38030,"name":"Reebok US Standard DTC","content":"<script>\n(function(){\n\tKrux('scrape',{'page_attr_url_path_1':{'url_path':'1'}});\n\tKrux('scrape',{'page_attr_url_path_2':{'url_path':'2'}});\n\tKrux('scrape',{'page_attr_url_path_3':{'url_path':'3'}});\n\tKrux('scrape',{'page_attr_meta_keywords':{meta_name:'keywords'}});\n\n\tKrux('scrape',{'page_attr_domain':{url_domain: '2'}});\n\n})();\n</script>","target":null,"target_action":"append","timing":"onready","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":[],"collects_data":true},{"id":38306,"name":"Reebok US Omniture ID","content":"<script>\n(function(){\n\n    var id = Krux('scrape.js_global', 's.marketingCloudVisitorID');\n\n    // We should not proceed if we collect a bad value e.g. non-string, undefined\n    if (typeof id !== 'string' && typeof id !== 'number') return;\n\n    // Validation to ensure that the ID is not an email\n    if (!/^.+@./.test(id)) Krux('set', 'user_attr_omniture_id', id);\n\n})();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":[],"collects_data":true},{"id":38307,"name":"Reebok US URL Params","content":"<script>\n(function() {\n    var urlParams = Krux('require:util').urlParams();\n\n    var i, toCollect = ['cm_mmc', 'cm_mmc1', 'cm_mmc2', 'cm_mmca1', 'cm_mmca2', 'gclsrc'];\n\n    for (i = 0; i < toCollect.length; i++) {\n        if (urlParams[toCollect[i]]) {\n            Krux('set', 'page_attr_' + toCollect[i], urlParams[toCollect[i]]);\n        }\n    }\n})();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":[],"collects_data":true},{"id":38308,"name":"Data Layer Blacklist (krux_data)","content":"<script>\n(function() {\n    var attr, config, custDelimit, dataObj, libUtil, omitKeys, prefix, userKeys;\n    libUtil = Krux('require:util.library-tag');\n    dataObj = Krux('scrape.javascript', 'krux_data');\n    userKeys = 'user';\n    omitKeys = 'false';\n    custDelimit = 'undefined';\n    prefix = libUtil.resolvePrefix('undefined', 'undefined',\n        'undefined');\n    config = {\n        'userKeys': userKeys ? userKeys.split(',') : void 0,\n        'omitKeys': (omitKeys ? omitKeys.split(',') : []).concat([/gtm\\./,\n            /sessionid/i, /\\.phpsessid$/i, /\\.sid$/i, /\\.zenid$/i,\n            /\\.requestid$/i\n        ]),\n        'omitValues': [/.*@.*(?:\\..*)+/, /gtm\\./, /^(https?:)?\\/\\/[^\\/]+/,\n            /^\\/[^\\/]+/, /.{255}/\n        ],\n        'customDelimited': custDelimit ? custDelimit.split(',') : void 0,\n        'caseSensitive': 'undefined' === 'true',\n        'useFullPath': 'false' === 'true',\n        'useLastValue': 'false' === 'true',\n        'optimizeNames': 'false' === 'true',\n        'convertAttrNames': []\n    };\n    if (prefix) {\n        config.convertAttrNames.push({\n            pattern: /((?:page|user)_attr_)/,\n            replacement: '$1' + prefix\n        });\n    }\n    attr = Krux('ingestDataLayer', dataObj, config);\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":[],"collects_data":true},{"id":38330,"name":"Transaction DTC","content":"<script>\n(function() {\n    function fire_pixel(transactionParams) {\n        Krux('require:http').pixel({\n            url: '//beacon.krxd.net/transaction.gif',\n            data: transactionParams\n        });\n    }\n\n    function date_from_string(date_string) {\n        if (!Date.parse(date_string)) return;\n        var date_obj = new Date(date_string),\n            year = date_obj.getFullYear() + '-',\n            day = date_obj.getDate(),\n            month = date_obj.getMonth() + 1;\n\n        month = (month < 9) ? '0' + month + '-' : month + '-';\n        day = (day < 9) ? '0' + day : day;\n\n        var date = year + month + day;\n        return date;\n    }\n    function krux_to_string(idx) {\n        var tmp = Krux('scrape.js_global', idx) || [];\n        if (typeof(tmp) === 'string') {\n            return tmp;\n        } else {\n            return tmp.join();\n        }\n    }\n\n    var transInfo = {};\n\n    var pickupParams = ['customer_city', 'customer_country', 'customer_payment_type', 'customer_shipping_method',\n        'is_customizable', 'order_gift_card_amount', 'order_level_discount', 'order_pre_discount_amount', /* 'order_subtotal',*/\n        'product_brand', 'product_category', 'product_collection', 'product_color', 'product_gender', 'product_group',\n        'product_line_style', 'product_model_id', 'product_name', 'product_personalization',\n        'product_price_type', 'product_purchase_type', 'product_quantity', 'product_rating', 'product_reviews',\n        'product_size', 'product_sku', 'product_sport', 'product_status', 'product_type', 'product_video', 'signup_step'\n    ];\n    var priceParams = [\n        ['product_price', 'page.product.price'],\n        ['order_subtotal', 'user.order_subtotal'],\n        ['order_total', 'user.order_total'],\n        ['shipping_total', 'user.shipping_total']\n    ];\n\n    transInfo.price = Krux('scrape.js_global', 'utag.data.order_subtotal');\n    transInfo.quantity = Krux('scrape.js_global', 'utag.data.total_products');\n    transInfo.date = date_from_string(Krux('scrape.js_global', 'utag.data.order_time'));\n    transInfo.site_name = Krux('scrape.js_global', 'utag.data.site_name') || 'none';\n    for (i = 0; i < pickupParams.length; i++) {\n        transInfo[pickupParams[i]] = krux_to_string('utag.data.' + pickupParams[i]);\n    }\n    for (i = 0; i < priceParams.length; i++) {\n        transInfo[priceParams[i][0]] = krux_to_string('krux_data.' + priceParams[i][1]);\n    }\n    var order_id = Krux('scrape.js_global', 'krux_data.user.order_id');\n\n    transInfo._kpid = Krux('get', 'pubid');\n\n    if (transInfo.price && transInfo.quantity && transInfo.date && order_id) {\n        fire_pixel(transInfo);\n    }\n\n})();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["and",["contains","$url","confirmation?orderId="]]]],"collects_data":true},{"id":38332,"name":"Data Layer Whitelist (krux_data for name_","content":"<script>\n(function() {\n    /* Selective Attribute DataLayer Library Tag */\n    var _, allAttr, allowedList, attr, attributes, dataLayerIngester, dataObj,\n        isAllowed, keepCase, libUtil, omitKeys, pageAttr, prefix, toSet, trim,\n        userAttr, util, value,\n        hasProp = {}.hasOwnProperty;\n    _ = Krux('require:underscore');\n    util = Krux('require:util');\n    libUtil = Krux('require:util.library-tag');\n    dataLayerIngester = Krux('require:scrape').ingestDataLayer;\n\n    /* Safe copy of dataLayer object */\n    dataObj = Krux('scrape.javascript', 'krux_data');\n\n    /* String trimming helper function */\n    trim = function(attr) {\n        return (\"\" + attr).replace(/^\\s+|\\s+$/g, '');\n    };\n\n    /* Attribute configs */\n    pageAttr = _.map('name'.split(','), trim);\n    userAttr = _.map('undefined'.split(','), trim);\n\n    /* Create a array of attributes striping any empty strings */\n    allAttr = _.without(pageAttr.concat(userAttr), '');\n\n    /* Configuration settings */\n    keepCase = 'false' === 'true';\n    omitKeys = 'undefined'.split(',');\n\n    /* Resolve Prefix */\n    prefix = libUtil.resolvePrefix('undefined', 'undefined',\n        'undefined');\n\n    /* Function to varify if attribute should be used */\n    isAllowed = function(value, whitelist) {\n        var i, len, str, x;\n        str = \"\" + value;\n        if (!((value != null) && str.length > 0)) {\n            return false;\n        }\n        for (i = 0, len = whitelist.length; i < len; i++) {\n            x = whitelist[i];\n            if (value.match(x) != null) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    /* Get a full list of attributes usting the dataLayer tool */\n    attributes = dataLayerIngester(dataObj, {\n        omitKeys: libUtil.removeFalsyStrings(omitKeys.concat(libUtil.EXCLUDE_KEYS_CONFIG)),\n        omitValues: libUtil.EXCLUDE_VALUES_CONFIG,\n        caseSensitive: keepCase,\n        useFullPath: 'true' === 'true',\n        useLastValue: 'undefined' === 'true',\n        customDelimited: [/./],\n        altDelimiter: ',',\n        userKeys: _.map(userAttr, function(exp) {\n            return new RegExp(\"(^|\\\\.)\" + exp + \"$\");\n        }),\n        optimizeNames: true\n    });\n\n    /* Only set Attributes in the allowed list */\n    allowedList = _.map(allAttr, function(name) {\n        return new RegExp(\"(_attr_|_attr_\" + prefix + \"|\\\\.)\" + (keepCase ?\n            name : libUtil.normalizeAttrName(name, {\n                removeDot: false\n            })) + \"$\");\n    });\n    toSet = {};\n    for (attr in attributes) {\n        if (!hasProp.call(attributes, attr)) continue;\n        value = attributes[attr];\n        if (isAllowed(attr, allowedList)) {\n            toSet[attr] = value;\n        }\n    }\n    toSet = Krux('prefix:attr', toSet, prefix);\n    Krux('set', toSet);\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":[],"collects_data":true},{"id":38698,"name":"UTM Media Tracker - Social","content":"<script>\n(function() {\n    var clickURL = Krux('get', 'url_click'),\n        _ = Krux('require:underscore'),\n        libUtil = Krux('require:util.library-tag'),\n        pixelParam, store, sent,\n        confid, campaignid, siteid;\n\n    // Function to retrieve capping info from sessionStorage\n    function get(key) {\n        try {\n            return JSON.parse(sessionStorage.getItem(key) || '[]');\n        } catch (e) {\n            return [];\n        }\n    }\n\n    // Function to add capping info to sessionStorage\n    function set(key, value) {\n        try {\n            sessionStorage.setItem(key, JSON.stringify(value));\n        } catch (e) {}\n    }\n\n    // Function to check if tag is valid by comparing aginst capping info\n    function configValidate(config) {\n        var allowedSource = libUtil.removeFalsyStrings('undefined'.toLowerCase()),\n            i = 0;\n        for (; i < store.length; i++) {\n            if (_.isEqual(store[i], config)) return false;\n        }\n        // Cater for client not using allowedSource\n        if (!allowedSource.length) allowedSource.push(config.kxsiteid.toLowerCase());\n        // Invalid if source is not in the allowed list\n        if (_.indexOf(allowedSource, config.kxsiteid.toLowerCase()) < 0) return false;\n        return true;\n    }\n\n    // Function to collect and normalize values\n    function getParameter(method, path) {\n        var value;\n\n        if (!(method && path)) return;\n\n        switch (method) {\n            case 'none':\n                break;\n            case 'text':\n                value = path;\n                break;\n            case 'get':\n                value = Krux('get', path);\n                break;\n            default:\n                value = Krux('scrape.' + method, path);\n        }\n\n        if (value && !_.isArray(value)) return value\n            .replace(/[^a-zA-Z0-9_-]+/g, '_')\n            .replace(/_+/g, '_')\n            .replace(/^_/, '')\n            .replace(/_$/, '');\n        // Use null if no result as it is included in JSON.stringify\n        return null;\n    }\n\n    // Scrape Media Attributes\n    confid = getParameter('text', 'tk95yrase');\n    campaignid = getParameter('javascript', 'krux_data.page.utm_campaign');\n    siteid = getParameter('javascript', 'krux_data.page.utm_source');\n\n    // Ensure minimum requirements are met\n    if (confid && campaignid && siteid) {\n        // Use omit to remove undefined values to match validation object\n        pixelParam = _.omit({\n            'kxconfid': confid,\n            'kxcampaignid': campaignid,\n            'kxsiteid': siteid,\n            'kxadvertiserid': getParameter('none', 'undefined'),\n            'kxplacementid': getParameter('javascript', 'krux_data.page.utm_content'),\n            'kxadid': getParameter('javascript', 'krux_data.page.utm_term'),\n            'kxcreativeid': getParameter('none', 'undefined'),\n            'kxbrand': getParameter('none', 'undefined'),\n            'clk': 'https://beacon.krxd.net/click_landing.gif'\n        }, function(value) {\n            return !value\n        });\n\n        // Retrieve capping info\n        store = get('k_utm_store');\n\n        if (configValidate(pixelParam)) {\n            // Update capping info to prevent re-fires\n            store.push(pixelParam);\n            set('k_utm_store', store);\n            sent = Krux('require:http').pixel({\n                url: clickURL,\n                data: pixelParam\n            });\n        }\n    }\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["and",["contains","$url","ReebokPaidSocial"]]]],"collects_data":true},{"id":38699,"name":"UTM Media Tracker - Search","content":"<script>\n(function() {\n    var clickURL = Krux('get', 'url_click'),\n        _ = Krux('require:underscore'),\n        libUtil = Krux('require:util.library-tag'),\n        pixelParam, store, sent,\n        confid, campaignid, siteid;\n\n    // Function to retrieve capping info from sessionStorage\n    function get(key) {\n        try {\n            return JSON.parse(sessionStorage.getItem(key) || '[]');\n        } catch (e) {\n            return [];\n        }\n    }\n\n    // Function to add capping info to sessionStorage\n    function set(key, value) {\n        try {\n            sessionStorage.setItem(key, JSON.stringify(value));\n        } catch (e) {}\n    }\n\n    // Function to check if tag is valid by comparing aginst capping info\n    function configValidate(config) {\n        var allowedSource = libUtil.removeFalsyStrings('undefined'.toLowerCase()),\n            i = 0;\n        for (; i < store.length; i++) {\n            if (_.isEqual(store[i], config)) return false;\n        }\n        // Cater for client not using allowedSource\n        if (!allowedSource.length) allowedSource.push(config.kxsiteid.toLowerCase());\n        // Invalid if source is not in the allowed list\n        if (_.indexOf(allowedSource, config.kxsiteid.toLowerCase()) < 0) return false;\n        return true;\n    }\n\n    // Function to collect and normalize values\n    function getParameter(method, path) {\n        var value;\n\n        if (!(method && path)) return;\n\n        switch (method) {\n            case 'none':\n                break;\n            case 'text':\n                value = path;\n                break;\n            case 'get':\n                value = Krux('get', path);\n                break;\n            default:\n                value = Krux('scrape.' + method, path);\n        }\n\n        if (value && !_.isArray(value)) return value\n            .replace(/[^a-zA-Z0-9_-]+/g, '_')\n            .replace(/_+/g, '_')\n            .replace(/^_/, '')\n            .replace(/_$/, '');\n        // Use null if no result as it is included in JSON.stringify\n        return null;\n    }\n\n    // Scrape Media Attributes\n    confid = getParameter('text', 'tk95x1rrc');\n    campaignid = getParameter('javascript', 'krux_data.page.utm_campaign');\n    siteid = getParameter('javascript', 'krux_data.page.utm_source');\n\n    // Ensure minimum requirements are met\n    if (confid && campaignid && siteid) {\n        // Use omit to remove undefined values to match validation object\n        pixelParam = _.omit({\n            'kxconfid': confid,\n            'kxcampaignid': campaignid,\n            'kxsiteid': siteid,\n            'kxadvertiserid': getParameter('none', 'undefined'),\n            'kxplacementid': getParameter('javascript', 'krux_data.page.utm_content'),\n            'kxadid': getParameter('javascript', 'krux_data.page.utm_term'),\n            'kxcreativeid': getParameter('none', 'undefined'),\n            'kxbrand': getParameter('none', 'undefined'),\n            'clk': 'https://beacon.krxd.net/click_landing.gif'\n        }, function(value) {\n            return !value\n        });\n\n        // Retrieve capping info\n        store = get('k_utm_store');\n\n        if (configValidate(pixelParam)) {\n            // Update capping info to prevent re-fires\n            store.push(pixelParam);\n            set('k_utm_store', store);\n            sent = Krux('require:http').pixel({\n                url: clickURL,\n                data: pixelParam\n            });\n        }\n    }\n}).call();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":null,"template_replacement":true,"internal":true,"criteria":["and",["and",["and",["contains","$url","RbkSEM"]]]],"collects_data":true}],"usermatch_tags":[{"id":6,"name":"Google User Match","content":"<script>\n(function() {\n  if (Krux('get', 'user') != null) {\n      new Image().src = 'https://usermatch.krxd.net/um/v2?partner=google';\n  }\n})();\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":1,"template_replacement":false,"internal":true,"criteria":[],"collects_data":true},{"id":33,"name":"Criteo Usermatch","content":"<script>\r\n(function(){\r\nvar kuid = Krux('get', 'user');\r\nif (kuid) {\r\nvar p = location.protocol == 'https:' ? 'https:' : 'http:';\r\nvar purl = '//gum.criteo.com/sync?c=83&r=1&a=1&u=';\r\nvar kurl = '//beacon.krxd.net/usermatch.gif?partner=criteo&partner_uid=@USERID@';\r\n(new Image()).src  = p + purl + p + encodeURIComponent(kurl); \r\n}\r\n})();\r\n</script>","target":null,"target_action":"append","timing":"onload","method":"document","priority":1,"template_replacement":false,"internal":true,"criteria":[],"collects_data":true}],"link":{"adslots":{},"bidders":{}}};
  
  for (var i = 0, tags = config.tags, len = tags.length, tag; (tag = tags[i]); ++i) {
    if (String(tag.id) in cs) {
      tag.content = cs[tag.id];
    }
  }

  
  var esiGeo = String(function(){/*
   <esi:include src="/geoip_esi"/>
  */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

  if (esiGeo) {
    log('Got a request for:', esiGeo, 'adding geo to config.');
    try {
      config.geo = w.JSON.parse(esiGeo);
    } catch (__) {
      
      log('Unable to parse geo from:', config.geo);
      config.geo = {};
    }
  }



  var proxy = (window.Krux && window.Krux.q && window.Krux.q[0] && window.Krux.q[0][0] === 'proxy');

  if (!proxy || true) {
    

  load('//cdn.krxd.net/ctjs/controltag.js.cee73ba6ab74e5caa8092ae34993bbaa', function() {
    log('Loaded stable controltag resource');
    Krux('config', config);
  });

  }

})(window, (function() {
  var obj = {};
  
  return obj;
})());
