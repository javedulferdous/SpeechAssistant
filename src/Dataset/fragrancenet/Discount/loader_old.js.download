
// loadJS library
loadjs=function(){var l=function(){},c={},f={},u={};function s(e,n){if(e){var t=u[e];if(f[e]=n,t)for(;t.length;)t[0](e,n),t.splice(0,1)}}function o(e,n){e.call&&(e={success:e}),n.length?(e.error||l)(n):(e.success||l)(e)}function h(t,r,i,c){var s,o,e=document,n=i.async,f=(i.numRetries||0)+1,u=i.before||l,a=t.replace(/^(css|img)!/,"");c=c||0,/(^css!|\.css$)/.test(t)?(s=!0,(o=e.createElement("link")).rel="stylesheet",o.href=a):/(^img!|\.(png|gif|jpg|svg)$)/.test(t)?(o=e.createElement("img")).src=a:((o=e.createElement("script")).src=t,o.async=void 0===n||n),!(o.onload=o.onerror=o.onbeforeload=function(e){var n=e.type[0];if(s&&"hideFocus"in o)try{o.sheet.cssText.length||(n="e")}catch(e){n="e"}if("e"==n&&(c+=1)<f)return h(t,r,i,c);r(t,n,e.defaultPrevented)})!==u(t,o)&&e.head.appendChild(o)}function t(e,n,t){var r,i;if(n&&n.trim&&(r=n),i=(r?t:n)||{},r){if(r in c)throw"LoadJS";c[r]=!0}!function(e,r,n){var t,i,c=(e=e.push?e:[e]).length,s=c,o=[];for(t=function(e,n,t){if("e"==n&&o.push(e),"b"==n){if(!t)return;o.push(e)}--c||r(o)},i=0;i<s;i++)h(e[i],t,n)}(e,function(e){o(i,e),s(r,e)},i)}return t.ready=function(e,n){return function(e,t){e=e.push?e:[e];var n,r,i,c=[],s=e.length,o=s;for(n=function(e,n){n.length&&c.push(e),--o||t(c)};s--;)r=e[s],(i=f[r])?n(r,i):(u[r]=u[r]||[]).push(n)}(e,function(e){o(n,e)}),t},t.done=function(e){s(e,[])},t.reset=function(){c={},f={},u={}},t.isDefined=function(e){return e in c},t}();
var j$$ = document.getElementById.bind(document), j$ = document.querySelector.bind(document);
// make query selector iterable with foreach
if (window.NodeList && !NodeList.prototype.forEach) {
    if (!Array.prototype.forEach) {
      Array.prototype.forEach = function(fn, scope) {
          for(var i = 0, len = this.length; i < len; ++i) {
              fn.call(scope, this[i], i, this);
          }
      };
    }
    NodeList.prototype.forEach = Array.prototype.forEach;
}

MutationObserver = window.MutationObserver || window.WebKitMutationObserver;

// Initialize variables
var jsLoaded = false, pixelsLoaded = false, scriptInfo = {
  default: [],
  criteo: []
};

// define a new observer
var obs = new MutationObserver(function(mutations, observer) {
    // look through all mutations that just occured
    for(var i=0; i<mutations.length; ++i) {
        // look through all added nodes of this mutation
        for(var j=0; j<mutations[i].addedNodes.length; ++j) {
            if (mutations[i].addedNodes[j].nodeName.toLowerCase() === 'fnetscript'){
              var src =  mutations[i].addedNodes[j].src;
              if (src)  mutations[i].addedNodes[j].setAttribute("data-src", src);
              scriptInfo['default'].push({
                element: mutations[i].addedNodes[j],
                order: mutations[i].addedNodes[j].order,
                pixel: mutations[i].addedNodes[j].pixel || 1,
              });
            }
        }
    }
});

// have the observer observe the document for changes in children
obs.observe(document.querySelector('html'), {
  childList: true,
  subtree: true
});

// intercept all scripts created by JS and mark
// so they can be identifed in the mutation observer
var originalCreateElement = document.createElement;
document.createElement = function (tag) {
  if (tag === 'script') tag = 'fnetscript';

  return originalCreateElement.call(document, tag);
};

// DOM's ready, let's load scripts
document.addEventListener("DOMContentLoaded", function(){

  // fetch all scripts and analyze
  var scripts = document.getElementsByTagName('script');
  for (var i = 0; i < scripts.length; ++i){
    var attrs = attributeHash(scripts[i]);
    if (attrs['data-src'] || attrs['data-inline']){

      var depChain = attrs['data-dep'] || 'default';
      if (!scriptInfo[depChain])  scriptInfo[depChain] = [];
      scriptInfo[depChain].push({
        element: scripts[i],
        order: attrs['data-order'] || i,
        pixel: ('data-pixel' in attrs),
        contents: attrs['data-inline'] ? scripts[i].innerHTML : undefined,
        how: attrs['data-inline']
      });
    }
  }

  // sort scripts
  scriptInfo['default'] = scriptInfo['default'].sort(scriptSort);
  scriptInfo['criteo'] = scriptInfo['criteo'].sort(scriptSort);

  // reset create element back to normal so that
  // loadjs can properly write scripts to dom
  document.createElement = originalCreateElement

  /*
     let's fetch some scripts! \o/
  */

  // loaded in parallel but executed in series
  var fnetJSScripts = extractSources(scriptInfo['default'].filter(function(v,i,self){
    return !v.pixel && !v.contents
  }));

  loadjs(
    fnetJSScripts,
    'jsLoaded',
    { async: false }
  );

  loadjs.ready('jsLoaded', {
    success: fnetJSLoadedSuccess
  });

  // Manually dispatch fnet-js-loaded event if there were no scripts to load
  if (!fnetJSScripts.length) fnetJSLoadedSuccess()
});

window.onload=(function(oldLoad){
  return function(){
    oldLoad && oldLoad();
    loadPixels();
  }
})(window.onload);

function loadPixels(){

  // append any content
  handleInline(scriptInfo['default'].filter(function(v,i,self){
    return v.contents
  }));

  loadjs(
    extractSources(scriptInfo['criteo'].filter(function(value, index, self){
      return !value.contents
    })),
    'criteoLoaded',
    { async: true }
  );

  loadjs.ready('criteoLoaded', {
    success: function(){
      handleInline(scriptInfo['criteo'].filter(function(value, index, self){
        return !!value.contents
      }));
    }
  });


  loadjs(
    extractSources(scriptInfo['default'].filter(function(v,i,self){
      return v.pixel && !v.contents
    })),
    'pixelsLoaded',
    { async: true }
  );

  loadjs.ready('pixelsLoaded', {
    success: function(){
      pixelsLoaded = true;
    }
  });
}

function handleInline(scriptList){
  for (var i = 0; i < scriptList.length; ++i){
    if (scriptList[i].how === 'eval'){
      try {
        eval(scriptList[i].contents)
      } catch (ex) {}
    }
    else if (scriptList[i].how === 'append'){
      // insert element directly after element
      // some things can be a little annoying without jquery. sighhhh
      scriptList[i].element.parentNode.insertBefore(createElementFromHTML(scriptList[i].contents), scriptList[i].element.nextSibling);
    }
  }
}

// create a document fragment from an html string
// oh how i miss sizzle
function createElementFromHTML(htmlString) {
  var div = document.createElement('div');
  div.innerHTML = htmlString.trim();
  // Change this to div.childNodes to support multiple top-level nodes
  return div.firstChild;
}

// Extract URLs from scriptInfo objects
function extractSources(scriptList){
  var list = [];
  for (var i in scriptList){
    var t = attributeHash(scriptList[i].element);
    if (t['data-src']) list.push(t['data-src'])
  }
  return list.filter(unique);
}


// Builds a hash of all element attributes
function attributeHash(element){
  if (!element.hasAttributes()) return {};

  var attrs = element.attributes, dict = {};
  for(var i = attrs.length - 1; i >= 0; i--) {
    dict[attrs[i].name] = attrs[i].value;
  }
  return dict;
}

function unique(value, index, self) {
  return self.indexOf(value) === index;
}

function scriptSort(a,b){
  var a_order = a.order || 99, b_order = b.order || 99;
  if (a_order < b_order)  return -1;
  if (a_order > b.order)  return 1;

  return -1;
}

function getLocal(key){
    try {
        var obj = JSON.parse(window.localStorage.getItem(key));
        if (obj.expires){
            var elapsedTime = Date.now() - obj.timestamp;
            if (elapsedTime > (obj.expires * 1000)) {
                return undefined;
            }
        }
        return obj.data;
    } catch (ex) {}
}

function fnetJSLoadedSuccess() {
  jsLoaded = true;
  document.body.className += ' js-loaded';
  $(document).trigger($.Event('fnet-js-loaded', { chainName: 'loader-old' }));
}
