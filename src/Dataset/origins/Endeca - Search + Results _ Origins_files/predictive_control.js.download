/*
  Endeca control class for the typeahead endeca instance.
*/
var site = site || {};
site.endeca = site.endeca || {};
site.endeca.instances = site.endeca.instances || {};
site.endeca.instances.typeahead = site.endeca.instances.typeahead || {};
var prodcat = prodcat || {};

(function($) {
  site.endeca.instances.typeahead.control = site.endeca.generic.Class.create(site.endeca.control, {
    initialize: function(args) {
      this.timer = 0;
      this._super(args);

      if (this.nodes.wrapper.length && this.nodes.inputElements.length) {
        var that = this;
        this.nodes.inputElements.bind('keyup', that, that.onKeyUp);
        this._watchToClose();
      }

      if (Drupal.settings.common.search_feature_revamp) {
        $('body').addClass('enable-endeca__search');
      }

      $(document).trigger('endeca.typeahead.init');
    },

    onKeyUp: function(event) {
      var $this = jQuery(this);
      var isHeader = $this.hasClass('search-term--header');
      var that = event.data;
      clearTimeout(that.timer);
      that.timer = setTimeout(function() {
        that.currentInputElement = $this;
        var searchTerm = jQuery.trim($this.val())/* + "*"*/;
        if (searchTerm !== that.searchTerm && searchTerm.length >= that.configuration.minSearchLength) {
          that.searchTerm = searchTerm;
          that.search({
            searchTerm: searchTerm
          });
        }

        $(document).trigger('endeca.typeahead.keyup', [searchTerm, isHeader]);
      }, 175);
    },

    _watchToClose: function() {
      var that = this;
      jQuery(document).bind('click', that, function(event) {
        var tgt = event.target;
        var that = event.data;

        if (!jQuery(tgt).parents(that.nodes.wrapper.selector).length &&
                tgt !== that.currentInputElement &&
                tgt !== that.nodes.wrapper[0]) {
          that.nodes.wrapper.addClass('hidden');
          return;
        }

        $(document).trigger('endeca.typeahead.close');
      });
    },

    searchCompleted: function() {
      if (!this._super()) {
        return;
      }
      this.hasResults = false;

      if (this.queries.product.jsonResult.AggrRecords && this.queries.product.jsonResult.AggrRecords.length) {
        var termResultDataRef = {};
        var termResultData = [];

        for (var i = 0; i < this.queries.product.jsonResult.AggrRecords.length; i++) {
          if (this.queries.product.jsonResult.AggrRecords[i].Properties['DGraph.WhyDidItMatch']) {
            var matches;

            if (typeof this.queries.product.jsonResult.AggrRecords[i].Properties['DGraph.WhyDidItMatch'] == 'string') {
              matches = [ this.queries.product.jsonResult.AggrRecords[i].Properties['DGraph.WhyDidItMatch'] ];
            } else {
              matches = this.queries.product.jsonResult.AggrRecords[i].Properties['DGraph.WhyDidItMatch'];
            }

            for (var j = 0; j < matches.length; j++) {
              if (matches[j] && matches[j].match(/Product Category: (.*)/)) {
                if (!RegExp.$1.match(/^CAT/)) {
                  if (termResultDataRef[ RegExp.$1 ]) {
                    termResultDataRef[ RegExp.$1 ]++;
                  } else {
                    termResultDataRef[ RegExp.$1 ] = 1;
                    termResultData.push({
                      'term': RegExp.$1,
                      'url': this.configuration.fullSearchBaseUrl + encodeURIComponent(RegExp.$1)
                    });
                  }
                }
              }
            }
          }
        }

        if (this.results.terms.configuration.limit && termResultData.length > this.results.terms.configuration.limit) {
          termResultData.splice(this.results.terms.configuration.limit);
        }

        termResultData.sort(function(a, b) {
          if (termResultDataRef[a] > termResultDataRef[b]) {
            return -1;
          } else if (termResultDataRef[a] < termResultDataRef[b]) {
            return 1;
          }
          return 0;
        });

        this.results.terms.resultData = termResultData;
        this.results.terms.displayResults();
        this.results.terms.displayResultNodes();
        this.results.terms.show();
        this.hasResults = true;
      } else {
        this.results.terms.hide();
      }

      this.results.products.resultData = this.catalogs.product.resultList;

      if (this.results.products.resultData.length) {
        // this is to trim the list of images, in cases where a product has more than one, to just one image
        // (to deal with the front-end's brittle handling of lists, not being able to do PROP.0 to get the
        // first property)
        for (var i = 0; i < this.results.products.resultData.length; i += 1) {
          for (var prop in this.results.products.resultData[i]) {
            if (prop.indexOf('IMAGE_') === 0 && typeof this.results.products.resultData[i][prop] !== 'string') {
              this.results.products.resultData[i][prop] = this.results.products.resultData[i][prop][0];
            }
          }
        }

        this.results.products.displayResults();
        this.results.products.show();
        this.hasResults = true;
      } else {
        this.results.products.hide();
      }

      if (this.hasResults) {
        /* Add first search result */
        var searchTerm = this.searchTerm.replace('*', '');
        var showResults = rb.endeca['show_results'];
        showResults = showResults.replace('::term::', searchTerm);
        this.results.seeResults.resultData = [{
          // 'term': showResults + ' <span class="search-count">(' + this.meta.searchInfo.totalRecords + ')</span>',
          'term': showResults + ' (' + this.meta.searchInfo.totalRecords + ')',
          'url': this.configuration.fullSearchBaseUrl + searchTerm
        }];

        this.results.seeResults.displayResults();
        this.results.seeResults.displayResultNodes();
        this.results.seeResults.show();
        if (Drupal.settings.common.search_feature_revamp) {
          // Add the product data to the data store
          prodcat.data.updateProducts(this.results.products.resultData, false);
        }
      }
      $('.typeahead-search__see-all-results').addClass('hidden');
      $('.gnav-search__suggestions').addClass('hidden');
      if ($('ul.js-typeahead-search__see-all-results li').length >= 1) {
        $('.typeahead-search__see-all-results').removeClass('hidden');
        $('.gnav-search__suggestions').removeClass('hidden');
      }
      this.nodes.wrapper.removeClass('hidden');
      var me = this.nodes;
      this.nodes.wrapper.find('.result').bind('click', function(e) {
        var thisLink = this.getElementsByClassName('link');
        thisLink[0].click();
        //e.preventDefault();
        if (this.parentElement.parentNode.className === 'js-typeahead-search__term-results') {
          //    site.endeca.coremetrics.termClick();
        } else {
          site.endeca.coremetrics.productClick();
        }
        return true;
      });

      this.hideLoading();

      $(document).trigger('endeca.typeahead.complete', [ this.hasResults ]);

      this.displayResults();
    }
  });
})(jQuery);
