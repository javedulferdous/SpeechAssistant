(function($, prodcat, generic, site) {
prodcat.ui = prodcat.ui || {};
prodcat.data = prodcat.data || {};

/**
 * Adds SKUs to cart.
 * @param {Object} args arguments
 * @inheritdoc
 */
prodcat.ui.addToCart = function(args) {
  var skuBaseId;
  if (args.skuData && args.skuData.SKU_BASE_ID) {
    skuBaseId = args.skuData.SKU_BASE_ID;
  } else if (args.skuBaseId) {
    skuBaseId = args.skuBaseId;
  } else {
    return;
  }

  var quantity;
  if (typeof args.quantity !== 'undefined') {
    quantity = args.quantity;
  } else {
    quantity = 1;
  }

  var catBaseId = '';
  if (args.skuData && args.skuData.PARENT_CAT_ID) {
    var matchResult = args.skuData.PARENT_CAT_ID.match('[0-9]+');
    if (matchResult) {
      catBaseId = matchResult[0];
    }
  }

  args.skus = args.skus || (_.isString(skuBaseId) ? [skuBaseId] : skuBaseId);
  args.itemType = args.itemType || 'cart';
  args.QTY = quantity || args.QTY;
  args.INCREMENT = 1;
  // INCREMENT only needs to be true.

  // Conditionally add a CAT_BASE_ID key to the list of parameters to send
  var cbid = args.CAT_BASE_ID || catBaseId;
  if (cbid.length > 0) {
    args.CAT_BASE_ID = cbid;
  }

  generic.checkout.cart.updateCart({
    params: args,
    onSuccess: function(r) {
      var resultData = r.getData();
      $(document).trigger('addToCart.success', [resultData]);
    },
    onFailure: function(ss) {
      var errorObjectsArray = ss.getMessages();
      $(document).trigger('addToCart.failure', [errorObjectsArray]);
    }
  });
};

/**
 * Adds a SKU to the user's primary favorites list.
 * @param {Object} args arguments for a SKU (numerical only, i.e. no 'SKU' prefix)
 * @inheritdoc
 */
prodcat.ui.addToFavorites = function(args) {
  var params = {
    _SUBMIT: 'alter_collection',
    action: 'add'
  };

  if ($.cookie('csrftoken')) {
    params._TOKEN = $.cookie('csrftoken');
  }

  var skuBaseId;
  if (args.skuData && args.skuData.SKU_BASE_ID) {
    skuBaseId = args.skuData.SKU_BASE_ID;
  } else if (args.skuBaseId) {
    skuBaseId = args.skuBaseId;
  } else {
    return;
  }
  params.SKU_BASE_ID = skuBaseId;

  if (args.skuData && args.skuData.PARENT_CAT_ID) {
    var matchResult = args.skuData.PARENT_CAT_ID.match('[0-9]+');
    if (matchResult) {
      params.CAT_BASE_ID = matchResult[0];
    }
  }

  generic.jsonrpc.fetch({
    method: 'rpc.form',
    params: [params],
    onSuccess: function(jsonRpcResponse) {
      var d = jsonRpcResponse.getData();
      var r = d.ac_results[0].result;
      var cr;

      if (r.KEY === 'SKU_ALREADY_IN_COLLECTION.ADD_SKU.COLLECTION.SAVE') {
        cr = jsonRpcResponse.getCartResults();
        $(document).trigger('addToWishlist.exists', [cr, args.$el]);
      } else if (r.SUCCESS === 1 || r.KEY === 'SUCCESS.ADD_SKU.COLLECTION.SAVE') {
        cr = jsonRpcResponse.getCartResults();
        $(document).trigger('addToWishlist.success', [cr, args.$el]);
      }
    },
    onFailure: function(ss) {
      var errorObjectsArray = ss.getMessages();
      $(document).trigger('addToWishlist.failure', [errorObjectsArray]);
    }
  });
};

prodcat.ui.grids = (function() {
  var grids = [];
  return $.extend(prodcat.ui.grids || {}, {
    add: function(grid) {
      if (_.indexOf(grids, grid) === -1) { // if we can't find the grid in our list
        grids.push(grid);
      }
    },
    clean: function(args) {
      if (args.before && typeof args.before === 'function') {
        args.before(grids);
      }
      Drupal.behaviors.grids.attach(grids);
      if (args.after && typeof args.before === 'function') {
        args.after(grids);
      }
      grids = [];
    }
  });
}());


////////////// DEPRECATED (see comments above each method for why): //////////////

// prodcat.ui will not define controllers for product widgets. These will
// be event-based.
prodcat.ui.addCartButton = {
  selectSku: function($addBtn, skuBaseId) {
    $addBtn.data('sku-base-id', skuBaseId);
    this.updateInvStatus($addBtn);
  },
  updateInvStatus: function($addBtn) {
    if (!$addBtn.length) {
      return;
    }
    var skuBaseId = $addBtn.data('sku-base-id');
    var skuDataL2 = prodcat.data.getSku(skuBaseId);
    if (skuDataL2 && !skuDataL2.isShoppable) {
      $addBtn.addClass('button--disabled');
      $addBtn.data('disabled', true);
      // $addBtn.hide();
      if (Drupal.settings.common.has_waitlist && skuDataL2.INVENTORY_STATUS - 0 === 3 || skuDataL2.INVENTORY_STATUS - 0 === 7) {
        $(document).trigger('product:waitlist:init', skuDataL2);
      }
    } else {
      if (Drupal.settings.common.has_waitlist) {
        $(document).trigger('product:waitlist:reset');
      }
      $addBtn.removeClass('button--disabled');
      $addBtn.data('disabled', false);
      // $addBtn.show();
    }
  }
};

// Event listener on $(document).on('product.skuSelect') replaces this
// functionality.
prodcat.ui.addFavoritesButton = {
  selectSku: function($addFavBtn, skuBaseId) {
    $addFavBtn.data('sku-base-id', skuBaseId);
  }
};

// This logic updates all instances of a sku on the page, which is bad (it
// should only update the sku view the user interacted with). Use
// .on('product.skuSelect') instead.
/**
 * Takes a product ID & SKU Base ID as parameters. Fires a "sku:select" event on all
 * elements whose data-product-id attribute has a value that matches the product ID.
 * Passes the SKU Base ID as a memo to that event.
 * @param {string} productId productid
 * @param {string} skuBaseId skubaseid
 * @inheritdoc
 */
prodcat.ui.selectSku = function(productId, skuBaseId) {
  var prodSlctr = '[data-product-id="' + productId + '"]';
  $(prodSlctr).trigger('sku:select', skuBaseId);
};

// Same as above, use .on('product.skuDisplay') instead. The reason for both
// skuDisplay and skuSelect has to do with the way you could hover over shades
// on Bobbi and it would change the view to preview the sku without actually
// selecting them. "previewSku" would probably be a more clear way of naming it.
/**
 * Takes a product ID & SKU Base ID as parameters. Fires a "sku:select" event on all
 * elements whose data-product-id attribute has a value that matches the product ID.
 * Passes the SKU Base ID as a memo to that event.
 * @param {string} productId productid
 * @param {string} skuBaseId skuid
 * @inheritdoc
 */
prodcat.ui.displaySku = function(productId, skuBaseId) {
  var prodSlctr = '[data-product-id="' + productId + '"]';
  $(prodSlctr).trigger('sku:display', skuBaseId);
};

// Trigger "init" event on products directly.
prodcat.ui.init = function(context) {
  $('.js-product', context).trigger('product.init');
};

// This is primarily used for debugging, gnav_cart.js handles the message itself.
prodcat.ui.getCartMessage = function(cartResult, msg) {
  var prod = cartResult.getItem().product;
  var sku = prod.sku;
  var returnMsg = sku.SKU_ID + ' ' + prod.PROD_RGN_NAME;
  returnMsg += sku.SHADENAME ? ' ' + sku.SHADENAME : '';
  returnMsg += ' ' + msg;
  return returnMsg;
};

// This is an unnecessary abstraction. If you want to
// find the closest product parent use $el.closest('.js-product') directly in
// your stuff, it's more clear that way.
prodcat.ui.getProductEl = function($el) {
  var $closestProdEl = $el.closest('.js-product');
  var prodId = $closestProdEl.attr('data-product-id');
  return $('.js-product[data-product-id="' + prodId + '"]');
};

// This is now an event, no need to wrap in a public method, just trigger the
// event.
prodcat.ui.updateTextFields = function($productEl, skuBaseId) {
  $productEl.trigger('product.updateText', [skuBaseId]);
};

////////////// END DEPRECATED //////////////
})(jQuery, window.prodcat = window.prodcat || {}, window.generic = window.generic || {}, window.site = window.site || {});
